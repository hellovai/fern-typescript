// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`runGenerator trace 1`] = `
Array [
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import { TraceApi } from \\"../../../..\\";
import * as errors from \\"../../../../errors\\";

export abstract class AbstractAdminService {
    private router = express.Router().use(express.json());

    public abstract updateTestSubmissionStatus(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.TestSubmissionStatus, never, never>): Promise<void>;

    public abstract sendTestSubmissionUpdate(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.TestSubmissionUpdate, never, never>): Promise<void>;

    public abstract updateWorkspaceSubmissionStatus(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.WorkspaceSubmissionStatus, never, never>): Promise<void>;

    public abstract sendWorkspaceSubmissionUpdate(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.WorkspaceSubmissionUpdate, never, never>): Promise<void>;

    public abstract storeTracedTestCase(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
        testCaseId: string;
    }, never, TraceApi.StoreTracedTestCaseRequest, {
        \\"some-query-param\\"?: string | null;
    }, never>): Promise<void>;

    public abstract storeTracedTestCaseV2(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
        testCaseId: serializers.v2.TestCaseId.Raw;
    }, never, TraceApi.TraceResponseV2[], never, never>): Promise<void>;

    public abstract storeTracedWorkspace(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.StoreTracedWorkspaceRequest, never, never>): Promise<void>;

    public abstract storeTracedWorkspaceV2(request: express.Request<{
        submissionId: serializers.SubmissionId.Raw;
    }, never, TraceApi.TraceResponseV2[], never, never>): Promise<void>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post(\\"/store-test-submission-status/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.TestSubmissionStatus.parse(req.body);
                await this.updateTestSubmissionStatus(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'updateTestSubmissionStatus' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-test-submission-status-v2/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.TestSubmissionUpdate.parse(req.body);
                await this.sendTestSubmissionUpdate(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'sendTestSubmissionUpdate' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-submission-status/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.WorkspaceSubmissionStatus.parse(req.body);
                await this.updateWorkspaceSubmissionStatus(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'updateWorkspaceSubmissionStatus' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-submission-status-v2/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.WorkspaceSubmissionUpdate.parse(req.body);
                await this.sendWorkspaceSubmissionUpdate(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'sendWorkspaceSubmissionUpdate' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-test-trace/submission/:submissionId/testCase/:testCaseId\\", async (req, res, next) => {
            try {
                req.body = await serializers.StoreTracedTestCaseRequest.parse(req.body);
                await this.storeTracedTestCase(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedTestCase' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-test-trace-v2/submission/:submissionId/testCase/:testCaseId\\", async (req, res, next) => {
            try {
                req.body = await serializers.admin.storeTracedTestCaseV2.Request.parse(req.body);
                await this.storeTracedTestCaseV2(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedTestCaseV2' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-trace/submission/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.StoreTracedWorkspaceRequest.parse(req.body);
                await this.storeTracedWorkspace(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedWorkspace' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/store-workspace-trace-v2/submission/:submissionId\\", async (req, res, next) => {
            try {
                req.body = await serializers.admin.storeTracedWorkspaceV2.Request.parse(req.body);
                await this.storeTracedWorkspaceV2(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'storeTracedWorkspaceV2' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractAdminService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export { AbstractAdminService } from \\"./AbstractAdminService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../..\\";

export interface StoreTracedTestCaseRequest {
    result: TraceApi.TestCaseResultWithStdout;
    traceResponses: TraceApi.TraceResponse[];
}
",
                        "name": "StoreTracedTestCaseRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../..\\";

export interface StoreTracedWorkspaceRequest {
    workspaceRunDetails: TraceApi.WorkspaceRunDetails;
    traceResponses: TraceApi.TraceResponse[];
}
",
                        "name": "StoreTracedWorkspaceRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { StoreTracedTestCaseRequest } from \\"./StoreTracedTestCaseRequest\\";
export { StoreTracedWorkspaceRequest } from \\"./StoreTracedWorkspaceRequest\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "admin",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface BinaryTreeNodeAndTreeValue {
    nodeId: TraceApi.NodeId;
    fullTree: TraceApi.BinaryTreeValue;
}
",
                    "name": "BinaryTreeNodeAndTreeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface BinaryTreeNodeValue {
    nodeId: TraceApi.NodeId;
    val: number;
    right?: TraceApi.NodeId;
    left?: TraceApi.NodeId;
}
",
                    "name": "BinaryTreeNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface BinaryTreeValue {
    root?: TraceApi.NodeId;
    nodes: Record<TraceApi.NodeId, TraceApi.BinaryTreeNodeValue>;
}
",
                    "name": "BinaryTreeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * ISO 8601 date; formatted YYYY-MM-DD (i.e. 2012-02-01)
 */
export type Date = string;
",
                    "name": "Date.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface DebugKeyValuePairs {
    key: TraceApi.DebugVariableValue;
    value: TraceApi.DebugVariableValue;
}
",
                    "name": "DebugKeyValuePairs.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface DebugMapValue {
    keyValuePairs: TraceApi.DebugKeyValuePairs[];
}
",
                    "name": "DebugMapValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type DebugVariableValue =
    | TraceApi.DebugVariableValue.IntegerValue
    | TraceApi.DebugVariableValue.BooleanValue
    | TraceApi.DebugVariableValue.DoubleValue
    | TraceApi.DebugVariableValue.StringValue
    | TraceApi.DebugVariableValue.CharValue
    | TraceApi.DebugVariableValue.MapValue
    | TraceApi.DebugVariableValue.ListValue
    | TraceApi.DebugVariableValue.BinaryTreeNodeValue
    | TraceApi.DebugVariableValue.SinglyLinkedListNodeValue
    | TraceApi.DebugVariableValue.DoublyLinkedListNodeValue
    | TraceApi.DebugVariableValue.UndefinedValue
    | TraceApi.DebugVariableValue.NullValue
    | TraceApi.DebugVariableValue.GenericValue
    | TraceApi.DebugVariableValue._Unknown;

export declare namespace DebugVariableValue {
    interface IntegerValue extends _Utils {
        type: \\"integerValue\\";
        value: number;
    }

    interface BooleanValue extends _Utils {
        type: \\"booleanValue\\";
        value: boolean;
    }

    interface DoubleValue extends _Utils {
        type: \\"doubleValue\\";
        value: number;
    }

    interface StringValue extends _Utils {
        type: \\"stringValue\\";
        value: string;
    }

    interface CharValue extends _Utils {
        type: \\"charValue\\";
        value: string;
    }

    interface MapValue extends TraceApi.DebugMapValue, _Utils {
        type: \\"mapValue\\";
    }

    interface ListValue extends _Utils {
        type: \\"listValue\\";
        value: TraceApi.DebugVariableValue[];
    }

    interface BinaryTreeNodeValue extends TraceApi.BinaryTreeNodeAndTreeValue, _Utils {
        type: \\"binaryTreeNodeValue\\";
    }

    interface SinglyLinkedListNodeValue extends TraceApi.SinglyLinkedListNodeAndListValue, _Utils {
        type: \\"singlyLinkedListNodeValue\\";
    }

    interface DoublyLinkedListNodeValue extends TraceApi.DoublyLinkedListNodeAndListValue, _Utils {
        type: \\"doublyLinkedListNodeValue\\";
    }

    interface UndefinedValue extends _Utils {
        type: \\"undefinedValue\\";
    }

    interface NullValue extends _Utils {
        type: \\"nullValue\\";
    }

    interface GenericValue extends TraceApi.GenericValue, _Utils {
        type: \\"genericValue\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.DebugVariableValue._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        integerValue: (value: number) => _Result;
        booleanValue: (value: boolean) => _Result;
        doubleValue: (value: number) => _Result;
        stringValue: (value: string) => _Result;
        charValue: (value: string) => _Result;
        mapValue: (value: TraceApi.DebugMapValue) => _Result;
        listValue: (value: TraceApi.DebugVariableValue[]) => _Result;
        binaryTreeNodeValue: (value: TraceApi.BinaryTreeNodeAndTreeValue) => _Result;
        singlyLinkedListNodeValue: (value: TraceApi.SinglyLinkedListNodeAndListValue) => _Result;
        doublyLinkedListNodeValue: (value: TraceApi.DoublyLinkedListNodeAndListValue) => _Result;
        undefinedValue: () => _Result;
        nullValue: () => _Result;
        genericValue: (value: TraceApi.GenericValue) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const DebugVariableValue = {
    integerValue: (value: number): TraceApi.DebugVariableValue.IntegerValue => {
        return {
            value: value,
            type: \\"integerValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.IntegerValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    booleanValue: (value: boolean): TraceApi.DebugVariableValue.BooleanValue => {
        return {
            value: value,
            type: \\"booleanValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.BooleanValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    doubleValue: (value: number): TraceApi.DebugVariableValue.DoubleValue => {
        return {
            value: value,
            type: \\"doubleValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.DoubleValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    stringValue: (value: string): TraceApi.DebugVariableValue.StringValue => {
        return {
            value: value,
            type: \\"stringValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.StringValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    charValue: (value: string): TraceApi.DebugVariableValue.CharValue => {
        return {
            value: value,
            type: \\"charValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.CharValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    mapValue: (value: TraceApi.DebugMapValue): TraceApi.DebugVariableValue.MapValue => {
        return {
            ...value,
            type: \\"mapValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.MapValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    listValue: (value: TraceApi.DebugVariableValue[]): TraceApi.DebugVariableValue.ListValue => {
        return {
            value: value,
            type: \\"listValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.ListValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    binaryTreeNodeValue: (value: TraceApi.BinaryTreeNodeAndTreeValue): TraceApi.DebugVariableValue.BinaryTreeNodeValue => {
        return {
            ...value,
            type: \\"binaryTreeNodeValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.BinaryTreeNodeValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    singlyLinkedListNodeValue: (value: TraceApi.SinglyLinkedListNodeAndListValue): TraceApi.DebugVariableValue.SinglyLinkedListNodeValue => {
        return {
            ...value,
            type: \\"singlyLinkedListNodeValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.SinglyLinkedListNodeValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    doublyLinkedListNodeValue: (value: TraceApi.DoublyLinkedListNodeAndListValue): TraceApi.DebugVariableValue.DoublyLinkedListNodeValue => {
        return {
            ...value,
            type: \\"doublyLinkedListNodeValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.DoublyLinkedListNodeValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    undefinedValue: (): TraceApi.DebugVariableValue.UndefinedValue => {
        return {
            type: \\"undefinedValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.UndefinedValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    nullValue: (): TraceApi.DebugVariableValue.NullValue => {
        return {
            type: \\"nullValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.NullValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    genericValue: (value: TraceApi.GenericValue): TraceApi.DebugVariableValue.GenericValue => {
        return {
            ...value,
            type: \\"genericValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue.GenericValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.DebugVariableValue._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.DebugVariableValue._Unknown, visitor: TraceApi.DebugVariableValue._Visitor<_Result>) {
                return TraceApi.DebugVariableValue._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.DebugVariableValue, visitor: TraceApi.DebugVariableValue._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"integerValue\\": return visitor.integerValue(value.value);
            case \\"booleanValue\\": return visitor.booleanValue(value.value);
            case \\"doubleValue\\": return visitor.doubleValue(value.value);
            case \\"stringValue\\": return visitor.stringValue(value.value);
            case \\"charValue\\": return visitor.charValue(value.value);
            case \\"mapValue\\": return visitor.mapValue(value);
            case \\"listValue\\": return visitor.listValue(value.value);
            case \\"binaryTreeNodeValue\\": return visitor.binaryTreeNodeValue(value);
            case \\"singlyLinkedListNodeValue\\": return visitor.singlyLinkedListNodeValue(value);
            case \\"doublyLinkedListNodeValue\\": return visitor.doublyLinkedListNodeValue(value);
            case \\"undefinedValue\\": return visitor.undefinedValue();
            case \\"nullValue\\": return visitor.nullValue();
            case \\"genericValue\\": return visitor.genericValue(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "DebugVariableValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface DoublyLinkedListNodeAndListValue {
    nodeId: TraceApi.NodeId;
    fullList: TraceApi.DoublyLinkedListValue;
}
",
                    "name": "DoublyLinkedListNodeAndListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface DoublyLinkedListNodeValue {
    nodeId: TraceApi.NodeId;
    val: number;
    next?: TraceApi.NodeId;
    prev?: TraceApi.NodeId;
}
",
                    "name": "DoublyLinkedListNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface DoublyLinkedListValue {
    head?: TraceApi.NodeId;
    nodes: Record<TraceApi.NodeId, TraceApi.DoublyLinkedListNodeValue>;
}
",
                    "name": "DoublyLinkedListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FileInfo {
    filename: string;
    contents: string;
}
",
                    "name": "FileInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface GenericValue {
    stringifiedType?: string;
    stringifiedValue: string;
}
",
                    "name": "GenericValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface KeyValuePair {
    key: TraceApi.VariableValue;
    value: TraceApi.VariableValue;
}
",
                    "name": "KeyValuePair.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     TraceApi.Language.Java
 */
export type Language =
    | \\"JAVA\\"
    | \\"JAVASCRIPT\\"
    | \\"PYTHON\\";

export const Language = {
    Java: \\"JAVA\\",
    Javascript: \\"JAVASCRIPT\\",
    Python: \\"PYTHON\\"
} as const;
",
                    "name": "Language.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ListType {
    valueType: TraceApi.VariableType;
    /** Whether this list is fixed-size (for languages that supports fixed-size lists). Defaults to false. */
    isFixedLength?: boolean;
}
",
                    "name": "ListType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface MapType {
    keyType: TraceApi.VariableType;
    valueType: TraceApi.VariableType;
}
",
                    "name": "MapType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface MapValue {
    keyValuePairs: TraceApi.KeyValuePair[];
}
",
                    "name": "MapValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type NodeId = string;
",
                    "name": "NodeId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ProblemId = string;
",
                    "name": "ProblemId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     {
 *         \\"foo\\": \\"hello\\",
 *         \\"bar\\": {
 *             \\"yo\\": 123
 *         }
 *     }
 */
export type RandomUnknownType = unknown;
",
                    "name": "RandomUnknownType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface SinglyLinkedListNodeAndListValue {
    nodeId: TraceApi.NodeId;
    fullList: TraceApi.SinglyLinkedListValue;
}
",
                    "name": "SinglyLinkedListNodeAndListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface SinglyLinkedListNodeValue {
    nodeId: TraceApi.NodeId;
    val: number;
    next?: TraceApi.NodeId;
}
",
                    "name": "SinglyLinkedListNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface SinglyLinkedListValue {
    head?: TraceApi.NodeId;
    nodes: Record<TraceApi.NodeId, TraceApi.SinglyLinkedListNodeValue>;
}
",
                    "name": "SinglyLinkedListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestCase {
    id: string;
    params: TraceApi.VariableValue[];
}
",
                    "name": "TestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestCaseWithExpectedResult {
    testCase: TraceApi.TestCase;
    expectedResult: TraceApi.VariableValue;
}
",
                    "name": "TestCaseWithExpectedResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * @example
 *     \\"user12345\\"
 */
export type UserId = string;
",
                    "name": "UserId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type VariableType =
    | TraceApi.VariableType.IntegerType
    | TraceApi.VariableType.DoubleType
    | TraceApi.VariableType.BooleanType
    | TraceApi.VariableType.StringType
    | TraceApi.VariableType.CharType
    | TraceApi.VariableType.ListType
    | TraceApi.VariableType.MapType
    | TraceApi.VariableType.BinaryTreeType
    | TraceApi.VariableType.SinglyLinkedListType
    | TraceApi.VariableType.DoublyLinkedListType
    | TraceApi.VariableType._Unknown;

export declare namespace VariableType {
    interface IntegerType extends _Utils {
        type: \\"integerType\\";
    }

    interface DoubleType extends _Utils {
        type: \\"doubleType\\";
    }

    interface BooleanType extends _Utils {
        type: \\"booleanType\\";
    }

    interface StringType extends _Utils {
        type: \\"stringType\\";
    }

    interface CharType extends _Utils {
        type: \\"charType\\";
    }

    interface ListType extends TraceApi.ListType, _Utils {
        type: \\"listType\\";
    }

    interface MapType extends TraceApi.MapType, _Utils {
        type: \\"mapType\\";
    }

    interface BinaryTreeType extends _Utils {
        type: \\"binaryTreeType\\";
    }

    interface SinglyLinkedListType extends _Utils {
        type: \\"singlyLinkedListType\\";
    }

    interface DoublyLinkedListType extends _Utils {
        type: \\"doublyLinkedListType\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.VariableType._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        integerType: () => _Result;
        doubleType: () => _Result;
        booleanType: () => _Result;
        stringType: () => _Result;
        charType: () => _Result;
        listType: (value: TraceApi.ListType) => _Result;
        mapType: (value: TraceApi.MapType) => _Result;
        binaryTreeType: () => _Result;
        singlyLinkedListType: () => _Result;
        doublyLinkedListType: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const VariableType = {
    integerType: (): TraceApi.VariableType.IntegerType => {
        return {
            type: \\"integerType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.IntegerType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    doubleType: (): TraceApi.VariableType.DoubleType => {
        return {
            type: \\"doubleType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.DoubleType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    booleanType: (): TraceApi.VariableType.BooleanType => {
        return {
            type: \\"booleanType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.BooleanType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    stringType: (): TraceApi.VariableType.StringType => {
        return {
            type: \\"stringType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.StringType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    charType: (): TraceApi.VariableType.CharType => {
        return {
            type: \\"charType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.CharType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    listType: (value: TraceApi.ListType): TraceApi.VariableType.ListType => {
        return {
            ...value,
            type: \\"listType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.ListType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    mapType: (value: TraceApi.MapType): TraceApi.VariableType.MapType => {
        return {
            ...value,
            type: \\"mapType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.MapType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    binaryTreeType: (): TraceApi.VariableType.BinaryTreeType => {
        return {
            type: \\"binaryTreeType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.BinaryTreeType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    singlyLinkedListType: (): TraceApi.VariableType.SinglyLinkedListType => {
        return {
            type: \\"singlyLinkedListType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.SinglyLinkedListType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    doublyLinkedListType: (): TraceApi.VariableType.DoublyLinkedListType => {
        return {
            type: \\"doublyLinkedListType\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType.DoublyLinkedListType, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.VariableType._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.VariableType._Unknown, visitor: TraceApi.VariableType._Visitor<_Result>) {
                return TraceApi.VariableType._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.VariableType, visitor: TraceApi.VariableType._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"integerType\\": return visitor.integerType();
            case \\"doubleType\\": return visitor.doubleType();
            case \\"booleanType\\": return visitor.booleanType();
            case \\"stringType\\": return visitor.stringType();
            case \\"charType\\": return visitor.charType();
            case \\"listType\\": return visitor.listType(value);
            case \\"mapType\\": return visitor.mapType(value);
            case \\"binaryTreeType\\": return visitor.binaryTreeType();
            case \\"singlyLinkedListType\\": return visitor.singlyLinkedListType();
            case \\"doublyLinkedListType\\": return visitor.doublyLinkedListType();
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "VariableType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type VariableValue =
    | TraceApi.VariableValue.IntegerValue
    | TraceApi.VariableValue.BooleanValue
    | TraceApi.VariableValue.DoubleValue
    | TraceApi.VariableValue.StringValue
    | TraceApi.VariableValue.CharValue
    | TraceApi.VariableValue.MapValue
    | TraceApi.VariableValue.ListValue
    | TraceApi.VariableValue.BinaryTreeValue
    | TraceApi.VariableValue.SinglyLinkedListValue
    | TraceApi.VariableValue.DoublyLinkedListValue
    | TraceApi.VariableValue.NullValue
    | TraceApi.VariableValue._Unknown;

export declare namespace VariableValue {
    interface IntegerValue extends _Utils {
        type: \\"integerValue\\";
        value: number;
    }

    interface BooleanValue extends _Utils {
        type: \\"booleanValue\\";
        value: boolean;
    }

    interface DoubleValue extends _Utils {
        type: \\"doubleValue\\";
        value: number;
    }

    interface StringValue extends _Utils {
        type: \\"stringValue\\";
        value: string;
    }

    interface CharValue extends _Utils {
        type: \\"charValue\\";
        value: string;
    }

    interface MapValue extends TraceApi.MapValue, _Utils {
        type: \\"mapValue\\";
    }

    interface ListValue extends _Utils {
        type: \\"listValue\\";
        value: TraceApi.VariableValue[];
    }

    interface BinaryTreeValue extends TraceApi.BinaryTreeValue, _Utils {
        type: \\"binaryTreeValue\\";
    }

    interface SinglyLinkedListValue extends TraceApi.SinglyLinkedListValue, _Utils {
        type: \\"singlyLinkedListValue\\";
    }

    interface DoublyLinkedListValue extends TraceApi.DoublyLinkedListValue, _Utils {
        type: \\"doublyLinkedListValue\\";
    }

    interface NullValue extends _Utils {
        type: \\"nullValue\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.VariableValue._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        integerValue: (value: number) => _Result;
        booleanValue: (value: boolean) => _Result;
        doubleValue: (value: number) => _Result;
        stringValue: (value: string) => _Result;
        charValue: (value: string) => _Result;
        mapValue: (value: TraceApi.MapValue) => _Result;
        listValue: (value: TraceApi.VariableValue[]) => _Result;
        binaryTreeValue: (value: TraceApi.BinaryTreeValue) => _Result;
        singlyLinkedListValue: (value: TraceApi.SinglyLinkedListValue) => _Result;
        doublyLinkedListValue: (value: TraceApi.DoublyLinkedListValue) => _Result;
        nullValue: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const VariableValue = {
    integerValue: (value: number): TraceApi.VariableValue.IntegerValue => {
        return {
            value: value,
            type: \\"integerValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.IntegerValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    booleanValue: (value: boolean): TraceApi.VariableValue.BooleanValue => {
        return {
            value: value,
            type: \\"booleanValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.BooleanValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    doubleValue: (value: number): TraceApi.VariableValue.DoubleValue => {
        return {
            value: value,
            type: \\"doubleValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.DoubleValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    stringValue: (value: string): TraceApi.VariableValue.StringValue => {
        return {
            value: value,
            type: \\"stringValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.StringValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    charValue: (value: string): TraceApi.VariableValue.CharValue => {
        return {
            value: value,
            type: \\"charValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.CharValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    mapValue: (value: TraceApi.MapValue): TraceApi.VariableValue.MapValue => {
        return {
            ...value,
            type: \\"mapValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.MapValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    listValue: (value: TraceApi.VariableValue[]): TraceApi.VariableValue.ListValue => {
        return {
            value: value,
            type: \\"listValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.ListValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    binaryTreeValue: (value: TraceApi.BinaryTreeValue): TraceApi.VariableValue.BinaryTreeValue => {
        return {
            ...value,
            type: \\"binaryTreeValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.BinaryTreeValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    singlyLinkedListValue: (value: TraceApi.SinglyLinkedListValue): TraceApi.VariableValue.SinglyLinkedListValue => {
        return {
            ...value,
            type: \\"singlyLinkedListValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.SinglyLinkedListValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    doublyLinkedListValue: (value: TraceApi.DoublyLinkedListValue): TraceApi.VariableValue.DoublyLinkedListValue => {
        return {
            ...value,
            type: \\"doublyLinkedListValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.DoublyLinkedListValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    nullValue: (): TraceApi.VariableValue.NullValue => {
        return {
            type: \\"nullValue\\",
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue.NullValue, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.VariableValue._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.VariableValue._Unknown, visitor: TraceApi.VariableValue._Visitor<_Result>) {
                return TraceApi.VariableValue._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.VariableValue, visitor: TraceApi.VariableValue._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"integerValue\\": return visitor.integerValue(value.value);
            case \\"booleanValue\\": return visitor.booleanValue(value.value);
            case \\"doubleValue\\": return visitor.doubleValue(value.value);
            case \\"stringValue\\": return visitor.stringValue(value.value);
            case \\"charValue\\": return visitor.charValue(value.value);
            case \\"mapValue\\": return visitor.mapValue(value);
            case \\"listValue\\": return visitor.listValue(value.value);
            case \\"binaryTreeValue\\": return visitor.binaryTreeValue(value);
            case \\"singlyLinkedListValue\\": return visitor.singlyLinkedListValue(value);
            case \\"doublyLinkedListValue\\": return visitor.doublyLinkedListValue(value);
            case \\"nullValue\\": return visitor.nullValue();
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "VariableValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
export * from \\"./RandomUnknownType\\";
export * from \\"./Date\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "commons",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";

export abstract class AbstractHomepageService {
    private router = express.Router().use(express.json());

    public abstract getHomepageProblems(request: express.Request<never, TraceApi.ProblemId[], never, never, never>): Promise<TraceApi.ProblemId[]>;

    public abstract setHomepageProblems(request: express.Request<never, never, TraceApi.ProblemId[], never, never>): Promise<void>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.get(\\"/\\", async (req, res, next) => {
            try {
                const response = await this.getHomepageProblems(req as any);
                res.send(await serializers.homepage.getHomepageProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getHomepageProblems' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/\\", async (req, res, next) => {
            try {
                req.body = await serializers.homepage.setHomepageProblems.Request.parse(req.body);
                await this.setHomepageProblems(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'setHomepageProblems' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractHomepageService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractHomepageService } from \\"./AbstractHomepageService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "homepage",
            "type": "directory",
          },
          Object {
            "contents": "export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./langServer\\";
export * from \\"./langServer/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * as admin from \\"./admin\\";
export * from \\"./admin/service/requests\\";
export * from \\"./problem/service/requests\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
export * from \\"./playlist/errors\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface LangServerRequest {
    request?: unknown;
}
",
                    "name": "LangServerRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface LangServerResponse {
    response?: unknown;
}
",
                    "name": "LangServerResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "langServer",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";

export abstract class AbstractMigrationService {
    private router = express.Router().use(express.json());

    public abstract getAttemptedMigrations(request: express.Request<never, TraceApi.Migration[], never, never, never>): Promise<TraceApi.Migration[]>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.get(\\"/all\\", async (req, res, next) => {
            try {
                const response = await this.getAttemptedMigrations(req as any);
                res.send(await serializers.migration.getAttemptedMigrations.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getAttemptedMigrations' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractMigrationService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractMigrationService } from \\"./AbstractMigrationService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface Migration {
    name: string;
    status: TraceApi.MigrationStatus;
}
",
                    "name": "Migration.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type MigrationStatus =
    | \\"RUNNING\\"
    | \\"FAILED\\"
    | \\"FINISHED\\";

export const MigrationStatus = {
    Running: \\"RUNNING\\",
    Failed: \\"FAILED\\",
    Finished: \\"FINISHED\\"
} as const;
",
                    "name": "MigrationStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "migration",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as errors from \\"../../../../errors\\";
import express from \\"express\\";

export class PlaylistIdNotFoundError extends errors.TraceApiError {
    constructor() {
        super();
        Object.setPrototypeOf(this, PlaylistIdNotFoundError.prototype);
    }

    public send(res: express.Response): void {
        res.sendStatus(404);
    }
}
",
                    "name": "PlaylistIdNotFoundError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as errors from \\"../../../../errors\\";
import express from \\"express\\";

export class UnauthorizedError extends errors.TraceApiError {
    constructor() {
        super();
        Object.setPrototypeOf(this, UnauthorizedError.prototype);
    }

    public send(res: express.Response): void {
        res.sendStatus(401);
    }
}
",
                    "name": "UnauthorizedError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistIdNotFoundError\\";
export * from \\"./UnauthorizedError\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "errors",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
export * from \\"./errors\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";

export abstract class AbstractPlaylistService {
    private router = express.Router().use(express.json());

    public abstract createPlaylist(request: express.Request<{
        serviceParam: number;
    }, TraceApi.Playlist, TraceApi.PlaylistCreateRequest, {
        \\"multiple\\": number;
        \\"multipleOptional\\"?: boolean | null;
    }, never>): Promise<TraceApi.Playlist>;

    public abstract getPlaylists(request: express.Request<{
        serviceParam: number;
    }, TraceApi.Playlist[], never, {
        \\"limit\\"?: number | null;
        \\"otherField\\": string;
    }, never>): Promise<TraceApi.Playlist[]>;

    public abstract getPlaylist(request: express.Request<{
        serviceParam: number;
        playlistId: serializers.PlaylistId.Raw;
    }, TraceApi.Playlist, never, never, never>): Promise<TraceApi.Playlist>;

    public abstract updatePlaylist(request: express.Request<{
        serviceParam: number;
        playlistId: serializers.PlaylistId.Raw;
    }, TraceApi.Playlist | undefined, TraceApi.UpdatePlaylistRequest | undefined, never, never>): Promise<TraceApi.Playlist | undefined>;

    public abstract deletePlaylist(request: express.Request<{
        serviceParam: number;
        playlist_id: serializers.PlaylistId.Raw;
    }, never, never, never, never>): Promise<void>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post(\\"/create\\", async (req, res, next) => {
            try {
                req.body = await serializers.PlaylistCreateRequest.parse(req.body);
                const response = await this.createPlaylist(req as any);
                res.send(await serializers.Playlist.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'createPlaylist' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/all\\", async (req, res, next) => {
            try {
                const response = await this.getPlaylists(req as any);
                res.send(await serializers.playlist.getPlaylists.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getPlaylists' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/:playlistId\\", async (req, res, next) => {
            try {
                const response = await this.getPlaylist(req as any);
                res.send(await serializers.Playlist.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    switch (error.constructor.name) {
                        case \\"PlaylistIdNotFoundError\\":
                        case \\"UnauthorizedError\\": break;
                        default: console.warn(\`Endpoint 'getPlaylist' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    }
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.put(\\"/:playlistId\\", async (req, res, next) => {
            try {
                req.body = await serializers.playlist.updatePlaylist.Request.parse(req.body);
                const response = await this.updatePlaylist(req as any);
                res.send(await serializers.playlist.updatePlaylist.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    switch (error.constructor.name) {
                        case \\"PlaylistIdNotFoundError\\": break;
                        default: console.warn(\`Endpoint 'updatePlaylist' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    }
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.delete(\\"/:playlist_id\\", async (req, res, next) => {
            try {
                await this.deletePlaylist(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'deletePlaylist' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractPlaylistService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractPlaylistService } from \\"./AbstractPlaylistService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type Color =
    | \\"RED\\"
    | \\"BLUE\\";

export const Color = {
    Red: \\"RED\\",
    Blue: \\"BLUE\\"
} as const;
",
                    "name": "Color.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type DateUnion =
    | TraceApi.DateUnion.Date_
    | TraceApi.DateUnion.Datetime
    | TraceApi.DateUnion._Unknown;

export declare namespace DateUnion {
    interface Date_ extends _Utils {
        type: \\"date\\";
        value: TraceApi.Date;
    }

    interface Datetime extends _Utils {
        type: \\"datetime\\";
        value: Date;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.DateUnion._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        date: (value: TraceApi.Date) => _Result;
        datetime: (value: Date) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const DateUnion = {
    date: (value: TraceApi.Date): TraceApi.DateUnion.Date_ => {
        return {
            value: value,
            type: \\"date\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DateUnion.Date_, visitor: TraceApi.DateUnion._Visitor<_Result>) {
                return TraceApi.DateUnion._visit(this, visitor);
            }
        };
    },

    datetime: (value: Date): TraceApi.DateUnion.Datetime => {
        return {
            value: value,
            type: \\"datetime\\",
            \\"_visit\\": function <_Result>(this: TraceApi.DateUnion.Datetime, visitor: TraceApi.DateUnion._Visitor<_Result>) {
                return TraceApi.DateUnion._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.DateUnion._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.DateUnion._Unknown, visitor: TraceApi.DateUnion._Visitor<_Result>) {
                return TraceApi.DateUnion._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.DateUnion, visitor: TraceApi.DateUnion._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"date\\": return visitor.date(value.value);
            case \\"datetime\\": return visitor.datetime(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "DateUnion.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

/**
 * @example
 *     {
 *         [TraceApi.Color.Red]: true
 *     }
 */
export type MapWithEnumKey = Record<TraceApi.Color, boolean | undefined>;
",
                    "name": "MapWithEnumKey.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

/**
 * @example
 *     {
 *         [TraceApi.Color.Red]: true
 *     }
 */
export type MapWithEnumKeyAndOptionalValue = Record<TraceApi.Color, boolean | undefined>;
",
                    "name": "MapWithEnumKeyAndOptionalValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface Playlist extends TraceApi.PlaylistCreateRequest {
    playlistId: TraceApi.PlaylistId;
    ownerId: TraceApi.UserId;
}
",
                    "name": "Playlist.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface PlaylistCreateRequest {
    name: string;
    problems: TraceApi.ProblemId[];
}
",
                    "name": "PlaylistCreateRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type PlaylistId = string;
",
                    "name": "PlaylistId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type PlaylistIdNotFoundErrorBody =
    | TraceApi.PlaylistIdNotFoundErrorBody.PlaylistId
    | TraceApi.PlaylistIdNotFoundErrorBody._Unknown;

export declare namespace PlaylistIdNotFoundErrorBody {
    interface PlaylistId extends _Utils {
        type: \\"playlistId\\";
        value: TraceApi.PlaylistId;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.PlaylistIdNotFoundErrorBody._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        playlistId: (value: TraceApi.PlaylistId) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const PlaylistIdNotFoundErrorBody = {
    playlistId: (value: TraceApi.PlaylistId): TraceApi.PlaylistIdNotFoundErrorBody.PlaylistId => {
        return {
            value: value,
            type: \\"playlistId\\",
            \\"_visit\\": function <_Result>(this: TraceApi.PlaylistIdNotFoundErrorBody.PlaylistId, visitor: TraceApi.PlaylistIdNotFoundErrorBody._Visitor<_Result>) {
                return TraceApi.PlaylistIdNotFoundErrorBody._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.PlaylistIdNotFoundErrorBody._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.PlaylistIdNotFoundErrorBody._Unknown, visitor: TraceApi.PlaylistIdNotFoundErrorBody._Visitor<_Result>) {
                return TraceApi.PlaylistIdNotFoundErrorBody._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.PlaylistIdNotFoundErrorBody, visitor: TraceApi.PlaylistIdNotFoundErrorBody._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"playlistId\\": return visitor.playlistId(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "PlaylistIdNotFoundErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ReservedKeywordEnum =
    | \\"is\\"
    | \\"as\\"
    | \\"date\\";

export const ReservedKeywordEnum = {
    Is: \\"is\\",
    As: \\"as\\",
    Date: \\"date\\"
} as const;
",
                    "name": "ReservedKeywordEnum.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface UpdatePlaylistRequest {
    name: string;
    problems: TraceApi.ProblemId[];
}
",
                    "name": "UpdatePlaylistRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./PlaylistIdNotFoundErrorBody\\";
export * from \\"./DateUnion\\";
export * from \\"./ReservedKeywordEnum\\";
export * from \\"./MapWithEnumKey\\";
export * from \\"./MapWithEnumKeyAndOptionalValue\\";
export * from \\"./Color\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "playlist",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { TraceApi } from \\"../../../..\\";
import * as serializers from \\"../../../../serialization\\";
import * as errors from \\"../../../../errors\\";

export abstract class AbstractProblemService {
    private router = express.Router().use(express.json());

    public abstract createProblem(request: express.Request<never, TraceApi.CreateProblemResponse, TraceApi.CreateProblemRequest, never, never>): Promise<TraceApi.CreateProblemResponse>;

    public abstract updateProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, TraceApi.UpdateProblemResponse, TraceApi.CreateProblemRequest, never, never>): Promise<TraceApi.UpdateProblemResponse>;

    public abstract deleteProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, never, never, never, never>): Promise<void>;

    public abstract getDefaultStarterFiles(request: express.Request<never, TraceApi.GetDefaultStarterFilesResponse, TraceApi.GetDefaultStarterFilesRequest, never, never>): Promise<TraceApi.GetDefaultStarterFilesResponse>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post(\\"/create\\", async (req, res, next) => {
            try {
                req.body = await serializers.CreateProblemRequest.parse(req.body);
                const response = await this.createProblem(req as any);
                res.send(await serializers.CreateProblemResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'createProblem' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/update/:problemId\\", async (req, res, next) => {
            try {
                req.body = await serializers.CreateProblemRequest.parse(req.body);
                const response = await this.updateProblem(req as any);
                res.send(await serializers.UpdateProblemResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'updateProblem' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.delete(\\"/delete/:problemId\\", async (req, res, next) => {
            try {
                await this.deleteProblem(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'deleteProblem' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.post(\\"/default-starter-files\\", async (req, res, next) => {
            try {
                req.body = await serializers.GetDefaultStarterFilesRequest.parse(req.body);
                const response = await this.getDefaultStarterFiles(req as any);
                res.send(await serializers.GetDefaultStarterFilesResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getDefaultStarterFiles' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractProblemService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./requests\\";
export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../..\\";

export interface GetDefaultStarterFilesRequest {
    inputParams: TraceApi.VariableTypeAndName[];
    outputType: TraceApi.VariableType;
    methodName: string;
}
",
                        "name": "GetDefaultStarterFilesRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { GetDefaultStarterFilesRequest } from \\"./GetDefaultStarterFilesRequest\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type CreateProblemError =
    | TraceApi.CreateProblemError.Generic
    | TraceApi.CreateProblemError._Unknown;

export declare namespace CreateProblemError {
    interface Generic extends TraceApi.GenericCreateProblemError, _Utils {
        errorType: \\"generic\\";
    }

    interface _Unknown extends _Utils {
        errorType: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.CreateProblemError._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        generic: (value: TraceApi.GenericCreateProblemError) => _Result;
        _other: (value: {
            errorType: string;
        }) => _Result;
    }
}

export const CreateProblemError = {
    generic: (value: TraceApi.GenericCreateProblemError): TraceApi.CreateProblemError.Generic => {
        return {
            ...value,
            errorType: \\"generic\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CreateProblemError.Generic, visitor: TraceApi.CreateProblemError._Visitor<_Result>) {
                return TraceApi.CreateProblemError._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        errorType: string;
    }): TraceApi.CreateProblemError._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.CreateProblemError._Unknown, visitor: TraceApi.CreateProblemError._Visitor<_Result>) {
                return TraceApi.CreateProblemError._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.CreateProblemError, visitor: TraceApi.CreateProblemError._Visitor<_Result>): _Result => {
        switch (value.errorType) {
            case \\"generic\\": return visitor.generic(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "CreateProblemError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface CreateProblemRequest {
    problemName: string;
    problemDescription: TraceApi.ProblemDescription;
    files: Record<TraceApi.Language, TraceApi.ProblemFiles | undefined>;
    inputParams: TraceApi.VariableTypeAndName[];
    outputType: TraceApi.VariableType;
    testcases: TraceApi.TestCaseWithExpectedResult[];
    methodName: string;
}
",
                    "name": "CreateProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type CreateProblemResponse =
    | TraceApi.CreateProblemResponse.Success
    | TraceApi.CreateProblemResponse.Error_
    | TraceApi.CreateProblemResponse._Unknown;

export declare namespace CreateProblemResponse {
    interface Success extends _Utils {
        type: \\"success\\";
        value: TraceApi.ProblemId;
    }

    interface Error_ extends _Utils {
        type: \\"error\\";
        value: TraceApi.CreateProblemError;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.CreateProblemResponse._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        success: (value: TraceApi.ProblemId) => _Result;
        error: (value: TraceApi.CreateProblemError) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const CreateProblemResponse = {
    success: (value: TraceApi.ProblemId): TraceApi.CreateProblemResponse.Success => {
        return {
            value: value,
            type: \\"success\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CreateProblemResponse.Success, visitor: TraceApi.CreateProblemResponse._Visitor<_Result>) {
                return TraceApi.CreateProblemResponse._visit(this, visitor);
            }
        };
    },

    error: (value: TraceApi.CreateProblemError): TraceApi.CreateProblemResponse.Error_ => {
        return {
            value: value,
            type: \\"error\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CreateProblemResponse.Error_, visitor: TraceApi.CreateProblemResponse._Visitor<_Result>) {
                return TraceApi.CreateProblemResponse._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.CreateProblemResponse._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.CreateProblemResponse._Unknown, visitor: TraceApi.CreateProblemResponse._Visitor<_Result>) {
                return TraceApi.CreateProblemResponse._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.CreateProblemResponse, visitor: TraceApi.CreateProblemResponse._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"success\\": return visitor.success(value.value);
            case \\"error\\": return visitor.error(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "CreateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface GenericCreateProblemError {
    message: string;
    type: string;
    stacktrace: string;
}
",
                    "name": "GenericCreateProblemError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface GetDefaultStarterFilesResponse {
    files: Record<TraceApi.Language, TraceApi.ProblemFiles | undefined>;
}
",
                    "name": "GetDefaultStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ProblemDescription {
    boards: TraceApi.ProblemDescriptionBoard[];
}
",
                    "name": "ProblemDescription.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

/**
 * @example
 *     TraceApi.ProblemDescriptionBoard.html(\\"<div>hello world</div>\\")
 *
 * @example
 *     TraceApi.ProblemDescriptionBoard.testCaseId(\\"test-case-id-1\\")
 */
export type ProblemDescriptionBoard =
    | TraceApi.ProblemDescriptionBoard.Html
    | TraceApi.ProblemDescriptionBoard.Variable
    | TraceApi.ProblemDescriptionBoard.TestCaseId
    | TraceApi.ProblemDescriptionBoard._Unknown;

export declare namespace ProblemDescriptionBoard {
    interface Html extends _Utils {
        type: \\"html\\";
        value: string;
    }

    interface Variable extends _Utils {
        type: \\"variable\\";
        value: TraceApi.VariableValue;
    }

    interface TestCaseId extends _Utils {
        type: \\"testCaseId\\";
        value: string;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        html: (value: string) => _Result;
        variable: (value: TraceApi.VariableValue) => _Result;
        testCaseId: (value: string) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const ProblemDescriptionBoard = {
    html: (value: string): TraceApi.ProblemDescriptionBoard.Html => {
        return {
            value: value,
            type: \\"html\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ProblemDescriptionBoard.Html, visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            }
        };
    },

    variable: (value: TraceApi.VariableValue): TraceApi.ProblemDescriptionBoard.Variable => {
        return {
            value: value,
            type: \\"variable\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ProblemDescriptionBoard.Variable, visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            }
        };
    },

    testCaseId: (value: string): TraceApi.ProblemDescriptionBoard.TestCaseId => {
        return {
            value: value,
            type: \\"testCaseId\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ProblemDescriptionBoard.TestCaseId, visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.ProblemDescriptionBoard._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.ProblemDescriptionBoard._Unknown, visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>) {
                return TraceApi.ProblemDescriptionBoard._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.ProblemDescriptionBoard, visitor: TraceApi.ProblemDescriptionBoard._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"html\\": return visitor.html(value.value);
            case \\"variable\\": return visitor.variable(value.value);
            case \\"testCaseId\\": return visitor.testCaseId(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "ProblemDescriptionBoard.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

/**
 * @example
 *     {
 *         solutionFile: {
 *             filename: \\"hello.txt\\",
 *             contents: \\"I'm some file content\\"
 *         },
 *         readOnlyFiles: []
 *     }
 */
export interface ProblemFiles {
    solutionFile: TraceApi.FileInfo;
    readOnlyFiles: TraceApi.FileInfo[];
}
",
                    "name": "ProblemFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ProblemInfo {
    problemId: TraceApi.ProblemId;
    problemDescription: TraceApi.ProblemDescription;
    problemName: string;
    problemVersion: number;
    files: Record<TraceApi.Language, TraceApi.ProblemFiles | undefined>;
    inputParams: TraceApi.VariableTypeAndName[];
    outputType: TraceApi.VariableType;
    testcases: TraceApi.TestCaseWithExpectedResult[];
    methodName: string;
    supportsCustomTestCases: boolean;
}
",
                    "name": "ProblemInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ProblemsMap {
    problemsById: Record<TraceApi.ProblemId, TraceApi.ProblemInfo>;
}
",
                    "name": "ProblemsMap.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface UpdateProblemResponse {
    problemVersion: number;
}
",
                    "name": "UpdateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface VariableTypeAndName {
    variableType: TraceApi.VariableType;
    name: string;
}
",
                    "name": "VariableTypeAndName.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemsMap\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problem",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import { TraceApi } from \\"../../../..\\";
import * as errors from \\"../../../../errors\\";

/**
 * Responsible for spinning up and spinning down execution.
 */
export abstract class AbstractSubmissionService {
    private router = express.Router().use(express.json());

    public abstract createExecutionSession(request: express.Request<{
        language: serializers.Language.Raw;
    }, TraceApi.ExecutionSessionResponse, never, never, never>): Promise<TraceApi.ExecutionSessionResponse>;

    public abstract getExecutionSession(request: express.Request<{
        sessionId: string;
    }, TraceApi.ExecutionSessionResponse | undefined, never, never, never>): Promise<TraceApi.ExecutionSessionResponse | undefined>;

    public abstract stopExecutionSession(request: express.Request<{
        sessionId: string;
    }, never, never, never, never>): Promise<void>;

    public abstract getExecutionSessionsState(request: express.Request<never, TraceApi.GetExecutionSessionStateResponse, never, never, never>): Promise<TraceApi.GetExecutionSessionStateResponse>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.post(\\"/create-session/:language\\", async (req, res, next) => {
            try {
                const response = await this.createExecutionSession(req as any);
                res.send(await serializers.ExecutionSessionResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'createExecutionSession' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/:sessionId\\", async (req, res, next) => {
            try {
                const response = await this.getExecutionSession(req as any);
                res.send(await serializers.submission.getExecutionSession.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getExecutionSession' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.delete(\\"/stop/:sessionId\\", async (req, res, next) => {
            try {
                await this.stopExecutionSession(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'stopExecutionSession' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/execution-sessions-state\\", async (req, res, next) => {
            try {
                const response = await this.getExecutionSessionsState(req as any);
                res.send(await serializers.GetExecutionSessionStateResponse.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getExecutionSessionsState' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractSubmissionService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractSubmissionService } from \\"./AbstractSubmissionService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type ActualResult =
    | TraceApi.ActualResult.Value
    | TraceApi.ActualResult.Exception
    | TraceApi.ActualResult.ExceptionV2
    | TraceApi.ActualResult._Unknown;

export declare namespace ActualResult {
    interface Value extends _Utils {
        type: \\"value\\";
        value: TraceApi.VariableValue;
    }

    interface Exception extends TraceApi.ExceptionInfo, _Utils {
        type: \\"exception\\";
    }

    interface ExceptionV2 extends _Utils {
        type: \\"exceptionV2\\";
        value: TraceApi.ExceptionV2;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ActualResult._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        value: (value: TraceApi.VariableValue) => _Result;
        exception: (value: TraceApi.ExceptionInfo) => _Result;
        exceptionV2: (value: TraceApi.ExceptionV2) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const ActualResult = {
    value: (value: TraceApi.VariableValue): TraceApi.ActualResult.Value => {
        return {
            value: value,
            type: \\"value\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ActualResult.Value, visitor: TraceApi.ActualResult._Visitor<_Result>) {
                return TraceApi.ActualResult._visit(this, visitor);
            }
        };
    },

    exception: (value: TraceApi.ExceptionInfo): TraceApi.ActualResult.Exception => {
        return {
            ...value,
            type: \\"exception\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ActualResult.Exception, visitor: TraceApi.ActualResult._Visitor<_Result>) {
                return TraceApi.ActualResult._visit(this, visitor);
            }
        };
    },

    exceptionV2: (value: TraceApi.ExceptionV2): TraceApi.ActualResult.ExceptionV2 => {
        return {
            value: value,
            type: \\"exceptionV2\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ActualResult.ExceptionV2, visitor: TraceApi.ActualResult._Visitor<_Result>) {
                return TraceApi.ActualResult._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.ActualResult._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.ActualResult._Unknown, visitor: TraceApi.ActualResult._Visitor<_Result>) {
                return TraceApi.ActualResult._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.ActualResult, visitor: TraceApi.ActualResult._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"value\\": return visitor.value(value.value);
            case \\"exception\\": return visitor.exception(value);
            case \\"exceptionV2\\": return visitor.exceptionV2(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "ActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface BuildingExecutorResponse {
    submissionId: TraceApi.SubmissionId;
    status: TraceApi.ExecutionSessionStatus;
}
",
                    "name": "BuildingExecutorResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type CodeExecutionUpdate =
    /**
     * Statuses if an executor for the session isn't ready (Before RunningResponse). */
    | TraceApi.CodeExecutionUpdate.BuildingExecutor
    /**
     * Sent once a test submission is executing. */
    | TraceApi.CodeExecutionUpdate.Running
    /**
     * Sent if a submission cannot be run (i.e. Compile Error). */
    | TraceApi.CodeExecutionUpdate.Errored
    /**
     * Sent if a submission is stopped. */
    | TraceApi.CodeExecutionUpdate.Stopped
    /**
     * Graded testcases without trace information. */
    | TraceApi.CodeExecutionUpdate.Graded
    /**
     * Graded submission for v2 problems. */
    | TraceApi.CodeExecutionUpdate.GradedV2
    /**
     * Workspace run without trace information. */
    | TraceApi.CodeExecutionUpdate.WorkspaceRan
    /**
     * Gives progress about what is being recorded. */
    | TraceApi.CodeExecutionUpdate.Recording
    /**
     * Graded testcases with trace information. */
    | TraceApi.CodeExecutionUpdate.Recorded
    /**
     * Sent if an invalid request is sent for a submission. */
    | TraceApi.CodeExecutionUpdate.InvalidRequest
    /**
     * Sent once a submission is graded and fully recorded. */
    | TraceApi.CodeExecutionUpdate.Finished
    | TraceApi.CodeExecutionUpdate._Unknown;

export declare namespace CodeExecutionUpdate {
    interface BuildingExecutor extends TraceApi.BuildingExecutorResponse, _Utils {
        type: \\"buildingExecutor\\";
    }

    interface Running extends TraceApi.RunningResponse, _Utils {
        type: \\"running\\";
    }

    interface Errored extends TraceApi.ErroredResponse, _Utils {
        type: \\"errored\\";
    }

    interface Stopped extends TraceApi.StoppedResponse, _Utils {
        type: \\"stopped\\";
    }

    interface Graded extends TraceApi.GradedResponse, _Utils {
        type: \\"graded\\";
    }

    interface GradedV2 extends TraceApi.GradedResponseV2, _Utils {
        type: \\"gradedV2\\";
    }

    interface WorkspaceRan extends TraceApi.WorkspaceRanResponse, _Utils {
        type: \\"workspaceRan\\";
    }

    interface Recording extends TraceApi.RecordingResponseNotification, _Utils {
        type: \\"recording\\";
    }

    interface Recorded extends TraceApi.RecordedResponseNotification, _Utils {
        type: \\"recorded\\";
    }

    interface InvalidRequest extends TraceApi.InvalidRequestResponse, _Utils {
        type: \\"invalidRequest\\";
    }

    interface Finished extends TraceApi.FinishedResponse, _Utils {
        type: \\"finished\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        buildingExecutor: (value: TraceApi.BuildingExecutorResponse) => _Result;
        running: (value: TraceApi.RunningResponse) => _Result;
        errored: (value: TraceApi.ErroredResponse) => _Result;
        stopped: (value: TraceApi.StoppedResponse) => _Result;
        graded: (value: TraceApi.GradedResponse) => _Result;
        gradedV2: (value: TraceApi.GradedResponseV2) => _Result;
        workspaceRan: (value: TraceApi.WorkspaceRanResponse) => _Result;
        recording: (value: TraceApi.RecordingResponseNotification) => _Result;
        recorded: (value: TraceApi.RecordedResponseNotification) => _Result;
        invalidRequest: (value: TraceApi.InvalidRequestResponse) => _Result;
        finished: (value: TraceApi.FinishedResponse) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const CodeExecutionUpdate = {
    buildingExecutor: (value: TraceApi.BuildingExecutorResponse): TraceApi.CodeExecutionUpdate.BuildingExecutor => {
        return {
            ...value,
            type: \\"buildingExecutor\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.BuildingExecutor, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    running: (value: TraceApi.RunningResponse): TraceApi.CodeExecutionUpdate.Running => {
        return {
            ...value,
            type: \\"running\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Running, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    errored: (value: TraceApi.ErroredResponse): TraceApi.CodeExecutionUpdate.Errored => {
        return {
            ...value,
            type: \\"errored\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Errored, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    stopped: (value: TraceApi.StoppedResponse): TraceApi.CodeExecutionUpdate.Stopped => {
        return {
            ...value,
            type: \\"stopped\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Stopped, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    graded: (value: TraceApi.GradedResponse): TraceApi.CodeExecutionUpdate.Graded => {
        return {
            ...value,
            type: \\"graded\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Graded, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    gradedV2: (value: TraceApi.GradedResponseV2): TraceApi.CodeExecutionUpdate.GradedV2 => {
        return {
            ...value,
            type: \\"gradedV2\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.GradedV2, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    workspaceRan: (value: TraceApi.WorkspaceRanResponse): TraceApi.CodeExecutionUpdate.WorkspaceRan => {
        return {
            ...value,
            type: \\"workspaceRan\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.WorkspaceRan, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    recording: (value: TraceApi.RecordingResponseNotification): TraceApi.CodeExecutionUpdate.Recording => {
        return {
            ...value,
            type: \\"recording\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Recording, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    recorded: (value: TraceApi.RecordedResponseNotification): TraceApi.CodeExecutionUpdate.Recorded => {
        return {
            ...value,
            type: \\"recorded\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Recorded, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    invalidRequest: (value: TraceApi.InvalidRequestResponse): TraceApi.CodeExecutionUpdate.InvalidRequest => {
        return {
            ...value,
            type: \\"invalidRequest\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.InvalidRequest, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    finished: (value: TraceApi.FinishedResponse): TraceApi.CodeExecutionUpdate.Finished => {
        return {
            ...value,
            type: \\"finished\\",
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate.Finished, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.CodeExecutionUpdate._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.CodeExecutionUpdate._Unknown, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>) {
                return TraceApi.CodeExecutionUpdate._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.CodeExecutionUpdate, visitor: TraceApi.CodeExecutionUpdate._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"buildingExecutor\\": return visitor.buildingExecutor(value);
            case \\"running\\": return visitor.running(value);
            case \\"errored\\": return visitor.errored(value);
            case \\"stopped\\": return visitor.stopped(value);
            case \\"graded\\": return visitor.graded(value);
            case \\"gradedV2\\": return visitor.gradedV2(value);
            case \\"workspaceRan\\": return visitor.workspaceRan(value);
            case \\"recording\\": return visitor.recording(value);
            case \\"recorded\\": return visitor.recorded(value);
            case \\"invalidRequest\\": return visitor.invalidRequest(value);
            case \\"finished\\": return visitor.finished(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "CodeExecutionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface CompileError {
    message: string;
}
",
                    "name": "CompileError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface CustomTestCasesUnsupported {
    problemId: TraceApi.ProblemId;
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "CustomTestCasesUnsupported.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type ErrorInfo =
    | TraceApi.ErrorInfo.CompileError
    /**
     * If the submission cannot be executed and throws a runtime error before getting to any of the testcases.
     *  */
    | TraceApi.ErrorInfo.RuntimeError
    /**
     * If the trace backend encounters an unexpected error.
     *  */
    | TraceApi.ErrorInfo.InternalError
    | TraceApi.ErrorInfo._Unknown;

export declare namespace ErrorInfo {
    interface CompileError extends TraceApi.CompileError, _Utils {
        type: \\"compileError\\";
    }

    interface RuntimeError extends TraceApi.RuntimeError, _Utils {
        type: \\"runtimeError\\";
    }

    interface InternalError extends TraceApi.InternalError, _Utils {
        type: \\"internalError\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ErrorInfo._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        compileError: (value: TraceApi.CompileError) => _Result;
        runtimeError: (value: TraceApi.RuntimeError) => _Result;
        internalError: (value: TraceApi.InternalError) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const ErrorInfo = {
    compileError: (value: TraceApi.CompileError): TraceApi.ErrorInfo.CompileError => {
        return {
            ...value,
            type: \\"compileError\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ErrorInfo.CompileError, visitor: TraceApi.ErrorInfo._Visitor<_Result>) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            }
        };
    },

    runtimeError: (value: TraceApi.RuntimeError): TraceApi.ErrorInfo.RuntimeError => {
        return {
            ...value,
            type: \\"runtimeError\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ErrorInfo.RuntimeError, visitor: TraceApi.ErrorInfo._Visitor<_Result>) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            }
        };
    },

    internalError: (value: TraceApi.InternalError): TraceApi.ErrorInfo.InternalError => {
        return {
            ...value,
            type: \\"internalError\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ErrorInfo.InternalError, visitor: TraceApi.ErrorInfo._Visitor<_Result>) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.ErrorInfo._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.ErrorInfo._Unknown, visitor: TraceApi.ErrorInfo._Visitor<_Result>) {
                return TraceApi.ErrorInfo._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.ErrorInfo, visitor: TraceApi.ErrorInfo._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"compileError\\": return visitor.compileError(value);
            case \\"runtimeError\\": return visitor.runtimeError(value);
            case \\"internalError\\": return visitor.internalError(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "ErrorInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ErroredResponse {
    submissionId: TraceApi.SubmissionId;
    errorInfo: TraceApi.ErrorInfo;
}
",
                    "name": "ErroredResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface ExceptionInfo {
    exceptionType: string;
    exceptionMessage: string;
    exceptionStacktrace: string;
}
",
                    "name": "ExceptionInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type ExceptionV2 =
    | TraceApi.ExceptionV2.Generic
    | TraceApi.ExceptionV2.Timeout
    | TraceApi.ExceptionV2._Unknown;

export declare namespace ExceptionV2 {
    interface Generic extends TraceApi.ExceptionInfo, _Utils {
        type: \\"generic\\";
    }

    interface Timeout extends _Utils {
        type: \\"timeout\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.ExceptionV2._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        generic: (value: TraceApi.ExceptionInfo) => _Result;
        timeout: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const ExceptionV2 = {
    generic: (value: TraceApi.ExceptionInfo): TraceApi.ExceptionV2.Generic => {
        return {
            ...value,
            type: \\"generic\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ExceptionV2.Generic, visitor: TraceApi.ExceptionV2._Visitor<_Result>) {
                return TraceApi.ExceptionV2._visit(this, visitor);
            }
        };
    },

    timeout: (): TraceApi.ExceptionV2.Timeout => {
        return {
            type: \\"timeout\\",
            \\"_visit\\": function <_Result>(this: TraceApi.ExceptionV2.Timeout, visitor: TraceApi.ExceptionV2._Visitor<_Result>) {
                return TraceApi.ExceptionV2._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.ExceptionV2._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.ExceptionV2._Unknown, visitor: TraceApi.ExceptionV2._Visitor<_Result>) {
                return TraceApi.ExceptionV2._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.ExceptionV2, visitor: TraceApi.ExceptionV2._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"generic\\": return visitor.generic(value);
            case \\"timeout\\": return visitor.timeout();
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "ExceptionV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ExecutionSessionResponse {
    sessionId: string;
    executionSessionUrl?: string;
    language: TraceApi.Language;
    status: TraceApi.ExecutionSessionStatus;
}
",
                    "name": "ExecutionSessionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ExecutionSessionState {
    lastTimeContacted?: string;
    sessionId: string;
    isWarmInstance: boolean;
    awsTaskId?: string;
    language: TraceApi.Language;
    status: TraceApi.ExecutionSessionStatus;
}
",
                    "name": "ExecutionSessionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ExecutionSessionStatus =
    | \\"CREATING_CONTAINER\\"
    | \\"PROVISIONING_CONTAINER\\"
    | \\"PENDING_CONTAINER\\"
    | \\"RUNNING_CONTAINER\\"
    | \\"LIVE_CONTAINER\\"
    | \\"FAILED_TO_LAUNCH\\";

export const ExecutionSessionStatus = {
    CreatingContainer: \\"CREATING_CONTAINER\\",
    ProvisioningContainer: \\"PROVISIONING_CONTAINER\\",
    PendingContainer: \\"PENDING_CONTAINER\\",
    RunningContainer: \\"RUNNING_CONTAINER\\",
    LiveContainer: \\"LIVE_CONTAINER\\",
    FailedToLaunch: \\"FAILED_TO_LAUNCH\\"
} as const;
",
                    "name": "ExecutionSessionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface ExistingSubmissionExecuting {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "ExistingSubmissionExecuting.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface ExpressionLocation {
    start: number;
    offset: number;
}
",
                    "name": "ExpressionLocation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface FinishedResponse {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "FinishedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface GetExecutionSessionStateResponse {
    states: Record<string, TraceApi.ExecutionSessionState>;
    numWarmingInstances?: number;
    warmingSessionIds: string[];
}
",
                    "name": "GetExecutionSessionStateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface GetSubmissionStateResponse {
    timeSubmitted?: Date;
    submission: string;
    language: TraceApi.Language;
    submissionTypeState: TraceApi.SubmissionTypeState;
}
",
                    "name": "GetSubmissionStateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface GetTraceResponsesPageRequest {
    offset?: number;
}
",
                    "name": "GetTraceResponsesPageRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface GradedResponse {
    submissionId: TraceApi.SubmissionId;
    testCases: Record<string, TraceApi.TestCaseResultWithStdout>;
}
",
                    "name": "GradedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface GradedResponseV2 {
    submissionId: TraceApi.SubmissionId;
    testCases: Record<TraceApi.v2.TestCaseId, TraceApi.TestCaseGrade>;
}
",
                    "name": "GradedResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface GradedTestCaseUpdate {
    testCaseId: TraceApi.v2.TestCaseId;
    grade: TraceApi.TestCaseGrade;
}
",
                    "name": "GradedTestCaseUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface InitializeProblemRequest {
    problemId: TraceApi.ProblemId;
    problemVersion?: number;
}
",
                    "name": "InitializeProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface InternalError {
    exceptionInfo: TraceApi.ExceptionInfo;
}
",
                    "name": "InternalError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type InvalidRequestCause =
    /**
     * The submission request references a submission id that doesn't exist. */
    | TraceApi.InvalidRequestCause.SubmissionIdNotFound
    | TraceApi.InvalidRequestCause.CustomTestCasesUnsupported
    /**
     * The submission request was routed to an incorrect language executor. */
    | TraceApi.InvalidRequestCause.UnexpectedLanguage
    | TraceApi.InvalidRequestCause._Unknown;

export declare namespace InvalidRequestCause {
    interface SubmissionIdNotFound extends TraceApi.SubmissionIdNotFound, _Utils {
        type: \\"submissionIdNotFound\\";
    }

    interface CustomTestCasesUnsupported extends TraceApi.CustomTestCasesUnsupported, _Utils {
        type: \\"customTestCasesUnsupported\\";
    }

    interface UnexpectedLanguage extends TraceApi.UnexpectedLanguageError, _Utils {
        type: \\"unexpectedLanguage\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        submissionIdNotFound: (value: TraceApi.SubmissionIdNotFound) => _Result;
        customTestCasesUnsupported: (value: TraceApi.CustomTestCasesUnsupported) => _Result;
        unexpectedLanguage: (value: TraceApi.UnexpectedLanguageError) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const InvalidRequestCause = {
    submissionIdNotFound: (value: TraceApi.SubmissionIdNotFound): TraceApi.InvalidRequestCause.SubmissionIdNotFound => {
        return {
            ...value,
            type: \\"submissionIdNotFound\\",
            \\"_visit\\": function <_Result>(this: TraceApi.InvalidRequestCause.SubmissionIdNotFound, visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            }
        };
    },

    customTestCasesUnsupported: (value: TraceApi.CustomTestCasesUnsupported): TraceApi.InvalidRequestCause.CustomTestCasesUnsupported => {
        return {
            ...value,
            type: \\"customTestCasesUnsupported\\",
            \\"_visit\\": function <_Result>(this: TraceApi.InvalidRequestCause.CustomTestCasesUnsupported, visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            }
        };
    },

    unexpectedLanguage: (value: TraceApi.UnexpectedLanguageError): TraceApi.InvalidRequestCause.UnexpectedLanguage => {
        return {
            ...value,
            type: \\"unexpectedLanguage\\",
            \\"_visit\\": function <_Result>(this: TraceApi.InvalidRequestCause.UnexpectedLanguage, visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.InvalidRequestCause._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.InvalidRequestCause._Unknown, visitor: TraceApi.InvalidRequestCause._Visitor<_Result>) {
                return TraceApi.InvalidRequestCause._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.InvalidRequestCause, visitor: TraceApi.InvalidRequestCause._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"submissionIdNotFound\\": return visitor.submissionIdNotFound(value);
            case \\"customTestCasesUnsupported\\": return visitor.customTestCasesUnsupported(value);
            case \\"unexpectedLanguage\\": return visitor.unexpectedLanguage(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "InvalidRequestCause.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface InvalidRequestResponse {
    request: TraceApi.SubmissionRequest;
    cause: TraceApi.InvalidRequestCause;
}
",
                    "name": "InvalidRequestResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface LightweightStackframeInformation {
    numStackFrames: number;
    topStackFrameMethodName: string;
}
",
                    "name": "LightweightStackframeInformation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface RecordedResponseNotification {
    submissionId: TraceApi.SubmissionId;
    traceResponsesSize: number;
    testCaseId?: string;
}
",
                    "name": "RecordedResponseNotification.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface RecordedTestCaseUpdate {
    testCaseId: TraceApi.v2.TestCaseId;
    traceResponsesSize: number;
}
",
                    "name": "RecordedTestCaseUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface RecordingResponseNotification {
    submissionId: TraceApi.SubmissionId;
    testCaseId?: string;
    lineNumber: number;
    lightweightStackInfo: TraceApi.LightweightStackframeInformation;
    tracedFile?: TraceApi.TracedFile;
}
",
                    "name": "RecordingResponseNotification.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface RunningResponse {
    submissionId: TraceApi.SubmissionId;
    state: TraceApi.RunningSubmissionState;
}
",
                    "name": "RunningResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type RunningSubmissionState =
    | \\"QUEUEING_SUBMISSION\\"
    | \\"KILLING_HISTORICAL_SUBMISSIONS\\"
    | \\"WRITING_SUBMISSION_TO_FILE\\"
    | \\"COMPILING_SUBMISSION\\"
    | \\"RUNNING_SUBMISSION\\";

export const RunningSubmissionState = {
    QueueingSubmission: \\"QUEUEING_SUBMISSION\\",
    KillingHistoricalSubmissions: \\"KILLING_HISTORICAL_SUBMISSIONS\\",
    WritingSubmissionToFile: \\"WRITING_SUBMISSION_TO_FILE\\",
    CompilingSubmission: \\"COMPILING_SUBMISSION\\",
    RunningSubmission: \\"RUNNING_SUBMISSION\\"
} as const;
",
                    "name": "RunningSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface RuntimeError {
    message: string;
}
",
                    "name": "RuntimeError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface Scope {
    variables: Record<string, TraceApi.DebugVariableValue>;
}
",
                    "name": "Scope.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ShareId = string;
",
                    "name": "ShareId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface StackFrame {
    methodName: string;
    lineNumber: number;
    scopes: TraceApi.Scope[];
}
",
                    "name": "StackFrame.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface StackInformation {
    numStackFrames: number;
    topStackFrame?: TraceApi.StackFrame;
}
",
                    "name": "StackInformation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface StderrResponse {
    submissionId: TraceApi.SubmissionId;
    stderr: string;
}
",
                    "name": "StderrResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface StdoutResponse {
    submissionId: TraceApi.SubmissionId;
    stdout: string;
}
",
                    "name": "StdoutResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface StopRequest {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "StopRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface StoppedResponse {
    submissionId: TraceApi.SubmissionId;
}
",
                    "name": "StoppedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface SubmissionFileInfo {
    directory: string;
    filename: string;
    contents: string;
}
",
                    "name": "SubmissionFileInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type SubmissionId = string;
",
                    "name": "SubmissionId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface SubmissionIdNotFound {
    missingSubmissionId: TraceApi.SubmissionId;
}
",
                    "name": "SubmissionIdNotFound.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type SubmissionRequest =
    | TraceApi.SubmissionRequest.InitializeProblemRequest
    | TraceApi.SubmissionRequest.InitializeWorkspaceRequest
    | TraceApi.SubmissionRequest.SubmitV2
    | TraceApi.SubmissionRequest.WorkspaceSubmit
    | TraceApi.SubmissionRequest.Stop
    | TraceApi.SubmissionRequest._Unknown;

export declare namespace SubmissionRequest {
    interface InitializeProblemRequest extends TraceApi.InitializeProblemRequest, _Utils {
        type: \\"initializeProblemRequest\\";
    }

    interface InitializeWorkspaceRequest extends _Utils {
        type: \\"initializeWorkspaceRequest\\";
    }

    interface SubmitV2 extends TraceApi.SubmitRequestV2, _Utils {
        type: \\"submitV2\\";
    }

    interface WorkspaceSubmit extends TraceApi.WorkspaceSubmitRequest, _Utils {
        type: \\"workspaceSubmit\\";
    }

    interface Stop extends TraceApi.StopRequest, _Utils {
        type: \\"stop\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionRequest._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        initializeProblemRequest: (value: TraceApi.InitializeProblemRequest) => _Result;
        initializeWorkspaceRequest: () => _Result;
        submitV2: (value: TraceApi.SubmitRequestV2) => _Result;
        workspaceSubmit: (value: TraceApi.WorkspaceSubmitRequest) => _Result;
        stop: (value: TraceApi.StopRequest) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const SubmissionRequest = {
    initializeProblemRequest: (value: TraceApi.InitializeProblemRequest): TraceApi.SubmissionRequest.InitializeProblemRequest => {
        return {
            ...value,
            type: \\"initializeProblemRequest\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionRequest.InitializeProblemRequest, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            }
        };
    },

    initializeWorkspaceRequest: (): TraceApi.SubmissionRequest.InitializeWorkspaceRequest => {
        return {
            type: \\"initializeWorkspaceRequest\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionRequest.InitializeWorkspaceRequest, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            }
        };
    },

    submitV2: (value: TraceApi.SubmitRequestV2): TraceApi.SubmissionRequest.SubmitV2 => {
        return {
            ...value,
            type: \\"submitV2\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionRequest.SubmitV2, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            }
        };
    },

    workspaceSubmit: (value: TraceApi.WorkspaceSubmitRequest): TraceApi.SubmissionRequest.WorkspaceSubmit => {
        return {
            ...value,
            type: \\"workspaceSubmit\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionRequest.WorkspaceSubmit, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            }
        };
    },

    stop: (value: TraceApi.StopRequest): TraceApi.SubmissionRequest.Stop => {
        return {
            ...value,
            type: \\"stop\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionRequest.Stop, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.SubmissionRequest._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionRequest._Unknown, visitor: TraceApi.SubmissionRequest._Visitor<_Result>) {
                return TraceApi.SubmissionRequest._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.SubmissionRequest, visitor: TraceApi.SubmissionRequest._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"initializeProblemRequest\\": return visitor.initializeProblemRequest(value);
            case \\"initializeWorkspaceRequest\\": return visitor.initializeWorkspaceRequest();
            case \\"submitV2\\": return visitor.submitV2(value);
            case \\"workspaceSubmit\\": return visitor.workspaceSubmit(value);
            case \\"stop\\": return visitor.stop(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "SubmissionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type SubmissionResponse =
    | TraceApi.SubmissionResponse.ServerInitialized
    | TraceApi.SubmissionResponse.ProblemInitialized
    | TraceApi.SubmissionResponse.WorkspaceInitialized
    | TraceApi.SubmissionResponse.ServerErrored
    | TraceApi.SubmissionResponse.CodeExecutionUpdate
    | TraceApi.SubmissionResponse.Terminated
    | TraceApi.SubmissionResponse._Unknown;

export declare namespace SubmissionResponse {
    interface ServerInitialized extends _Utils {
        type: \\"serverInitialized\\";
    }

    interface ProblemInitialized extends _Utils {
        type: \\"problemInitialized\\";
        value: TraceApi.ProblemId;
    }

    interface WorkspaceInitialized extends _Utils {
        type: \\"workspaceInitialized\\";
    }

    interface ServerErrored extends TraceApi.ExceptionInfo, _Utils {
        type: \\"serverErrored\\";
    }

    interface CodeExecutionUpdate extends _Utils {
        type: \\"codeExecutionUpdate\\";
        value: TraceApi.CodeExecutionUpdate;
    }

    interface Terminated extends TraceApi.TerminatedResponse, _Utils {
        type: \\"terminated\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionResponse._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        serverInitialized: () => _Result;
        problemInitialized: (value: TraceApi.ProblemId) => _Result;
        workspaceInitialized: () => _Result;
        serverErrored: (value: TraceApi.ExceptionInfo) => _Result;
        codeExecutionUpdate: (value: TraceApi.CodeExecutionUpdate) => _Result;
        terminated: (value: TraceApi.TerminatedResponse) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const SubmissionResponse = {
    serverInitialized: (): TraceApi.SubmissionResponse.ServerInitialized => {
        return {
            type: \\"serverInitialized\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse.ServerInitialized, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    problemInitialized: (value: TraceApi.ProblemId): TraceApi.SubmissionResponse.ProblemInitialized => {
        return {
            value: value,
            type: \\"problemInitialized\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse.ProblemInitialized, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    workspaceInitialized: (): TraceApi.SubmissionResponse.WorkspaceInitialized => {
        return {
            type: \\"workspaceInitialized\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse.WorkspaceInitialized, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    serverErrored: (value: TraceApi.ExceptionInfo): TraceApi.SubmissionResponse.ServerErrored => {
        return {
            ...value,
            type: \\"serverErrored\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse.ServerErrored, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    codeExecutionUpdate: (value: TraceApi.CodeExecutionUpdate): TraceApi.SubmissionResponse.CodeExecutionUpdate => {
        return {
            value: value,
            type: \\"codeExecutionUpdate\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse.CodeExecutionUpdate, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    terminated: (value: TraceApi.TerminatedResponse): TraceApi.SubmissionResponse.Terminated => {
        return {
            ...value,
            type: \\"terminated\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse.Terminated, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.SubmissionResponse._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionResponse._Unknown, visitor: TraceApi.SubmissionResponse._Visitor<_Result>) {
                return TraceApi.SubmissionResponse._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.SubmissionResponse, visitor: TraceApi.SubmissionResponse._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"serverInitialized\\": return visitor.serverInitialized();
            case \\"problemInitialized\\": return visitor.problemInitialized(value.value);
            case \\"workspaceInitialized\\": return visitor.workspaceInitialized();
            case \\"serverErrored\\": return visitor.serverErrored(value);
            case \\"codeExecutionUpdate\\": return visitor.codeExecutionUpdate(value.value);
            case \\"terminated\\": return visitor.terminated(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "SubmissionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type SubmissionStatusForTestCase =
    | TraceApi.SubmissionStatusForTestCase.Graded
    | TraceApi.SubmissionStatusForTestCase.GradedV2
    | TraceApi.SubmissionStatusForTestCase.Traced
    | TraceApi.SubmissionStatusForTestCase._Unknown;

export declare namespace SubmissionStatusForTestCase {
    interface Graded extends TraceApi.TestCaseResultWithStdout, _Utils {
        type: \\"graded\\";
    }

    interface GradedV2 extends _Utils {
        type: \\"gradedV2\\";
        value: TraceApi.TestCaseGrade;
    }

    interface Traced extends TraceApi.TracedTestCase, _Utils {
        type: \\"traced\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        graded: (value: TraceApi.TestCaseResultWithStdout) => _Result;
        gradedV2: (value: TraceApi.TestCaseGrade) => _Result;
        traced: (value: TraceApi.TracedTestCase) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const SubmissionStatusForTestCase = {
    graded: (value: TraceApi.TestCaseResultWithStdout): TraceApi.SubmissionStatusForTestCase.Graded => {
        return {
            ...value,
            type: \\"graded\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusForTestCase.Graded, visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            }
        };
    },

    gradedV2: (value: TraceApi.TestCaseGrade): TraceApi.SubmissionStatusForTestCase.GradedV2 => {
        return {
            value: value,
            type: \\"gradedV2\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusForTestCase.GradedV2, visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            }
        };
    },

    traced: (value: TraceApi.TracedTestCase): TraceApi.SubmissionStatusForTestCase.Traced => {
        return {
            ...value,
            type: \\"traced\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusForTestCase.Traced, visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.SubmissionStatusForTestCase._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusForTestCase._Unknown, visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>) {
                return TraceApi.SubmissionStatusForTestCase._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.SubmissionStatusForTestCase, visitor: TraceApi.SubmissionStatusForTestCase._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"graded\\": return visitor.graded(value);
            case \\"gradedV2\\": return visitor.gradedV2(value.value);
            case \\"traced\\": return visitor.traced(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "SubmissionStatusForTestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type SubmissionStatusV2 =
    | TraceApi.SubmissionStatusV2.Test
    | TraceApi.SubmissionStatusV2.Workspace
    | TraceApi.SubmissionStatusV2._Unknown;

export declare namespace SubmissionStatusV2 {
    interface Test extends TraceApi.TestSubmissionStatusV2, _Utils {
        type: \\"test\\";
    }

    interface Workspace extends TraceApi.WorkspaceSubmissionStatusV2, _Utils {
        type: \\"workspace\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        test: (value: TraceApi.TestSubmissionStatusV2) => _Result;
        workspace: (value: TraceApi.WorkspaceSubmissionStatusV2) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const SubmissionStatusV2 = {
    test: (value: TraceApi.TestSubmissionStatusV2): TraceApi.SubmissionStatusV2.Test => {
        return {
            ...value,
            type: \\"test\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusV2.Test, visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>) {
                return TraceApi.SubmissionStatusV2._visit(this, visitor);
            }
        };
    },

    workspace: (value: TraceApi.WorkspaceSubmissionStatusV2): TraceApi.SubmissionStatusV2.Workspace => {
        return {
            ...value,
            type: \\"workspace\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusV2.Workspace, visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>) {
                return TraceApi.SubmissionStatusV2._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.SubmissionStatusV2._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionStatusV2._Unknown, visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>) {
                return TraceApi.SubmissionStatusV2._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.SubmissionStatusV2, visitor: TraceApi.SubmissionStatusV2._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"test\\": return visitor.test(value);
            case \\"workspace\\": return visitor.workspace(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "SubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

/**
 * Keep in sync with SubmissionType.
 */
export type SubmissionTypeEnum =
    | \\"TEST\\";

export const SubmissionTypeEnum = {
    Test: \\"TEST\\"
} as const;
",
                    "name": "SubmissionTypeEnum.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type SubmissionTypeState =
    | TraceApi.SubmissionTypeState.Test
    | TraceApi.SubmissionTypeState.Workspace
    | TraceApi.SubmissionTypeState._Unknown;

export declare namespace SubmissionTypeState {
    interface Test extends TraceApi.TestSubmissionState, _Utils {
        type: \\"test\\";
    }

    interface Workspace extends TraceApi.WorkspaceSubmissionState, _Utils {
        type: \\"workspace\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.SubmissionTypeState._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        test: (value: TraceApi.TestSubmissionState) => _Result;
        workspace: (value: TraceApi.WorkspaceSubmissionState) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const SubmissionTypeState = {
    test: (value: TraceApi.TestSubmissionState): TraceApi.SubmissionTypeState.Test => {
        return {
            ...value,
            type: \\"test\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionTypeState.Test, visitor: TraceApi.SubmissionTypeState._Visitor<_Result>) {
                return TraceApi.SubmissionTypeState._visit(this, visitor);
            }
        };
    },

    workspace: (value: TraceApi.WorkspaceSubmissionState): TraceApi.SubmissionTypeState.Workspace => {
        return {
            ...value,
            type: \\"workspace\\",
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionTypeState.Workspace, visitor: TraceApi.SubmissionTypeState._Visitor<_Result>) {
                return TraceApi.SubmissionTypeState._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.SubmissionTypeState._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.SubmissionTypeState._Unknown, visitor: TraceApi.SubmissionTypeState._Visitor<_Result>) {
                return TraceApi.SubmissionTypeState._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.SubmissionTypeState, visitor: TraceApi.SubmissionTypeState._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"test\\": return visitor.test(value);
            case \\"workspace\\": return visitor.workspace(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "SubmissionTypeState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface SubmitRequestV2 {
    submissionId: TraceApi.SubmissionId;
    language: TraceApi.Language;
    submissionFiles: TraceApi.SubmissionFileInfo[];
    problemId: TraceApi.ProblemId;
    problemVersion?: number;
    userId?: string;
}
",
                    "name": "SubmitRequestV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface TerminatedResponse {
}
",
                    "name": "TerminatedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type TestCaseGrade =
    | TraceApi.TestCaseGrade.Hidden
    | TraceApi.TestCaseGrade.NonHidden
    | TraceApi.TestCaseGrade._Unknown;

export declare namespace TestCaseGrade {
    interface Hidden extends TraceApi.TestCaseHiddenGrade, _Utils {
        type: \\"hidden\\";
    }

    interface NonHidden extends TraceApi.TestCaseNonHiddenGrade, _Utils {
        type: \\"nonHidden\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.TestCaseGrade._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        hidden: (value: TraceApi.TestCaseHiddenGrade) => _Result;
        nonHidden: (value: TraceApi.TestCaseNonHiddenGrade) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseGrade = {
    hidden: (value: TraceApi.TestCaseHiddenGrade): TraceApi.TestCaseGrade.Hidden => {
        return {
            ...value,
            type: \\"hidden\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestCaseGrade.Hidden, visitor: TraceApi.TestCaseGrade._Visitor<_Result>) {
                return TraceApi.TestCaseGrade._visit(this, visitor);
            }
        };
    },

    nonHidden: (value: TraceApi.TestCaseNonHiddenGrade): TraceApi.TestCaseGrade.NonHidden => {
        return {
            ...value,
            type: \\"nonHidden\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestCaseGrade.NonHidden, visitor: TraceApi.TestCaseGrade._Visitor<_Result>) {
                return TraceApi.TestCaseGrade._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.TestCaseGrade._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.TestCaseGrade._Unknown, visitor: TraceApi.TestCaseGrade._Visitor<_Result>) {
                return TraceApi.TestCaseGrade._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.TestCaseGrade, visitor: TraceApi.TestCaseGrade._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"hidden\\": return visitor.hidden(value);
            case \\"nonHidden\\": return visitor.nonHidden(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "TestCaseGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface TestCaseHiddenGrade {
    passed: boolean;
}
",
                    "name": "TestCaseHiddenGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestCaseNonHiddenGrade {
    passed: boolean;
    actualResult?: TraceApi.VariableValue;
    exception?: TraceApi.ExceptionV2;
    stdout: string;
}
",
                    "name": "TestCaseNonHiddenGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestCaseResult {
    expectedResult: TraceApi.VariableValue;
    actualResult: TraceApi.ActualResult;
    passed: boolean;
}
",
                    "name": "TestCaseResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestCaseResultWithStdout {
    result: TraceApi.TestCaseResult;
    stdout: string;
}
",
                    "name": "TestCaseResultWithStdout.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestSubmissionState {
    problemId: TraceApi.ProblemId;
    defaultTestCases: TraceApi.TestCase[];
    customTestCases: TraceApi.TestCase[];
    status: TraceApi.TestSubmissionStatus;
}
",
                    "name": "TestSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type TestSubmissionStatus =
    | TraceApi.TestSubmissionStatus.Stopped
    | TraceApi.TestSubmissionStatus.Errored
    | TraceApi.TestSubmissionStatus.Running
    | TraceApi.TestSubmissionStatus.TestCaseIdToState
    | TraceApi.TestSubmissionStatus._Unknown;

export declare namespace TestSubmissionStatus {
    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }

    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }

    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }

    interface TestCaseIdToState extends _Utils {
        type: \\"testCaseIdToState\\";
        value: Record<string, TraceApi.SubmissionStatusForTestCase>;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        stopped: () => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        testCaseIdToState: (value: Record<string, TraceApi.SubmissionStatusForTestCase>) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestSubmissionStatus = {
    stopped: (): TraceApi.TestSubmissionStatus.Stopped => {
        return {
            type: \\"stopped\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionStatus.Stopped, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            }
        };
    },

    errored: (value: TraceApi.ErrorInfo): TraceApi.TestSubmissionStatus.Errored => {
        return {
            value: value,
            type: \\"errored\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionStatus.Errored, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            }
        };
    },

    running: (value: TraceApi.RunningSubmissionState): TraceApi.TestSubmissionStatus.Running => {
        return {
            value: value,
            type: \\"running\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionStatus.Running, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            }
        };
    },

    testCaseIdToState: (value: Record<string, TraceApi.SubmissionStatusForTestCase>): TraceApi.TestSubmissionStatus.TestCaseIdToState => {
        return {
            value: value,
            type: \\"testCaseIdToState\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionStatus.TestCaseIdToState, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.TestSubmissionStatus._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionStatus._Unknown, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>) {
                return TraceApi.TestSubmissionStatus._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.TestSubmissionStatus, visitor: TraceApi.TestSubmissionStatus._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.value);
            case \\"running\\": return visitor.running(value.value);
            case \\"testCaseIdToState\\": return visitor.testCaseIdToState(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "TestSubmissionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestSubmissionStatusV2 {
    updates: TraceApi.TestSubmissionUpdate[];
    problemId: TraceApi.ProblemId;
    problemVersion: number;
    problemInfo: TraceApi.v2.ProblemInfoV2;
}
",
                    "name": "TestSubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TestSubmissionUpdate {
    updateTime: Date;
    updateInfo: TraceApi.TestSubmissionUpdateInfo;
}
",
                    "name": "TestSubmissionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type TestSubmissionUpdateInfo =
    | TraceApi.TestSubmissionUpdateInfo.Running
    | TraceApi.TestSubmissionUpdateInfo.Stopped
    | TraceApi.TestSubmissionUpdateInfo.Errored
    | TraceApi.TestSubmissionUpdateInfo.GradedTestCase
    | TraceApi.TestSubmissionUpdateInfo.RecordedTestCase
    | TraceApi.TestSubmissionUpdateInfo.Finished
    | TraceApi.TestSubmissionUpdateInfo._Unknown;

export declare namespace TestSubmissionUpdateInfo {
    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }

    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }

    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }

    interface GradedTestCase extends TraceApi.GradedTestCaseUpdate, _Utils {
        type: \\"gradedTestCase\\";
    }

    interface RecordedTestCase extends TraceApi.RecordedTestCaseUpdate, _Utils {
        type: \\"recordedTestCase\\";
    }

    interface Finished extends _Utils {
        type: \\"finished\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        stopped: () => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        gradedTestCase: (value: TraceApi.GradedTestCaseUpdate) => _Result;
        recordedTestCase: (value: TraceApi.RecordedTestCaseUpdate) => _Result;
        finished: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestSubmissionUpdateInfo = {
    running: (value: TraceApi.RunningSubmissionState): TraceApi.TestSubmissionUpdateInfo.Running => {
        return {
            value: value,
            type: \\"running\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo.Running, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    stopped: (): TraceApi.TestSubmissionUpdateInfo.Stopped => {
        return {
            type: \\"stopped\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo.Stopped, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    errored: (value: TraceApi.ErrorInfo): TraceApi.TestSubmissionUpdateInfo.Errored => {
        return {
            value: value,
            type: \\"errored\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo.Errored, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    gradedTestCase: (value: TraceApi.GradedTestCaseUpdate): TraceApi.TestSubmissionUpdateInfo.GradedTestCase => {
        return {
            ...value,
            type: \\"gradedTestCase\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo.GradedTestCase, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    recordedTestCase: (value: TraceApi.RecordedTestCaseUpdate): TraceApi.TestSubmissionUpdateInfo.RecordedTestCase => {
        return {
            ...value,
            type: \\"recordedTestCase\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo.RecordedTestCase, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    finished: (): TraceApi.TestSubmissionUpdateInfo.Finished => {
        return {
            type: \\"finished\\",
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo.Finished, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.TestSubmissionUpdateInfo._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.TestSubmissionUpdateInfo._Unknown, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.TestSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.TestSubmissionUpdateInfo, visitor: TraceApi.TestSubmissionUpdateInfo._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"running\\": return visitor.running(value.value);
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.value);
            case \\"gradedTestCase\\": return visitor.gradedTestCase(value);
            case \\"recordedTestCase\\": return visitor.recordedTestCase(value);
            case \\"finished\\": return visitor.finished();
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "TestSubmissionUpdateInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TraceResponse {
    submissionId: TraceApi.SubmissionId;
    lineNumber: number;
    returnValue?: TraceApi.DebugVariableValue;
    expressionLocation?: TraceApi.ExpressionLocation;
    stack: TraceApi.StackInformation;
    stdout?: string;
}
",
                    "name": "TraceResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TraceResponseV2 {
    submissionId: TraceApi.SubmissionId;
    lineNumber: number;
    file: TraceApi.TracedFile;
    returnValue?: TraceApi.DebugVariableValue;
    expressionLocation?: TraceApi.ExpressionLocation;
    stack: TraceApi.StackInformation;
    stdout?: string;
}
",
                    "name": "TraceResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TraceResponsesPage {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset?: number;
    traceResponses: TraceApi.TraceResponse[];
}
",
                    "name": "TraceResponsesPage.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TraceResponsesPageV2 {
    /**
     * If present, use this to load subseqent pages.
     * The offset is the id of the next trace response to load.
     *
     */
    offset?: number;
    traceResponses: TraceApi.TraceResponseV2[];
}
",
                    "name": "TraceResponsesPageV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface TracedFile {
    filename: string;
    directory: string;
}
",
                    "name": "TracedFile.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface TracedTestCase {
    result: TraceApi.TestCaseResultWithStdout;
    traceResponsesSize: number;
}
",
                    "name": "TracedTestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface UnexpectedLanguageError {
    expectedLanguage: TraceApi.Language;
    actualLanguage: TraceApi.Language;
}
",
                    "name": "UnexpectedLanguageError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceFiles {
    mainFile: TraceApi.FileInfo;
    readOnlyFiles: TraceApi.FileInfo[];
}
",
                    "name": "WorkspaceFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceRanResponse {
    submissionId: TraceApi.SubmissionId;
    runDetails: TraceApi.WorkspaceRunDetails;
}
",
                    "name": "WorkspaceRanResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceRunDetails {
    exceptionV2?: TraceApi.ExceptionV2;
    exception?: TraceApi.ExceptionInfo;
    stdout: string;
}
",
                    "name": "WorkspaceRunDetails.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceStarterFilesResponse {
    files: Record<TraceApi.Language, TraceApi.WorkspaceFiles | undefined>;
}
",
                    "name": "WorkspaceStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceStarterFilesResponseV2 {
    filesByLanguage: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
}
",
                    "name": "WorkspaceStarterFilesResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceSubmissionState {
    status: TraceApi.WorkspaceSubmissionStatus;
}
",
                    "name": "WorkspaceSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type WorkspaceSubmissionStatus =
    | TraceApi.WorkspaceSubmissionStatus.Stopped
    | TraceApi.WorkspaceSubmissionStatus.Errored
    | TraceApi.WorkspaceSubmissionStatus.Running
    | TraceApi.WorkspaceSubmissionStatus.Ran
    | TraceApi.WorkspaceSubmissionStatus.Traced
    | TraceApi.WorkspaceSubmissionStatus._Unknown;

export declare namespace WorkspaceSubmissionStatus {
    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }

    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }

    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }

    interface Ran extends TraceApi.WorkspaceRunDetails, _Utils {
        type: \\"ran\\";
    }

    interface Traced extends TraceApi.WorkspaceRunDetails, _Utils {
        type: \\"traced\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        stopped: () => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        ran: (value: TraceApi.WorkspaceRunDetails) => _Result;
        traced: (value: TraceApi.WorkspaceRunDetails) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const WorkspaceSubmissionStatus = {
    stopped: (): TraceApi.WorkspaceSubmissionStatus.Stopped => {
        return {
            type: \\"stopped\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionStatus.Stopped, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            }
        };
    },

    errored: (value: TraceApi.ErrorInfo): TraceApi.WorkspaceSubmissionStatus.Errored => {
        return {
            value: value,
            type: \\"errored\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionStatus.Errored, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            }
        };
    },

    running: (value: TraceApi.RunningSubmissionState): TraceApi.WorkspaceSubmissionStatus.Running => {
        return {
            value: value,
            type: \\"running\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionStatus.Running, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            }
        };
    },

    ran: (value: TraceApi.WorkspaceRunDetails): TraceApi.WorkspaceSubmissionStatus.Ran => {
        return {
            ...value,
            type: \\"ran\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionStatus.Ran, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            }
        };
    },

    traced: (value: TraceApi.WorkspaceRunDetails): TraceApi.WorkspaceSubmissionStatus.Traced => {
        return {
            ...value,
            type: \\"traced\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionStatus.Traced, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.WorkspaceSubmissionStatus._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionStatus._Unknown, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionStatus._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.WorkspaceSubmissionStatus, visitor: TraceApi.WorkspaceSubmissionStatus._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"stopped\\": return visitor.stopped();
            case \\"errored\\": return visitor.errored(value.value);
            case \\"running\\": return visitor.running(value.value);
            case \\"ran\\": return visitor.ran(value);
            case \\"traced\\": return visitor.traced(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "WorkspaceSubmissionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceSubmissionStatusV2 {
    updates: TraceApi.WorkspaceSubmissionUpdate[];
}
",
                    "name": "WorkspaceSubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceSubmissionUpdate {
    updateTime: Date;
    updateInfo: TraceApi.WorkspaceSubmissionUpdateInfo;
}
",
                    "name": "WorkspaceSubmissionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export type WorkspaceSubmissionUpdateInfo =
    | TraceApi.WorkspaceSubmissionUpdateInfo.Running
    | TraceApi.WorkspaceSubmissionUpdateInfo.Ran
    | TraceApi.WorkspaceSubmissionUpdateInfo.Stopped
    | TraceApi.WorkspaceSubmissionUpdateInfo.Traced
    | TraceApi.WorkspaceSubmissionUpdateInfo.TracedV2
    | TraceApi.WorkspaceSubmissionUpdateInfo.Errored
    | TraceApi.WorkspaceSubmissionUpdateInfo.Finished
    | TraceApi.WorkspaceSubmissionUpdateInfo._Unknown;

export declare namespace WorkspaceSubmissionUpdateInfo {
    interface Running extends _Utils {
        type: \\"running\\";
        value: TraceApi.RunningSubmissionState;
    }

    interface Ran extends TraceApi.WorkspaceRunDetails, _Utils {
        type: \\"ran\\";
    }

    interface Stopped extends _Utils {
        type: \\"stopped\\";
    }

    interface Traced extends _Utils {
        type: \\"traced\\";
    }

    interface TracedV2 extends TraceApi.WorkspaceTracedUpdate, _Utils {
        type: \\"tracedV2\\";
    }

    interface Errored extends _Utils {
        type: \\"errored\\";
        value: TraceApi.ErrorInfo;
    }

    interface Finished extends _Utils {
        type: \\"finished\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        running: (value: TraceApi.RunningSubmissionState) => _Result;
        ran: (value: TraceApi.WorkspaceRunDetails) => _Result;
        stopped: () => _Result;
        traced: () => _Result;
        tracedV2: (value: TraceApi.WorkspaceTracedUpdate) => _Result;
        errored: (value: TraceApi.ErrorInfo) => _Result;
        finished: () => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const WorkspaceSubmissionUpdateInfo = {
    running: (value: TraceApi.RunningSubmissionState): TraceApi.WorkspaceSubmissionUpdateInfo.Running => {
        return {
            value: value,
            type: \\"running\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.Running, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    ran: (value: TraceApi.WorkspaceRunDetails): TraceApi.WorkspaceSubmissionUpdateInfo.Ran => {
        return {
            ...value,
            type: \\"ran\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.Ran, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    stopped: (): TraceApi.WorkspaceSubmissionUpdateInfo.Stopped => {
        return {
            type: \\"stopped\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.Stopped, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    traced: (): TraceApi.WorkspaceSubmissionUpdateInfo.Traced => {
        return {
            type: \\"traced\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.Traced, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    tracedV2: (value: TraceApi.WorkspaceTracedUpdate): TraceApi.WorkspaceSubmissionUpdateInfo.TracedV2 => {
        return {
            ...value,
            type: \\"tracedV2\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.TracedV2, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    errored: (value: TraceApi.ErrorInfo): TraceApi.WorkspaceSubmissionUpdateInfo.Errored => {
        return {
            value: value,
            type: \\"errored\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.Errored, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    finished: (): TraceApi.WorkspaceSubmissionUpdateInfo.Finished => {
        return {
            type: \\"finished\\",
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo.Finished, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.WorkspaceSubmissionUpdateInfo._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.WorkspaceSubmissionUpdateInfo._Unknown, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>) {
                return TraceApi.WorkspaceSubmissionUpdateInfo._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.WorkspaceSubmissionUpdateInfo, visitor: TraceApi.WorkspaceSubmissionUpdateInfo._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"running\\": return visitor.running(value.value);
            case \\"ran\\": return visitor.ran(value);
            case \\"stopped\\": return visitor.stopped();
            case \\"traced\\": return visitor.traced();
            case \\"tracedV2\\": return visitor.tracedV2(value);
            case \\"errored\\": return visitor.errored(value.value);
            case \\"finished\\": return visitor.finished();
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                    "name": "WorkspaceSubmissionUpdateInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../..\\";

export interface WorkspaceSubmitRequest {
    submissionId: TraceApi.SubmissionId;
    language: TraceApi.Language;
    submissionFiles: TraceApi.SubmissionFileInfo[];
    userId?: string;
}
",
                    "name": "WorkspaceSubmitRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface WorkspaceTracedUpdate {
    traceResponsesSize: number;
}
",
                    "name": "WorkspaceTracedUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "submission",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import * as serializers from \\"../../../../serialization\\";
import { TraceApi } from \\"../../../..\\";
import * as errors from \\"../../../../errors\\";

export abstract class AbstractSyspropService {
    private router = express.Router().use(express.json());

    public abstract setNumWarmInstances(request: express.Request<{
        language: serializers.Language.Raw;
        numWarmInstances: number;
    }, never, never, never, never>): Promise<void>;

    public abstract getNumWarmInstances(request: express.Request<never, Record<TraceApi.Language, number | undefined>, never, never, never>): Promise<Record<TraceApi.Language, number | undefined>>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.put(\\"/num-warm-instances/:language/:numWarmInstances\\", async (req, res, next) => {
            try {
                await this.setNumWarmInstances(req as any);
                res.sendStatus(204);
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'setNumWarmInstances' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/num-warm-instances\\", async (req, res, next) => {
            try {
                const response = await this.getNumWarmInstances(req as any);
                res.send(await serializers.sysprop.getNumWarmInstances.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getNumWarmInstances' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                    "name": "AbstractSyspropService.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { AbstractSyspropService } from \\"./AbstractSyspropService\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "sysprop",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./resources\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { TraceApi } from \\"../../../../../..\\";
import * as serializers from \\"../../../../../../serialization\\";
import * as errors from \\"../../../../../../errors\\";

export abstract class AbstractProblemService {
    private router = express.Router().use(express.json());

    public abstract getLightweightProblems(request: express.Request<never, TraceApi.v2.LightweightProblemInfoV2[], never, never, never>): Promise<TraceApi.v2.LightweightProblemInfoV2[]>;

    public abstract getProblems(request: express.Request<never, TraceApi.v2.ProblemInfoV2[], never, never, never>): Promise<TraceApi.v2.ProblemInfoV2[]>;

    public abstract getLatestProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, TraceApi.v2.ProblemInfoV2, never, never, never>): Promise<TraceApi.v2.ProblemInfoV2>;

    public abstract getProblemVersion(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
        problemVersion: number;
    }, TraceApi.v2.ProblemInfoV2, never, never, never>): Promise<TraceApi.v2.ProblemInfoV2>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.get(\\"/lightweight-problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getLightweightProblems(req as any);
                res.send(await serializers.v2.problem.getLightweightProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLightweightProblems' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getProblems(req as any);
                res.send(await serializers.v2.problem.getProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblems' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId\\", async (req, res, next) => {
            try {
                const response = await this.getLatestProblem(req as any);
                res.send(await serializers.v2.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLatestProblem' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId/version/:problemVersion\\", async (req, res, next) => {
            try {
                const response = await this.getProblemVersion(req as any);
                res.send(await serializers.v2.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblemVersion' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                            "name": "AbstractProblemService.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                        ],
                        "name": "service",
                        "type": "directory",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export type AssertCorrectnessCheck =
    | TraceApi.v2.AssertCorrectnessCheck.DeepEquality
    | TraceApi.v2.AssertCorrectnessCheck.Custom
    | TraceApi.v2.AssertCorrectnessCheck._Unknown;

export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends TraceApi.v2.DeepEqualityCorrectnessCheck, _Utils {
        type: \\"deepEquality\\";
    }

    interface Custom extends TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult, _Utils {
        type: \\"custom\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        deepEquality: (value: TraceApi.v2.DeepEqualityCorrectnessCheck) => _Result;
        custom: (value: TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const AssertCorrectnessCheck = {
    deepEquality: (value: TraceApi.v2.DeepEqualityCorrectnessCheck): TraceApi.v2.AssertCorrectnessCheck.DeepEquality => {
        return {
            ...value,
            type: \\"deepEquality\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.AssertCorrectnessCheck.DeepEquality, visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>) {
                return TraceApi.v2.AssertCorrectnessCheck._visit(this, visitor);
            }
        };
    },

    custom: (value: TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult): TraceApi.v2.AssertCorrectnessCheck.Custom => {
        return {
            ...value,
            type: \\"custom\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.AssertCorrectnessCheck.Custom, visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>) {
                return TraceApi.v2.AssertCorrectnessCheck._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.AssertCorrectnessCheck._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.AssertCorrectnessCheck._Unknown, visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>) {
                return TraceApi.v2.AssertCorrectnessCheck._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.AssertCorrectnessCheck, visitor: TraceApi.v2.AssertCorrectnessCheck._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"deepEquality\\": return visitor.deepEquality(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                            "name": "AssertCorrectnessCheck.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface BasicCustomFiles {
    methodName: string;
    signature: TraceApi.v2.NonVoidFunctionSignature;
    additionalFiles: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    basicTestCaseTemplate: TraceApi.v2.BasicTestCaseTemplate;
}
",
                            "name": "BasicCustomFiles.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface BasicTestCaseTemplate {
    templateId: TraceApi.v2.TestCaseTemplateId;
    name: string;
    description: TraceApi.v2.TestCaseImplementationDescription;
    expectedValueParameterId: TraceApi.v2.ParameterId;
}
",
                            "name": "BasicTestCaseTemplate.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: TraceApi.ProblemDescription;
    customFiles: TraceApi.v2.CustomFiles;
    customTestCaseTemplates: TraceApi.v2.TestCaseTemplate[];
    testcases: TraceApi.v2.TestCaseV2[];
    supportedLanguages: TraceApi.Language[];
    isPublic: boolean;
}
",
                            "name": "CreateProblemRequestV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export type CustomFiles =
    | TraceApi.v2.CustomFiles.Basic
    | TraceApi.v2.CustomFiles.Custom
    | TraceApi.v2.CustomFiles._Unknown;

export declare namespace CustomFiles {
    interface Basic extends TraceApi.v2.BasicCustomFiles, _Utils {
        type: \\"basic\\";
    }

    interface Custom extends _Utils {
        type: \\"custom\\";
        value: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.CustomFiles._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        basic: (value: TraceApi.v2.BasicCustomFiles) => _Result;
        custom: (value: Record<TraceApi.Language, TraceApi.v2.Files | undefined>) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const CustomFiles = {
    basic: (value: TraceApi.v2.BasicCustomFiles): TraceApi.v2.CustomFiles.Basic => {
        return {
            ...value,
            type: \\"basic\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.CustomFiles.Basic, visitor: TraceApi.v2.CustomFiles._Visitor<_Result>) {
                return TraceApi.v2.CustomFiles._visit(this, visitor);
            }
        };
    },

    custom: (value: Record<TraceApi.Language, TraceApi.v2.Files | undefined>): TraceApi.v2.CustomFiles.Custom => {
        return {
            value: value,
            type: \\"custom\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.CustomFiles.Custom, visitor: TraceApi.v2.CustomFiles._Visitor<_Result>) {
                return TraceApi.v2.CustomFiles._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.CustomFiles._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.CustomFiles._Unknown, visitor: TraceApi.v2.CustomFiles._Visitor<_Result>) {
                return TraceApi.v2.CustomFiles._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.CustomFiles, visitor: TraceApi.v2.CustomFiles._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"basic\\": return visitor.basic(value);
            case \\"custom\\": return visitor.custom(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                            "name": "CustomFiles.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: TraceApi.v2.ParameterId;
}
",
                            "name": "DeepEqualityCorrectnessCheck.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface DefaultProvidedFile {
    file: TraceApi.v2.FileInfoV2;
    relatedTypes: TraceApi.VariableType[];
}
",
                            "name": "DefaultProvidedFile.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                            "name": "FileInfoV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface Files {
    files: TraceApi.v2.FileInfoV2[];
}
",
                            "name": "Files.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FunctionImplementation {
    impl: string;
    imports?: string;
}
",
                            "name": "FunctionImplementation.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<TraceApi.Language, TraceApi.v2.FunctionImplementation | undefined>;
}
",
                            "name": "FunctionImplementationForMultipleLanguages.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export type FunctionSignature =
    | TraceApi.v2.FunctionSignature.Void
    | TraceApi.v2.FunctionSignature.NonVoid
    /**
     * Useful when specifying custom grading for a testcase where actualResult is defined. */
    | TraceApi.v2.FunctionSignature.VoidThatTakesActualResult
    | TraceApi.v2.FunctionSignature._Unknown;

export declare namespace FunctionSignature {
    interface Void extends TraceApi.v2.VoidFunctionSignature, _Utils {
        type: \\"void\\";
    }

    interface NonVoid extends TraceApi.v2.NonVoidFunctionSignature, _Utils {
        type: \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends TraceApi.v2.VoidFunctionSignatureThatTakesActualResult, _Utils {
        type: \\"voidThatTakesActualResult\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        void: (value: TraceApi.v2.VoidFunctionSignature) => _Result;
        nonVoid: (value: TraceApi.v2.NonVoidFunctionSignature) => _Result;
        voidThatTakesActualResult: (value: TraceApi.v2.VoidFunctionSignatureThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const FunctionSignature = {
    void: (value: TraceApi.v2.VoidFunctionSignature): TraceApi.v2.FunctionSignature.Void => {
        return {
            ...value,
            type: \\"void\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.FunctionSignature.Void, visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            }
        };
    },

    nonVoid: (value: TraceApi.v2.NonVoidFunctionSignature): TraceApi.v2.FunctionSignature.NonVoid => {
        return {
            ...value,
            type: \\"nonVoid\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.FunctionSignature.NonVoid, visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            }
        };
    },

    voidThatTakesActualResult: (value: TraceApi.v2.VoidFunctionSignatureThatTakesActualResult): TraceApi.v2.FunctionSignature.VoidThatTakesActualResult => {
        return {
            ...value,
            type: \\"voidThatTakesActualResult\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.FunctionSignature.VoidThatTakesActualResult, visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.FunctionSignature._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.FunctionSignature._Unknown, visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.FunctionSignature._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.FunctionSignature, visitor: TraceApi.v2.FunctionSignature._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"void\\": return visitor.void(value);
            case \\"nonVoid\\": return visitor.nonVoid(value);
            case \\"voidThatTakesActualResult\\": return visitor.voidThatTakesActualResult(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                            "name": "FunctionSignature.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GeneratedFiles {
    generatedTestCaseFiles: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    generatedTemplateFiles: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
    other: Record<TraceApi.Language, TraceApi.v2.Files | undefined>;
}
",
                            "name": "GeneratedFiles.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: TraceApi.v2.NonVoidFunctionSignature;
}
",
                            "name": "GetBasicSolutionFileRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<TraceApi.Language, TraceApi.v2.FileInfoV2 | undefined>;
}
",
                            "name": "GetBasicSolutionFileResponse.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GetFunctionSignatureRequest {
    functionSignature: TraceApi.v2.FunctionSignature;
}
",
                            "name": "GetFunctionSignatureRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<TraceApi.Language, string | undefined>;
}
",
                            "name": "GetFunctionSignatureResponse.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GetGeneratedTestCaseFileRequest {
    template?: TraceApi.v2.TestCaseTemplate;
    testCase: TraceApi.v2.TestCaseV2;
}
",
                            "name": "GetGeneratedTestCaseFileRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    template: TraceApi.v2.TestCaseTemplate;
}
",
                            "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface LightweightProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: TraceApi.VariableType[];
}
",
                            "name": "LightweightProblemInfoV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface NonVoidFunctionDefinition {
    signature: TraceApi.v2.NonVoidFunctionSignature;
    code: TraceApi.v2.FunctionImplementationForMultipleLanguages;
}
",
                            "name": "NonVoidFunctionDefinition.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface NonVoidFunctionSignature {
    parameters: TraceApi.v2.Parameter[];
    returnType: TraceApi.VariableType;
}
",
                            "name": "NonVoidFunctionSignature.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface Parameter {
    parameterId: TraceApi.v2.ParameterId;
    name: string;
    variableType: TraceApi.VariableType;
}
",
                            "name": "Parameter.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ParameterId = string;
",
                            "name": "ParameterId.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface ProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemDescription: TraceApi.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: TraceApi.Language[];
    customFiles: TraceApi.v2.CustomFiles;
    generatedFiles: TraceApi.v2.GeneratedFiles;
    customTestCaseTemplates: TraceApi.v2.TestCaseTemplate[];
    testcases: TraceApi.v2.TestCaseV2[];
    isPublic: boolean;
}
",
                            "name": "ProblemInfoV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface TestCaseExpects {
    expectedStdout?: string;
}
",
                            "name": "TestCaseExpects.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export type TestCaseFunction =
    | TraceApi.v2.TestCaseFunction.WithActualResult
    | TraceApi.v2.TestCaseFunction.Custom
    | TraceApi.v2.TestCaseFunction._Unknown;

export declare namespace TestCaseFunction {
    interface WithActualResult extends TraceApi.v2.TestCaseWithActualResultImplementation, _Utils {
        type: \\"withActualResult\\";
    }

    interface Custom extends TraceApi.v2.VoidFunctionDefinition, _Utils {
        type: \\"custom\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        withActualResult: (value: TraceApi.v2.TestCaseWithActualResultImplementation) => _Result;
        custom: (value: TraceApi.v2.VoidFunctionDefinition) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseFunction = {
    withActualResult: (value: TraceApi.v2.TestCaseWithActualResultImplementation): TraceApi.v2.TestCaseFunction.WithActualResult => {
        return {
            ...value,
            type: \\"withActualResult\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseFunction.WithActualResult, visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>) {
                return TraceApi.v2.TestCaseFunction._visit(this, visitor);
            }
        };
    },

    custom: (value: TraceApi.v2.VoidFunctionDefinition): TraceApi.v2.TestCaseFunction.Custom => {
        return {
            ...value,
            type: \\"custom\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseFunction.Custom, visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>) {
                return TraceApi.v2.TestCaseFunction._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.TestCaseFunction._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseFunction._Unknown, visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>) {
                return TraceApi.v2.TestCaseFunction._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.TestCaseFunction, visitor: TraceApi.v2.TestCaseFunction._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"withActualResult\\": return visitor.withActualResult(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                            "name": "TestCaseFunction.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type TestCaseId = string;
",
                            "name": "TestCaseId.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface TestCaseImplementation {
    description: TraceApi.v2.TestCaseImplementationDescription;
    function: TraceApi.v2.TestCaseFunction;
}
",
                            "name": "TestCaseImplementation.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface TestCaseImplementationDescription {
    boards: TraceApi.v2.TestCaseImplementationDescriptionBoard[];
}
",
                            "name": "TestCaseImplementationDescription.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export type TestCaseImplementationDescriptionBoard =
    | TraceApi.v2.TestCaseImplementationDescriptionBoard.Html
    | TraceApi.v2.TestCaseImplementationDescriptionBoard.ParamId
    | TraceApi.v2.TestCaseImplementationDescriptionBoard._Unknown;

export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html extends _Utils {
        type: \\"html\\";
        value: string;
    }

    interface ParamId extends _Utils {
        type: \\"paramId\\";
        value: TraceApi.v2.ParameterId;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        html: (value: string) => _Result;
        paramId: (value: TraceApi.v2.ParameterId) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseImplementationDescriptionBoard = {
    html: (value: string): TraceApi.v2.TestCaseImplementationDescriptionBoard.Html => {
        return {
            value: value,
            type: \\"html\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseImplementationDescriptionBoard.Html, visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>) {
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            }
        };
    },

    paramId: (value: TraceApi.v2.ParameterId): TraceApi.v2.TestCaseImplementationDescriptionBoard.ParamId => {
        return {
            value: value,
            type: \\"paramId\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseImplementationDescriptionBoard.ParamId, visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>) {
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.TestCaseImplementationDescriptionBoard._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseImplementationDescriptionBoard._Unknown, visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>) {
                return TraceApi.v2.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.TestCaseImplementationDescriptionBoard, visitor: TraceApi.v2.TestCaseImplementationDescriptionBoard._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"html\\": return visitor.html(value.value);
            case \\"paramId\\": return visitor.paramId(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                            "name": "TestCaseImplementationDescriptionBoard.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export type TestCaseImplementationReference =
    | TraceApi.v2.TestCaseImplementationReference.TemplateId
    | TraceApi.v2.TestCaseImplementationReference.Implementation
    | TraceApi.v2.TestCaseImplementationReference._Unknown;

export declare namespace TestCaseImplementationReference {
    interface TemplateId extends _Utils {
        type: \\"templateId\\";
        value: TraceApi.v2.TestCaseTemplateId;
    }

    interface Implementation extends TraceApi.v2.TestCaseImplementation, _Utils {
        type: \\"implementation\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        templateId: (value: TraceApi.v2.TestCaseTemplateId) => _Result;
        implementation: (value: TraceApi.v2.TestCaseImplementation) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseImplementationReference = {
    templateId: (value: TraceApi.v2.TestCaseTemplateId): TraceApi.v2.TestCaseImplementationReference.TemplateId => {
        return {
            value: value,
            type: \\"templateId\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseImplementationReference.TemplateId, visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>) {
                return TraceApi.v2.TestCaseImplementationReference._visit(this, visitor);
            }
        };
    },

    implementation: (value: TraceApi.v2.TestCaseImplementation): TraceApi.v2.TestCaseImplementationReference.Implementation => {
        return {
            ...value,
            type: \\"implementation\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseImplementationReference.Implementation, visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>) {
                return TraceApi.v2.TestCaseImplementationReference._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.TestCaseImplementationReference._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.TestCaseImplementationReference._Unknown, visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>) {
                return TraceApi.v2.TestCaseImplementationReference._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.TestCaseImplementationReference, visitor: TraceApi.v2.TestCaseImplementationReference._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"templateId\\": return visitor.templateId(value.value);
            case \\"implementation\\": return visitor.implementation(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                            "name": "TestCaseImplementationReference.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface TestCaseMetadata {
    id: TraceApi.v2.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                            "name": "TestCaseMetadata.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface TestCaseTemplate {
    templateId: TraceApi.v2.TestCaseTemplateId;
    name: string;
    implementation: TraceApi.v2.TestCaseImplementation;
}
",
                            "name": "TestCaseTemplate.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type TestCaseTemplateId = string;
",
                            "name": "TestCaseTemplateId.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface TestCaseV2 {
    metadata: TraceApi.v2.TestCaseMetadata;
    implementation: TraceApi.v2.TestCaseImplementationReference;
    arguments: Record<TraceApi.v2.ParameterId, TraceApi.VariableValue>;
    expects?: TraceApi.v2.TestCaseExpects;
}
",
                            "name": "TestCaseV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface TestCaseWithActualResultImplementation {
    getActualResult: TraceApi.v2.NonVoidFunctionDefinition;
    assertCorrectnessCheck: TraceApi.v2.AssertCorrectnessCheck;
}
",
                            "name": "TestCaseWithActualResultImplementation.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface VoidFunctionDefinition {
    parameters: TraceApi.v2.Parameter[];
    code: TraceApi.v2.FunctionImplementationForMultipleLanguages;
}
",
                            "name": "VoidFunctionDefinition.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: TraceApi.v2.Parameter[];
    code: TraceApi.v2.FunctionImplementationForMultipleLanguages;
}
",
                            "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface VoidFunctionSignature {
    parameters: TraceApi.v2.Parameter[];
}
",
                            "name": "VoidFunctionSignature.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../..\\";

export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: TraceApi.v2.Parameter[];
    actualResultType: TraceApi.VariableType;
}
",
                            "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                        ],
                        "name": "types",
                        "type": "directory",
                      },
                    ],
                    "name": "problem",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./resources\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": Array [
                              Object {
                                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                                "name": "index.ts",
                                "type": "file",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as serializers from \\"../../../../../../../../serialization\\";
import * as errors from \\"../../../../../../../../errors\\";

export abstract class AbstractProblemService {
    private router = express.Router().use(express.json());

    public abstract getLightweightProblems(request: express.Request<never, TraceApi.v2.v3.LightweightProblemInfoV2[], never, never, never>): Promise<TraceApi.v2.v3.LightweightProblemInfoV2[]>;

    public abstract getProblems(request: express.Request<never, TraceApi.v2.v3.ProblemInfoV2[], never, never, never>): Promise<TraceApi.v2.v3.ProblemInfoV2[]>;

    public abstract getLatestProblem(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
    }, TraceApi.v2.v3.ProblemInfoV2, never, never, never>): Promise<TraceApi.v2.v3.ProblemInfoV2>;

    public abstract getProblemVersion(request: express.Request<{
        problemId: serializers.ProblemId.Raw;
        problemVersion: number;
    }, TraceApi.v2.v3.ProblemInfoV2, never, never, never>): Promise<TraceApi.v2.v3.ProblemInfoV2>;

    public addMiddleware(handler: express.RequestHandler): this {
        this.router.use(handler);
        return this;
    }

    public toRouter(): express.Router {
        this.router.get(\\"/lightweight-problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getLightweightProblems(req as any);
                res.send(await serializers.v2.v3.problem.getLightweightProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLightweightProblems' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info\\", async (req, res, next) => {
            try {
                const response = await this.getProblems(req as any);
                res.send(await serializers.v2.v3.problem.getProblems.Response.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblems' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId\\", async (req, res, next) => {
            try {
                const response = await this.getLatestProblem(req as any);
                res.send(await serializers.v2.v3.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getLatestProblem' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        this.router.get(\\"/problem-info/:problemId/version/:problemVersion\\", async (req, res, next) => {
            try {
                const response = await this.getProblemVersion(req as any);
                res.send(await serializers.v2.v3.ProblemInfoV2.json(response));
            }
            catch (error) {
                console.error(error);
                if (error instanceof errors.TraceApiError) {
                    console.warn(\`Endpoint 'getProblemVersion' unexpectedly threw \${error.constructor.name}.\` + \` If this was intentional, please add \${error.constructor.name} to\` + \\" the endpoint's errors list in your Fern Definition.\\");
                    error.send(res);
                }
                else {
                    res.status(500).send(\\"Internal Server Error\\");
                }
            }
            next();
        });
        return this.router;
    }
}
",
                                    "name": "AbstractProblemService.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export { AbstractProblemService } from \\"./AbstractProblemService\\";
",
                                    "name": "index.ts",
                                    "type": "file",
                                  },
                                ],
                                "name": "service",
                                "type": "directory",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export type AssertCorrectnessCheck =
    | TraceApi.v2.v3.AssertCorrectnessCheck.DeepEquality
    | TraceApi.v2.v3.AssertCorrectnessCheck.Custom
    | TraceApi.v2.v3.AssertCorrectnessCheck._Unknown;

export declare namespace AssertCorrectnessCheck {
    interface DeepEquality extends TraceApi.v2.v3.DeepEqualityCorrectnessCheck, _Utils {
        type: \\"deepEquality\\";
    }

    interface Custom extends TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult, _Utils {
        type: \\"custom\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        deepEquality: (value: TraceApi.v2.v3.DeepEqualityCorrectnessCheck) => _Result;
        custom: (value: TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const AssertCorrectnessCheck = {
    deepEquality: (value: TraceApi.v2.v3.DeepEqualityCorrectnessCheck): TraceApi.v2.v3.AssertCorrectnessCheck.DeepEquality => {
        return {
            ...value,
            type: \\"deepEquality\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.AssertCorrectnessCheck.DeepEquality, visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>) {
                return TraceApi.v2.v3.AssertCorrectnessCheck._visit(this, visitor);
            }
        };
    },

    custom: (value: TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult): TraceApi.v2.v3.AssertCorrectnessCheck.Custom => {
        return {
            ...value,
            type: \\"custom\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.AssertCorrectnessCheck.Custom, visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>) {
                return TraceApi.v2.v3.AssertCorrectnessCheck._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.v3.AssertCorrectnessCheck._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.AssertCorrectnessCheck._Unknown, visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>) {
                return TraceApi.v2.v3.AssertCorrectnessCheck._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.v3.AssertCorrectnessCheck, visitor: TraceApi.v2.v3.AssertCorrectnessCheck._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"deepEquality\\": return visitor.deepEquality(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                                    "name": "AssertCorrectnessCheck.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface BasicCustomFiles {
    methodName: string;
    signature: TraceApi.v2.v3.NonVoidFunctionSignature;
    additionalFiles: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    basicTestCaseTemplate: TraceApi.v2.v3.BasicTestCaseTemplate;
}
",
                                    "name": "BasicCustomFiles.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface BasicTestCaseTemplate {
    templateId: TraceApi.v2.v3.TestCaseTemplateId;
    name: string;
    description: TraceApi.v2.v3.TestCaseImplementationDescription;
    expectedValueParameterId: TraceApi.v2.v3.ParameterId;
}
",
                                    "name": "BasicTestCaseTemplate.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface CreateProblemRequestV2 {
    problemName: string;
    problemDescription: TraceApi.ProblemDescription;
    customFiles: TraceApi.v2.v3.CustomFiles;
    customTestCaseTemplates: TraceApi.v2.v3.TestCaseTemplate[];
    testcases: TraceApi.v2.v3.TestCaseV2[];
    supportedLanguages: TraceApi.Language[];
    isPublic: boolean;
}
",
                                    "name": "CreateProblemRequestV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export type CustomFiles =
    | TraceApi.v2.v3.CustomFiles.Basic
    | TraceApi.v2.v3.CustomFiles.Custom
    | TraceApi.v2.v3.CustomFiles._Unknown;

export declare namespace CustomFiles {
    interface Basic extends TraceApi.v2.v3.BasicCustomFiles, _Utils {
        type: \\"basic\\";
    }

    interface Custom extends _Utils {
        type: \\"custom\\";
        value: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        basic: (value: TraceApi.v2.v3.BasicCustomFiles) => _Result;
        custom: (value: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const CustomFiles = {
    basic: (value: TraceApi.v2.v3.BasicCustomFiles): TraceApi.v2.v3.CustomFiles.Basic => {
        return {
            ...value,
            type: \\"basic\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.CustomFiles.Basic, visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>) {
                return TraceApi.v2.v3.CustomFiles._visit(this, visitor);
            }
        };
    },

    custom: (value: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>): TraceApi.v2.v3.CustomFiles.Custom => {
        return {
            value: value,
            type: \\"custom\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.CustomFiles.Custom, visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>) {
                return TraceApi.v2.v3.CustomFiles._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.v3.CustomFiles._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.CustomFiles._Unknown, visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>) {
                return TraceApi.v2.v3.CustomFiles._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.v3.CustomFiles, visitor: TraceApi.v2.v3.CustomFiles._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"basic\\": return visitor.basic(value);
            case \\"custom\\": return visitor.custom(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                                    "name": "CustomFiles.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface DeepEqualityCorrectnessCheck {
    expectedValueParameterId: TraceApi.v2.v3.ParameterId;
}
",
                                    "name": "DeepEqualityCorrectnessCheck.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface DefaultProvidedFile {
    file: TraceApi.v2.v3.FileInfoV2;
    relatedTypes: TraceApi.VariableType[];
}
",
                                    "name": "DefaultProvidedFile.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FileInfoV2 {
    filename: string;
    directory: string;
    contents: string;
    editable: boolean;
}
",
                                    "name": "FileInfoV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface Files {
    files: TraceApi.v2.v3.FileInfoV2[];
}
",
                                    "name": "Files.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface FunctionImplementation {
    impl: string;
    imports?: string;
}
",
                                    "name": "FunctionImplementation.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface FunctionImplementationForMultipleLanguages {
    codeByLanguage: Record<TraceApi.Language, TraceApi.v2.v3.FunctionImplementation | undefined>;
}
",
                                    "name": "FunctionImplementationForMultipleLanguages.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export type FunctionSignature =
    | TraceApi.v2.v3.FunctionSignature.Void
    | TraceApi.v2.v3.FunctionSignature.NonVoid
    /**
     * Useful when specifying custom grading for a testcase where actualResult is defined. */
    | TraceApi.v2.v3.FunctionSignature.VoidThatTakesActualResult
    | TraceApi.v2.v3.FunctionSignature._Unknown;

export declare namespace FunctionSignature {
    interface Void extends TraceApi.v2.v3.VoidFunctionSignature, _Utils {
        type: \\"void\\";
    }

    interface NonVoid extends TraceApi.v2.v3.NonVoidFunctionSignature, _Utils {
        type: \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult, _Utils {
        type: \\"voidThatTakesActualResult\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        void: (value: TraceApi.v2.v3.VoidFunctionSignature) => _Result;
        nonVoid: (value: TraceApi.v2.v3.NonVoidFunctionSignature) => _Result;
        voidThatTakesActualResult: (value: TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const FunctionSignature = {
    void: (value: TraceApi.v2.v3.VoidFunctionSignature): TraceApi.v2.v3.FunctionSignature.Void => {
        return {
            ...value,
            type: \\"void\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.FunctionSignature.Void, visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            }
        };
    },

    nonVoid: (value: TraceApi.v2.v3.NonVoidFunctionSignature): TraceApi.v2.v3.FunctionSignature.NonVoid => {
        return {
            ...value,
            type: \\"nonVoid\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.FunctionSignature.NonVoid, visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            }
        };
    },

    voidThatTakesActualResult: (value: TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult): TraceApi.v2.v3.FunctionSignature.VoidThatTakesActualResult => {
        return {
            ...value,
            type: \\"voidThatTakesActualResult\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.FunctionSignature.VoidThatTakesActualResult, visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.v3.FunctionSignature._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.FunctionSignature._Unknown, visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>) {
                return TraceApi.v2.v3.FunctionSignature._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.v3.FunctionSignature, visitor: TraceApi.v2.v3.FunctionSignature._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"void\\": return visitor.void(value);
            case \\"nonVoid\\": return visitor.nonVoid(value);
            case \\"voidThatTakesActualResult\\": return visitor.voidThatTakesActualResult(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                                    "name": "FunctionSignature.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GeneratedFiles {
    generatedTestCaseFiles: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    generatedTemplateFiles: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
    other: Record<TraceApi.Language, TraceApi.v2.v3.Files | undefined>;
}
",
                                    "name": "GeneratedFiles.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GetBasicSolutionFileRequest {
    methodName: string;
    signature: TraceApi.v2.v3.NonVoidFunctionSignature;
}
",
                                    "name": "GetBasicSolutionFileRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GetBasicSolutionFileResponse {
    solutionFileByLanguage: Record<TraceApi.Language, TraceApi.v2.v3.FileInfoV2 | undefined>;
}
",
                                    "name": "GetBasicSolutionFileResponse.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GetFunctionSignatureRequest {
    functionSignature: TraceApi.v2.v3.FunctionSignature;
}
",
                                    "name": "GetFunctionSignatureRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GetFunctionSignatureResponse {
    functionByLanguage: Record<TraceApi.Language, string | undefined>;
}
",
                                    "name": "GetFunctionSignatureResponse.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GetGeneratedTestCaseFileRequest {
    template?: TraceApi.v2.v3.TestCaseTemplate;
    testCase: TraceApi.v2.v3.TestCaseV2;
}
",
                                    "name": "GetGeneratedTestCaseFileRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface GetGeneratedTestCaseTemplateFileRequest {
    template: TraceApi.v2.v3.TestCaseTemplate;
}
",
                                    "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface LightweightProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemName: string;
    problemVersion: number;
    variableTypes: TraceApi.VariableType[];
}
",
                                    "name": "LightweightProblemInfoV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface NonVoidFunctionDefinition {
    signature: TraceApi.v2.v3.NonVoidFunctionSignature;
    code: TraceApi.v2.v3.FunctionImplementationForMultipleLanguages;
}
",
                                    "name": "NonVoidFunctionDefinition.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface NonVoidFunctionSignature {
    parameters: TraceApi.v2.v3.Parameter[];
    returnType: TraceApi.VariableType;
}
",
                                    "name": "NonVoidFunctionSignature.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface Parameter {
    parameterId: TraceApi.v2.v3.ParameterId;
    name: string;
    variableType: TraceApi.VariableType;
}
",
                                    "name": "Parameter.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type ParameterId = string;
",
                                    "name": "ParameterId.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface ProblemInfoV2 {
    problemId: TraceApi.ProblemId;
    problemDescription: TraceApi.ProblemDescription;
    problemName: string;
    problemVersion: number;
    supportedLanguages: TraceApi.Language[];
    customFiles: TraceApi.v2.v3.CustomFiles;
    generatedFiles: TraceApi.v2.v3.GeneratedFiles;
    customTestCaseTemplates: TraceApi.v2.v3.TestCaseTemplate[];
    testcases: TraceApi.v2.v3.TestCaseV2[];
    isPublic: boolean;
}
",
                                    "name": "ProblemInfoV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export interface TestCaseExpects {
    expectedStdout?: string;
}
",
                                    "name": "TestCaseExpects.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export type TestCaseFunction =
    | TraceApi.v2.v3.TestCaseFunction.WithActualResult
    | TraceApi.v2.v3.TestCaseFunction.Custom
    | TraceApi.v2.v3.TestCaseFunction._Unknown;

export declare namespace TestCaseFunction {
    interface WithActualResult extends TraceApi.v2.v3.TestCaseWithActualResultImplementation, _Utils {
        type: \\"withActualResult\\";
    }

    interface Custom extends TraceApi.v2.v3.VoidFunctionDefinition, _Utils {
        type: \\"custom\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        withActualResult: (value: TraceApi.v2.v3.TestCaseWithActualResultImplementation) => _Result;
        custom: (value: TraceApi.v2.v3.VoidFunctionDefinition) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseFunction = {
    withActualResult: (value: TraceApi.v2.v3.TestCaseWithActualResultImplementation): TraceApi.v2.v3.TestCaseFunction.WithActualResult => {
        return {
            ...value,
            type: \\"withActualResult\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseFunction.WithActualResult, visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseFunction._visit(this, visitor);
            }
        };
    },

    custom: (value: TraceApi.v2.v3.VoidFunctionDefinition): TraceApi.v2.v3.TestCaseFunction.Custom => {
        return {
            ...value,
            type: \\"custom\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseFunction.Custom, visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseFunction._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.v3.TestCaseFunction._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseFunction._Unknown, visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseFunction._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.v3.TestCaseFunction, visitor: TraceApi.v2.v3.TestCaseFunction._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"withActualResult\\": return visitor.withActualResult(value);
            case \\"custom\\": return visitor.custom(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                                    "name": "TestCaseFunction.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type TestCaseId = string;
",
                                    "name": "TestCaseId.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface TestCaseImplementation {
    description: TraceApi.v2.v3.TestCaseImplementationDescription;
    function: TraceApi.v2.v3.TestCaseFunction;
}
",
                                    "name": "TestCaseImplementation.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface TestCaseImplementationDescription {
    boards: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard[];
}
",
                                    "name": "TestCaseImplementationDescription.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export type TestCaseImplementationDescriptionBoard =
    | TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.Html
    | TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.ParamId
    | TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Unknown;

export declare namespace TestCaseImplementationDescriptionBoard {
    interface Html extends _Utils {
        type: \\"html\\";
        value: string;
    }

    interface ParamId extends _Utils {
        type: \\"paramId\\";
        value: TraceApi.v2.v3.ParameterId;
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        html: (value: string) => _Result;
        paramId: (value: TraceApi.v2.v3.ParameterId) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseImplementationDescriptionBoard = {
    html: (value: string): TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.Html => {
        return {
            value: value,
            type: \\"html\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.Html, visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            }
        };
    },

    paramId: (value: TraceApi.v2.v3.ParameterId): TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.ParamId => {
        return {
            value: value,
            type: \\"paramId\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.ParamId, visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Unknown, visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard, visitor: TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"html\\": return visitor.html(value.value);
            case \\"paramId\\": return visitor.paramId(value.value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                                    "name": "TestCaseImplementationDescriptionBoard.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export type TestCaseImplementationReference =
    | TraceApi.v2.v3.TestCaseImplementationReference.TemplateId
    | TraceApi.v2.v3.TestCaseImplementationReference.Implementation
    | TraceApi.v2.v3.TestCaseImplementationReference._Unknown;

export declare namespace TestCaseImplementationReference {
    interface TemplateId extends _Utils {
        type: \\"templateId\\";
        value: TraceApi.v2.v3.TestCaseTemplateId;
    }

    interface Implementation extends TraceApi.v2.v3.TestCaseImplementation, _Utils {
        type: \\"implementation\\";
    }

    interface _Unknown extends _Utils {
        type: void;
    }

    interface _Utils {
        _visit: <_Result>(visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>) => _Result;
    }

    interface _Visitor<_Result> {
        templateId: (value: TraceApi.v2.v3.TestCaseTemplateId) => _Result;
        implementation: (value: TraceApi.v2.v3.TestCaseImplementation) => _Result;
        _other: (value: {
            type: string;
        }) => _Result;
    }
}

export const TestCaseImplementationReference = {
    templateId: (value: TraceApi.v2.v3.TestCaseTemplateId): TraceApi.v2.v3.TestCaseImplementationReference.TemplateId => {
        return {
            value: value,
            type: \\"templateId\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseImplementationReference.TemplateId, visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseImplementationReference._visit(this, visitor);
            }
        };
    },

    implementation: (value: TraceApi.v2.v3.TestCaseImplementation): TraceApi.v2.v3.TestCaseImplementationReference.Implementation => {
        return {
            ...value,
            type: \\"implementation\\",
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseImplementationReference.Implementation, visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseImplementationReference._visit(this, visitor);
            }
        };
    },

    _unknown: (value: {
        type: string;
    }): TraceApi.v2.v3.TestCaseImplementationReference._Unknown => {
        return {
            ...(value as any),
            \\"_visit\\": function <_Result>(this: TraceApi.v2.v3.TestCaseImplementationReference._Unknown, visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>) {
                return TraceApi.v2.v3.TestCaseImplementationReference._visit(this, visitor);
            }
        };
    },

    _visit: <_Result>(value: TraceApi.v2.v3.TestCaseImplementationReference, visitor: TraceApi.v2.v3.TestCaseImplementationReference._Visitor<_Result>): _Result => {
        switch (value.type) {
            case \\"templateId\\": return visitor.templateId(value.value);
            case \\"implementation\\": return visitor.implementation(value);
            default: return visitor._other(value as any);
        }
    },
} as const;
",
                                    "name": "TestCaseImplementationReference.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface TestCaseMetadata {
    id: TraceApi.v2.v3.TestCaseId;
    name: string;
    hidden: boolean;
}
",
                                    "name": "TestCaseMetadata.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface TestCaseTemplate {
    templateId: TraceApi.v2.v3.TestCaseTemplateId;
    name: string;
    implementation: TraceApi.v2.v3.TestCaseImplementation;
}
",
                                    "name": "TestCaseTemplate.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

export type TestCaseTemplateId = string;
",
                                    "name": "TestCaseTemplateId.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface TestCaseV2 {
    metadata: TraceApi.v2.v3.TestCaseMetadata;
    implementation: TraceApi.v2.v3.TestCaseImplementationReference;
    arguments: Record<TraceApi.v2.v3.ParameterId, TraceApi.VariableValue>;
    expects?: TraceApi.v2.v3.TestCaseExpects;
}
",
                                    "name": "TestCaseV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface TestCaseWithActualResultImplementation {
    getActualResult: TraceApi.v2.v3.NonVoidFunctionDefinition;
    assertCorrectnessCheck: TraceApi.v2.v3.AssertCorrectnessCheck;
}
",
                                    "name": "TestCaseWithActualResultImplementation.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface VoidFunctionDefinition {
    parameters: TraceApi.v2.v3.Parameter[];
    code: TraceApi.v2.v3.FunctionImplementationForMultipleLanguages;
}
",
                                    "name": "VoidFunctionDefinition.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

/**
 * The generated signature will include an additional param, actualResult
 */
export interface VoidFunctionDefinitionThatTakesActualResult {
    additionalParameters: TraceApi.v2.v3.Parameter[];
    code: TraceApi.v2.v3.FunctionImplementationForMultipleLanguages;
}
",
                                    "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface VoidFunctionSignature {
    parameters: TraceApi.v2.v3.Parameter[];
}
",
                                    "name": "VoidFunctionSignature.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { TraceApi } from \\"../../../../../../../..\\";

export interface VoidFunctionSignatureThatTakesActualResult {
    parameters: TraceApi.v2.v3.Parameter[];
    actualResultType: TraceApi.VariableType;
}
",
                                    "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                                    "name": "index.ts",
                                    "type": "file",
                                  },
                                ],
                                "name": "types",
                                "type": "directory",
                              },
                            ],
                            "name": "problem",
                            "type": "directory",
                          },
                        ],
                        "name": "resources",
                        "type": "directory",
                      },
                    ],
                    "name": "v3",
                    "type": "directory",
                  },
                ],
                "name": "resources",
                "type": "directory",
              },
            ],
            "name": "v2",
            "type": "directory",
          },
        ],
        "name": "resources",
        "type": "directory",
      },
    ],
    "name": "api",
    "type": "directory",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * as serialization from \\"./schemas\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": "import { SchemaUtils } from \\"./builders\\";

export type Schema<Raw = unknown, Parsed = unknown> = BaseSchema<Raw, Parsed> & SchemaUtils<Raw, Parsed>;

export type inferRaw<S extends Schema> = S extends Schema<infer Raw, any> ? Raw : never;
export type inferParsed<S extends Schema> = S extends Schema<any, infer Parsed> ? Parsed : never;

export interface BaseSchema<Raw, Parsed> {
    parse: (raw: Raw, opts?: SchemaOptions) => Parsed | Promise<Parsed>;
    json: (parsed: Parsed, opts?: SchemaOptions) => Raw | Promise<Raw>;
}

export interface SchemaOptions {
    /**
     * @default false
     */
    skipUnknownKeysOnParse?: boolean;

    /**
     * @default false
     */
    includeUnknownKeysOnJson?: boolean;
}
",
            "name": "Schema.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function date(): Schema<string, Date> {
    const baseSchema: BaseSchema<string, Date> = {
        parse: (raw) => new Date(raw),
        json: (date) => date.toISOString(),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "date.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { date } from \\"./date\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "date",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../identity\\";

export function enum_<U extends string, E extends Readonly<[U, ...U[]]>>(_values: E): Schema<E[number], E[number]> {
    return createIdentitySchemaCreator<E[number]>()();
}
",
                    "name": "enum.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { enum_ } from \\"./enum\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "enum",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
import { identity } from \\"./identity\\";

export function createIdentitySchemaCreator<T>(): () => Schema<T, T> {
    return <T>() => identity<T>();
}
",
                    "name": "createIdentitySchemaCreator.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function identity<T>(): Schema<T, T> {
    const baseSchema: BaseSchema<T, T> = {
        parse: (raw) => raw,
        json: (parsed) => parsed,
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "identity.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { createIdentitySchemaCreator } from \\"./createIdentitySchemaCreator\\";
export { identity } from \\"./identity\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "identity",
                "type": "directory",
              },
              Object {
                "contents": "export * from \\"./date\\";
export * from \\"./enum\\";
export * from \\"./identity\\";
export * from \\"./lazy\\";
export * from \\"./list\\";
export * from \\"./literals\\";
export * from \\"./object\\";
export * from \\"./object-like\\";
export * from \\"./primitives\\";
export * from \\"./record\\";
export * from \\"./schema-utils\\";
export * from \\"./set\\";
export * from \\"./union\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { lazy, type SchemaGetter } from \\"./lazy\\";
export { lazyObject } from \\"./lazyObject\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export type SchemaGetter<SchemaType extends Schema<any, any>> = () => SchemaType | Promise<SchemaType>;

export function lazy<Raw, Parsed>(getter: SchemaGetter<Schema<Raw, Parsed>>): Schema<Raw, Parsed> {
    const baseSchema = constructLazyBaseSchema(getter);
    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

export function constructLazyBaseSchema<Raw, Parsed>(
    getter: SchemaGetter<Schema<Raw, Parsed>>
): BaseSchema<Raw, Parsed> {
    return {
        parse: async (raw) => (await getMemoizedSchema(getter)).parse(raw),
        json: async (parsed) => (await getMemoizedSchema(getter)).json(parsed),
    };
}

type MemoizedGetter<SchemaType extends Schema<any, any>> = SchemaGetter<SchemaType> & { __zurg_memoized?: SchemaType };

export async function getMemoizedSchema<SchemaType extends Schema<any, any>>(
    getter: SchemaGetter<SchemaType>
): Promise<SchemaType> {
    const castedGetter = getter as MemoizedGetter<SchemaType>;
    if (castedGetter.__zurg_memoized == null) {
        castedGetter.__zurg_memoized = await getter();
    }
    return castedGetter.__zurg_memoized;
}
",
                    "name": "lazy.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { getObjectUtils } from \\"../object\\";
import { getObjectLikeUtils, OBJECT_LIKE_BRAND } from \\"../object-like\\";
import { BaseObjectSchema, ObjectSchema } from \\"../object/types\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { constructLazyBaseSchema, getMemoizedSchema, SchemaGetter } from \\"./lazy\\";

export function lazyObject<Raw, Parsed>(getter: SchemaGetter<ObjectSchema<Raw, Parsed>>): ObjectSchema<Raw, Parsed> {
    const baseSchema: BaseObjectSchema<Raw, Parsed> = {
        ...OBJECT_LIKE_BRAND,
        ...constructLazyBaseSchema(getter),
        _getRawProperties: async () => (await getMemoizedSchema(getter))._getRawProperties(),
        _getParsedProperties: async () => (await getMemoizedSchema(getter))._getParsedProperties(),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}
",
                    "name": "lazyObject.ts",
                    "type": "file",
                  },
                ],
                "name": "lazy",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { list } from \\"./list\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function list<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Parsed[]> {
    const baseSchema: BaseSchema<Raw[], Parsed[]> = {
        parse: (raw, opts) => Promise.all(raw.map((item) => schema.parse(item, opts))),
        json: (parsed, opts) => Promise.all(parsed.map((item) => schema.json(item, opts))),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "list.ts",
                    "type": "file",
                  },
                ],
                "name": "list",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { stringLiteral } from \\"./stringLiteral\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
import { createIdentitySchemaCreator } from \\"../identity\\";

export function stringLiteral<V extends string>(_value: V): Schema<V, V> {
    return createIdentitySchemaCreator<V>()();
}
",
                    "name": "stringLiteral.ts",
                    "type": "file",
                  },
                ],
                "name": "literals",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { getObjectUtils, object } from \\"./object\\";
export { isProperty, property, type Property } from \\"./property\\";
export {
    type BaseObjectSchema,
    type inferObjectSchemaFromPropertySchemas,
    type inferParsedObject,
    type inferParsedObjectFromPropertySchemas,
    type inferParsedPropertySchema,
    type inferRawKey,
    type inferRawObject,
    type inferRawObjectFromPropertySchemas,
    type inferRawPropertySchema,
    type ObjectSchema,
    type ObjectUtils,
    type PropertySchemas,
} from \\"./types\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";
import { entries } from \\"../../utils/entries\\";
import { filterObject } from \\"../../utils/filterObject\\";
import { keys } from \\"../../utils/keys\\";
import { partition } from \\"../../utils/partition\\";
import { getObjectLikeUtils, OBJECT_LIKE_BRAND } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { isProperty } from \\"./property\\";
import {
    BaseObjectSchema,
    inferObjectSchemaFromPropertySchemas,
    inferParsedObjectFromPropertySchemas,
    inferRawObjectFromPropertySchemas,
    ObjectSchema,
    ObjectUtils,
    PropertySchemas,
} from \\"./types\\";

interface ObjectPropertyWithRawKey {
    rawKey: string;
    parsedKey: string | number | symbol;
    valueSchema: Schema<any, any>;
}

export function object<ParsedKeys extends string, T extends PropertySchemas<ParsedKeys>>(
    schemas: T
): inferObjectSchemaFromPropertySchemas<T> {
    const baseSchema: BaseObjectSchema<
        inferRawObjectFromPropertySchemas<T>,
        inferParsedObjectFromPropertySchemas<T>
    > = {
        ...OBJECT_LIKE_BRAND,
        _getRawProperties: () =>
            Promise.resolve(
                Object.entries(schemas).map(([parsedKey, propertySchema]) =>
                    isProperty(propertySchema) ? propertySchema.rawKey : parsedKey
                ) as unknown as (keyof inferRawObjectFromPropertySchemas<T>)[]
            ),
        _getParsedProperties: () =>
            Promise.resolve(keys(schemas) as unknown as (keyof inferParsedObjectFromPropertySchemas<T>)[]),

        parse: async (raw, { skipUnknownKeysOnParse = false } = {}) => {
            const rawKeyToProperty: Record<string, ObjectPropertyWithRawKey> = {};

            for (const [parsedKey, schemaOrObjectProperty] of entries(schemas)) {
                const rawKey = isProperty(schemaOrObjectProperty) ? schemaOrObjectProperty.rawKey : parsedKey;

                const property: ObjectPropertyWithRawKey = {
                    rawKey,
                    parsedKey,
                    valueSchema: isProperty(schemaOrObjectProperty)
                        ? schemaOrObjectProperty.valueSchema
                        : schemaOrObjectProperty,
                };

                rawKeyToProperty[rawKey] = property;
            }

            const parsed: Record<string | number | symbol, any> = {};

            for (const [rawKey, rawPropertyValue] of Object.entries(raw)) {
                const property = rawKeyToProperty[rawKey];

                if (property != null) {
                    const value = await property.valueSchema.parse(rawPropertyValue);
                    parsed[property.parsedKey] = value;
                } else if (!skipUnknownKeysOnParse) {
                    parsed[rawKey] = rawPropertyValue;
                }
            }

            return parsed as inferParsedObjectFromPropertySchemas<T>;
        },

        json: async (parsed, { includeUnknownKeysOnJson = false } = {}) => {
            const raw: Record<string | number | symbol, any> = {};

            for (const [parsedKey, parsedPropertyValue] of entries(parsed)) {
                const schemaOrObjectProperty = schemas[parsedKey as keyof T];
                // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
                if (schemaOrObjectProperty != null) {
                    if (isProperty(schemaOrObjectProperty)) {
                        const value = await schemaOrObjectProperty.valueSchema.json(parsedPropertyValue);
                        raw[schemaOrObjectProperty.rawKey] = value;
                    } else {
                        const value = await schemaOrObjectProperty.json(parsedPropertyValue);
                        raw[parsedKey] = value;
                    }
                } else if (includeUnknownKeysOnJson) {
                    raw[parsedKey] = parsedPropertyValue;
                }
            }

            return raw as inferRawObjectFromPropertySchemas<T>;
        },
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
        ...getObjectUtils(baseSchema),
    };
}

export function getObjectUtils<Raw, Parsed>(schema: BaseObjectSchema<Raw, Parsed>): ObjectUtils<Raw, Parsed> {
    return {
        extend: <RawExtension, ParsedExtension>(extension: ObjectSchema<RawExtension, ParsedExtension>) => {
            const baseSchema: BaseObjectSchema<Raw & RawExtension, Parsed & ParsedExtension> = {
                ...OBJECT_LIKE_BRAND,
                _getParsedProperties: async () => [
                    ...(await schema._getParsedProperties()),
                    ...(await extension._getParsedProperties()),
                ],
                _getRawProperties: async () => [
                    ...(await schema._getRawProperties()),
                    ...(await extension._getRawProperties()),
                ],
                parse: async (raw, opts) => {
                    const rawExtensionPropertiesSet = new Set(await extension._getRawProperties());
                    const [extensionProperties, otherProperties] = partition(keys(raw), (key) =>
                        rawExtensionPropertiesSet.has(key as keyof RawExtension)
                    );
                    return {
                        ...(await schema.parse(filterObject(raw, otherProperties), opts)),
                        ...(await extension.parse(filterObject(raw, extensionProperties), opts)),
                    };
                },
                json: async (parsed, opts) => {
                    const parsedExtensionPropertiesSet = new Set(await extension._getParsedProperties());
                    const [extensionProperties, otherProperties] = partition(keys(parsed), (key) =>
                        parsedExtensionPropertiesSet.has(key as keyof ParsedExtension)
                    );
                    return {
                        ...(await schema.json(filterObject(parsed, otherProperties), opts)),
                        ...(await extension.json(filterObject(parsed, extensionProperties), opts)),
                    };
                },
            };

            return {
                ...baseSchema,
                ...getSchemaUtils(baseSchema),
                ...getObjectLikeUtils(baseSchema),
                ...getObjectUtils(baseSchema),
            };
        },
    };
}
",
                    "name": "object.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";

export function property<RawKey extends string, RawValue, ParsedValue>(
    rawKey: RawKey,
    valueSchema: Schema<RawValue, ParsedValue>
): Property<RawKey, RawValue, ParsedValue> {
    return {
        rawKey,
        valueSchema,
        isProperty: true,
    };
}

export interface Property<RawKey extends string, RawValue, ParsedValue> {
    rawKey: RawKey;
    valueSchema: Schema<RawValue, ParsedValue>;
    isProperty: true;
}

export function isProperty<O extends Property<any, any, any>>(maybeProperty: unknown): maybeProperty is O {
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    return (maybeProperty as O).isProperty;
}
",
                    "name": "property.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { inferParsed, inferRaw, Schema } from \\"../../Schema\\";
import { addQuestionMarksToNullableProperties } from \\"../../utils/addQuestionMarksToNullableProperties\\";
import { BaseObjectLikeSchema, ObjectLikeSchema } from \\"../object-like\\";
import { Property } from \\"./property\\";

export type ObjectSchema<Raw, Parsed> = BaseObjectSchema<Raw, Parsed> &
    ObjectLikeSchema<Raw, Parsed> &
    ObjectUtils<Raw, Parsed>;

export interface BaseObjectSchema<Raw, Parsed> extends BaseObjectLikeSchema<Raw, Parsed> {
    _getRawProperties: () => Promise<(keyof Raw)[]>;
    _getParsedProperties: () => Promise<(keyof Parsed)[]>;
}

export interface ObjectUtils<Raw, Parsed> {
    extend: <RawExtension, ParsedExtension>(
        schemas: ObjectSchema<RawExtension, ParsedExtension>
    ) => ObjectSchema<Raw & RawExtension, Parsed & ParsedExtension>;
}

export type inferRawObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<infer Raw, any> ? Raw : never;

export type inferParsedObject<O extends ObjectSchema<any, any>> = O extends ObjectSchema<any, infer Parsed>
    ? Parsed
    : never;

export type inferObjectSchemaFromPropertySchemas<T extends PropertySchemas<keyof T>> = ObjectSchema<
    inferRawObjectFromPropertySchemas<T>,
    inferParsedObjectFromPropertySchemas<T>
>;

export type inferRawObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> =
    addQuestionMarksToNullableProperties<{
        [ParsedKey in keyof T as inferRawKey<ParsedKey, T[ParsedKey]>]: inferRawPropertySchema<T[ParsedKey]>;
    }>;

export type inferParsedObjectFromPropertySchemas<T extends PropertySchemas<keyof T>> =
    addQuestionMarksToNullableProperties<{
        [K in keyof T]: inferParsedPropertySchema<T[K]>;
    }>;

export type PropertySchemas<ParsedKeys extends string | number | symbol> = Record<
    ParsedKeys,
    Property<any, any, any> | Schema<any, any>
>;

export type inferRawPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<
    any,
    infer Raw,
    any
>
    ? Raw
    : P extends Schema<any, any>
    ? inferRaw<P>
    : never;

export type inferParsedPropertySchema<P extends Property<any, any, any> | Schema<any, any>> = P extends Property<
    any,
    any,
    infer Parsed
>
    ? Parsed
    : P extends Schema<any, any>
    ? inferParsed<P>
    : never;

export type inferRawKey<
    ParsedKey extends string | number | symbol,
    P extends Property<any, any, any> | Schema<any, any>
> = P extends Property<infer Raw, any, any> ? Raw : ParsedKey;
",
                    "name": "types.ts",
                    "type": "file",
                  },
                ],
                "name": "object",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { getSchemaUtils } from \\"../schema-utils\\";
import { BaseObjectLikeSchema, ObjectLikeSchema, ObjectLikeUtils, OBJECT_LIKE_BRAND } from \\"./types\\";

export function getObjectLikeUtils<Raw, Parsed>(
    schema: BaseObjectLikeSchema<Raw, Parsed>
): ObjectLikeUtils<Raw, Parsed> {
    return {
        withProperties: (properties) => withProperties(schema, properties),
    };
}

/**
 * object-like utils are defined in one file to resolve issues with circular imports
 */

export function withProperties<RawObjectShape, ParsedObjectShape, Properties>(
    objectLike: BaseObjectLikeSchema<RawObjectShape, ParsedObjectShape>,
    properties: { [K in keyof Properties]: Properties[K] | ((parsed: ParsedObjectShape) => Properties[K]) }
): ObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties> {
    const objectSchema: BaseObjectLikeSchema<RawObjectShape, ParsedObjectShape & Properties> = {
        ...OBJECT_LIKE_BRAND,
        parse: async (raw, opts) => {
            const parsedObject = await objectLike.parse(raw, opts);
            const additionalProperties = Object.entries(properties).reduce<Record<string, any>>(
                (processed, [key, value]) => {
                    return {
                        ...processed,
                        [key]: typeof value === \\"function\\" ? value(parsedObject) : value,
                    };
                },
                {}
            );

            return {
                ...parsedObject,
                ...(additionalProperties as Properties),
            };
        },
        json: (parsed, opts) => {
            // strip out added properties
            const addedPropertyKeys = new Set(Object.keys(properties));
            const parsedWithoutAddedProperties = Object.entries(parsed).reduce<Record<string, any>>(
                (filtered, [key, value]) => {
                    if (!addedPropertyKeys.has(key)) {
                        filtered[key] = value;
                    }
                    return filtered;
                },
                {}
            );

            return objectLike.json(parsedWithoutAddedProperties as ParsedObjectShape, opts);
        },
    };

    return {
        ...objectSchema,
        ...getSchemaUtils(objectSchema),
        ...getObjectLikeUtils(objectSchema),
    };
}
",
                    "name": "getObjectLikeUtils.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getObjectLikeUtils, withProperties } from \\"./getObjectLikeUtils\\";
export { OBJECT_LIKE_BRAND, type BaseObjectLikeSchema, type ObjectLikeSchema, type ObjectLikeUtils } from \\"./types\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";

export type ObjectLikeSchema<Raw, Parsed> = Schema<Raw, Parsed> &
    BaseObjectLikeSchema<Raw, Parsed> &
    ObjectLikeUtils<Raw, Parsed>;

export type BaseObjectLikeSchema<Raw, Parsed> = BaseSchema<Raw, Parsed> & {
    _objectLike: void;
};

export interface ObjectLikeUtils<Raw, Parsed> {
    withProperties: <T extends {}>(properties: {
        [K in keyof T]: T[K] | ((parsed: Parsed) => T[K]);
    }) => ObjectLikeSchema<Raw, Parsed & T>;
}

export const OBJECT_LIKE_BRAND = undefined as unknown as { _objectLike: void };
",
                    "name": "types.ts",
                    "type": "file",
                  },
                ],
                "name": "object-like",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";

export const any = createIdentitySchemaCreator<any>();
",
                    "name": "any.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";

export const boolean = createIdentitySchemaCreator<boolean>();
",
                    "name": "boolean.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { any } from \\"./any\\";
export { boolean } from \\"./boolean\\";
export { number } from \\"./number\\";
export { string } from \\"./string\\";
export { unknown } from \\"./unknown\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";

export const number = createIdentitySchemaCreator<number>();
",
                    "name": "number.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";

export const string = createIdentitySchemaCreator<string>();
",
                    "name": "string.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { createIdentitySchemaCreator } from \\"../identity\\";

export const unknown = createIdentitySchemaCreator<unknown>();
",
                    "name": "unknown.ts",
                    "type": "file",
                  },
                ],
                "name": "primitives",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { record } from \\"./record\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { entries } from \\"../../utils/entries\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function record<RawKey extends string | number, ParsedKey extends string | number, RawValue, ParsedValue>(
    keySchema: Schema<RawKey, ParsedKey>,
    valueSchema: Schema<RawValue, ParsedValue>
): Schema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>> {
    const baseSchema: BaseSchema<Record<RawKey, RawValue>, Record<ParsedKey, ParsedValue>> = {
        parse: (raw, opts) => {
            return entries(raw).reduce(async (parsedPromise, [key, value]) => {
                const parsed: Record<ParsedKey, ParsedValue> = await parsedPromise;
                const parsedKey = await keySchema.parse(key, opts);
                parsed[parsedKey] = await valueSchema.parse(value, opts);
                return parsedPromise;
            }, Promise.resolve({} as Record<ParsedKey, ParsedValue>));
        },
        json: (parsed, opts) => {
            return entries(parsed).reduce(async (rawPromise, [key, value]) => {
                const raw: Record<RawKey, RawValue> = await rawPromise;
                const rawKey = await keySchema.json(key, opts);
                raw[rawKey] = await valueSchema.json(value, opts);
                return rawPromise;
            }, Promise.resolve({} as Record<RawKey, RawValue>));
        },
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "record.ts",
                    "type": "file",
                  },
                ],
                "name": "record",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { OptionalSchema, OPTIONAL_BRAND } from \\"./types\\";

export interface SchemaUtils<Raw, Parsed> {
    optional: () => OptionalSchema<Raw, Parsed>;
    transform: <PostTransform>(transformer: BaseSchema<Parsed, PostTransform>) => Schema<Raw, PostTransform>;
}

export function getSchemaUtils<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): SchemaUtils<Raw, Parsed> {
    return {
        optional: () => optional(schema),
        transform: (transformer) => transform(schema, transformer),
    };
}

/**
 * schema utils are defined in one file to resolve issues with circular imports
 */

export function optional<Raw, Parsed>(schema: BaseSchema<Raw, Parsed>): OptionalSchema<Raw, Parsed> {
    const baseSchema: BaseSchema<Raw | null | undefined, Parsed | undefined> = {
        parse: (raw, opts) => (raw != null ? schema.parse(raw, opts) : undefined),
        json: (parsed, opts) => (parsed != null ? schema.json(parsed, opts) : null),
    };

    return {
        ...OPTIONAL_BRAND,
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}

export function transform<PreTransformRaw, PreTransformParsed, PostTransform>(
    schema: BaseSchema<PreTransformRaw, PreTransformParsed>,
    transformer: BaseSchema<PreTransformParsed, PostTransform>
): Schema<PreTransformRaw, PostTransform> {
    const baseSchema: BaseSchema<PreTransformRaw, PostTransform> = {
        parse: async (raw, opts) => {
            const postTransformParsed = await schema.parse(raw, opts);
            return transformer.parse(postTransformParsed, opts);
        },
        json: async (parsed, opts) => {
            const preTransformParsed = await transformer.json(parsed, opts);
            return schema.json(preTransformParsed, opts);
        },
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "getSchemaUtils.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { getSchemaUtils, optional, transform, type SchemaUtils } from \\"./getSchemaUtils\\";
export { OPTIONAL_BRAND, type OptionalSchema } from \\"./types\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { Schema } from \\"../../Schema\\";

export const OPTIONAL_BRAND = undefined as unknown as { _isOptional: void };

export type OptionalSchema<Raw, Parsed> = Schema<Raw | null | undefined, Parsed | undefined> & {
    _isOptional: void;
};
",
                    "name": "types.ts",
                    "type": "file",
                  },
                ],
                "name": "schema-utils",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export { set } from \\"./set\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseSchema, Schema } from \\"../../Schema\\";
import { getSchemaUtils } from \\"../schema-utils\\";

export function set<Raw, Parsed>(schema: Schema<Raw, Parsed>): Schema<Raw[], Set<Parsed>> {
    const baseSchema: BaseSchema<Raw[], Set<Parsed>> = {
        parse: async (raw, opts) => new Set(await Promise.all(raw.map((item) => schema.parse(item, opts)))),
        json: (parsed, opts) => Promise.all([...parsed].map((item) => schema.json(item, opts))),
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
    };
}
",
                    "name": "set.ts",
                    "type": "file",
                  },
                ],
                "name": "set",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export function discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string>(
    parsedDiscriminant: ParsedDiscriminant,
    rawDiscriminant: RawDiscriminant
): Discriminant<RawDiscriminant, ParsedDiscriminant> {
    return {
        parsedDiscriminant,
        rawDiscriminant,
    };
}

export interface Discriminant<RawDiscriminant extends string, ParsedDiscriminant extends string> {
    parsedDiscriminant: ParsedDiscriminant;
    rawDiscriminant: RawDiscriminant;
}
",
                    "name": "discriminant.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export { discriminant, type Discriminant } from \\"./discriminant\\";
export {
    type inferParsedDiscriminant,
    type inferParsedUnion,
    type inferRawDiscriminant,
    type inferRawUnion,
    type UnionSubtypes,
} from \\"./types\\";
export { union } from \\"./union\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { inferParsedObject, inferRawObject, ObjectSchema } from \\"../object\\";
import { Discriminant } from \\"./discriminant\\";

export type UnionSubtypes<DiscriminantValues extends string | number | symbol> = {
    [K in DiscriminantValues]: ObjectSchema<any, any>;
};

export type inferRawUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferRawDiscriminant<D>, K> & inferRawObject<U[K]>;
}[keyof U];

export type inferParsedUnion<D extends string | Discriminant<any, any>, U extends UnionSubtypes<keyof U>> = {
    [K in keyof U]: Record<inferParsedDiscriminant<D>, K> & inferParsedObject<U[K]>;
}[keyof U];

export type inferRawDiscriminant<D extends string | Discriminant<any, any>> = D extends string
    ? D
    : D extends Discriminant<infer Raw, any>
    ? Raw
    : never;

export type inferParsedDiscriminant<D extends string | Discriminant<any, any>> = D extends string
    ? D
    : D extends Discriminant<any, infer Parsed>
    ? Parsed
    : never;
",
                    "name": "types.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "import { BaseObjectLikeSchema, getObjectLikeUtils, ObjectLikeSchema, OBJECT_LIKE_BRAND } from \\"../object-like\\";
import { getSchemaUtils } from \\"../schema-utils\\";
import { Discriminant } from \\"./discriminant\\";
import { inferParsedDiscriminant, inferParsedUnion, inferRawDiscriminant, inferRawUnion, UnionSubtypes } from \\"./types\\";

export function union<D extends string | Discriminant<any, any>, U extends UnionSubtypes<any>>(
    discriminant: D,
    union: U
): ObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> {
    const rawDiscriminant =
        typeof discriminant === \\"string\\" ? discriminant : (discriminant.rawDiscriminant as inferRawDiscriminant<D>);
    const parsedDiscriminant =
        typeof discriminant === \\"string\\"
            ? discriminant
            : (discriminant.parsedDiscriminant as inferParsedDiscriminant<D>);

    const baseSchema: BaseObjectLikeSchema<inferRawUnion<D, U>, inferParsedUnion<D, U>> = {
        ...OBJECT_LIKE_BRAND,

        parse: async (raw, opts) => {
            const { [rawDiscriminant]: discriminantValue, ...additionalProperties } = raw;
            const additionalPropertySchemas = union[discriminantValue];

            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (additionalPropertySchemas == null) {
                return {
                    ...additionalProperties,
                    [parsedDiscriminant]: discriminantValue,
                } as inferParsedUnion<D, U>;
            }

            return {
                ...(await additionalPropertySchemas.parse(additionalProperties, opts)),
                [parsedDiscriminant]: discriminantValue,
            } as inferParsedUnion<D, U>;
        },

        json: async (parsed, opts) => {
            const { [parsedDiscriminant]: discriminantValue, ...additionalProperties } = parsed;
            const additionalPropertySchemas = union[discriminantValue];

            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            if (additionalPropertySchemas == null) {
                return {
                    ...additionalProperties,
                    [rawDiscriminant]: discriminantValue,
                } as unknown as inferRawUnion<D, U>;
            }

            return {
                ...(await additionalPropertySchemas.json(additionalProperties, opts)),
                [rawDiscriminant]: discriminantValue,
            } as inferRawUnion<D, U>;
        },
    };

    return {
        ...baseSchema,
        ...getSchemaUtils(baseSchema),
        ...getObjectLikeUtils(baseSchema),
    };
}
",
                    "name": "union.ts",
                    "type": "file",
                  },
                ],
                "name": "union",
                "type": "directory",
              },
            ],
            "name": "builders",
            "type": "directory",
          },
          Object {
            "contents": "export * from \\"./builders\\";
export { type inferParsed, type inferRaw, type Schema, type SchemaOptions } from \\"./Schema\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export type addQuestionMarksToNullableProperties<T> = {
    [K in OptionalKeys<T>]?: T[K];
} & Pick<T, RequiredKeys<T>>;

export type OptionalKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? K : null extends T[K] ? K : never;
}[keyof T];

export type RequiredKeys<T> = {
    [K in keyof T]: undefined extends T[K] ? never : null extends T[K] ? never : K;
}[keyof T];
",
                "name": "addQuestionMarksToNullableProperties.ts",
                "type": "file",
              },
              Object {
                "contents": "export function entries<T>(object: T): [keyof T, T[keyof T]][] {
    return Object.entries(object) as [keyof T, T[keyof T]][];
}
",
                "name": "entries.ts",
                "type": "file",
              },
              Object {
                "contents": "export function filterObject<T, K extends keyof T>(obj: T, keysToInclude: K[]): Pick<T, K> {
    const keysToIncludeSet = new Set(keysToInclude);
    return Object.entries(obj).reduce((acc, [key, value]) => {
        if (keysToIncludeSet.has(key as K)) {
            acc[key as K] = value;
        }
        return acc;
        // eslint-disable-next-line @typescript-eslint/prefer-reduce-type-parameter
    }, {} as Pick<T, K>);
}
",
                "name": "filterObject.ts",
                "type": "file",
              },
              Object {
                "contents": "export function keys<T>(object: T): (keyof T)[] {
    return Object.keys(object) as (keyof T)[];
}
",
                "name": "keys.ts",
                "type": "file",
              },
              Object {
                "contents": "export function partition<T>(items: readonly T[], predicate: (item: T) => boolean): [T[], T[]] {
    const trueItems: T[] = [],
        falseItems: T[] = [];
    for (const item of items) {
        if (predicate(item)) {
            trueItems.push(item);
        } else {
            falseItems.push(item);
        }
    }
    return [trueItems, falseItems];
}
",
                "name": "partition.ts",
                "type": "file",
              },
            ],
            "name": "utils",
            "type": "directory",
          },
        ],
        "name": "schemas",
        "type": "directory",
      },
    ],
    "name": "core",
    "type": "directory",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";

export abstract class TraceApiError extends Error {
    constructor() {
        super();
        Object.setPrototypeOf(this, TraceApiError.prototype);
    }

    public abstract send(res: express.Response): void;
}
",
        "name": "TraceApiError.ts",
        "type": "file",
      },
      Object {
        "contents": "export { TraceApiError } from \\"./TraceApiError\\";
",
        "name": "index.ts",
        "type": "file",
      },
    ],
    "name": "errors",
    "type": "directory",
  },
  Object {
    "contents": "export * as TraceApi from \\"./api\\";
export { register } from \\"./register\\";
export { TraceApiError } from \\"./errors\\";
",
    "name": "index.ts",
    "type": "file",
  },
  Object {
    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import express from \\"express\\";
import { AbstractAdminService } from \\"./api/resources/admin/service/AbstractAdminService\\";
import { AbstractHomepageService } from \\"./api/resources/homepage/service/AbstractHomepageService\\";
import { AbstractMigrationService } from \\"./api/resources/migration/service/AbstractMigrationService\\";
import { AbstractPlaylistService } from \\"./api/resources/playlist/service/AbstractPlaylistService\\";
import { AbstractProblemService } from \\"./api/resources/problem/service/AbstractProblemService\\";
import { AbstractSubmissionService } from \\"./api/resources/submission/service/AbstractSubmissionService\\";
import { AbstractSyspropService } from \\"./api/resources/sysprop/service/AbstractSyspropService\\";
import { AbstractProblemService as v2_AbstractProblemService } from \\"./api/resources/v2/resources/problem/service/AbstractProblemService\\";
import { AbstractProblemService as v2_v3_AbstractProblemService } from \\"./api/resources/v2/resources/v3/resources/problem/service/AbstractProblemService\\";

export function register(expressApp: express.Express, services: {
    admin: AbstractAdminService;
    homepage: AbstractHomepageService;
    migration: AbstractMigrationService;
    playlist: AbstractPlaylistService;
    problem: AbstractProblemService;
    submission: AbstractSubmissionService;
    sysprop: AbstractSyspropService;
    v2: {
        problem: v2_AbstractProblemService;
        v3: {
            problem: v2_v3_AbstractProblemService;
        };
    };
}): void {
    expressApp.use(\\"/admin\\", services.admin.toRouter());
    expressApp.use(\\"/homepage-problems\\", services.homepage.toRouter());
    expressApp.use(\\"/migration-info\\", services.migration.toRouter());
    expressApp.use(\\"/v2/playlist/:serviceParam\\", services.playlist.toRouter());
    expressApp.use(\\"/problem-crud\\", services.problem.toRouter());
    expressApp.use(\\"/sessions\\", services.submission.toRouter());
    expressApp.use(\\"/sysprop\\", services.sysprop.toRouter());
    expressApp.use(\\"/problems-v2\\", services.v2.problem.toRouter());
    expressApp.use(\\"/problems-v2\\", services.v2.v3.problem.toRouter());
}
",
    "name": "register.ts",
    "type": "file",
  },
  Object {
    "contents": Array [
      Object {
        "contents": "export * from \\"./resources\\";
",
        "name": "index.ts",
        "type": "file",
      },
      Object {
        "contents": Array [
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * from \\"./requests\\";
export * as storeTracedTestCaseV2 from \\"./storeTracedTestCaseV2\\";
export * as storeTracedWorkspaceV2 from \\"./storeTracedWorkspaceV2\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../..\\";
import { TraceApi } from \\"../../../../..\\";
import * as core from \\"../../../../../core\\";

export const StoreTracedTestCaseRequest: core.serialization.Schema<serializers.StoreTracedTestCaseRequest.Raw, TraceApi.StoreTracedTestCaseRequest> = core.serialization.object({
    result: core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).TestCaseResultWithStdout),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).TraceResponse))
});

export declare namespace StoreTracedTestCaseRequest {
    interface Raw {
        \\"result\\": serializers.TestCaseResultWithStdout.Raw;
        \\"traceResponses\\": serializers.TraceResponse.Raw[];
    }
}
",
                        "name": "StoreTracedTestCaseRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../..\\";
import { TraceApi } from \\"../../../../..\\";
import * as core from \\"../../../../../core\\";

export const StoreTracedWorkspaceRequest: core.serialization.Schema<serializers.StoreTracedWorkspaceRequest.Raw, TraceApi.StoreTracedWorkspaceRequest> = core.serialization.object({
    workspaceRunDetails: core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).WorkspaceRunDetails),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).TraceResponse))
});

export declare namespace StoreTracedWorkspaceRequest {
    interface Raw {
        \\"workspaceRunDetails\\": serializers.WorkspaceRunDetails.Raw;
        \\"traceResponses\\": serializers.TraceResponse.Raw[];
    }
}
",
                        "name": "StoreTracedWorkspaceRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { StoreTracedTestCaseRequest } from \\"./StoreTracedTestCaseRequest\\";
export { StoreTracedWorkspaceRequest } from \\"./StoreTracedWorkspaceRequest\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Request: core.serialization.Schema<serializers.admin.storeTracedTestCaseV2.Request.Raw, TraceApi.TraceResponseV2[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponseV2));

export declare namespace Request {
    type Raw = serializers.TraceResponseV2.Raw[];
}


",
                    "name": "storeTracedTestCaseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Request: core.serialization.Schema<serializers.admin.storeTracedWorkspaceV2.Request.Raw, TraceApi.TraceResponseV2[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponseV2));

export declare namespace Request {
    type Raw = serializers.TraceResponseV2.Raw[];
}


",
                    "name": "storeTracedWorkspaceV2.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "admin",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const BinaryTreeNodeAndTreeValue: core.serialization.ObjectSchema<serializers.BinaryTreeNodeAndTreeValue.Raw, TraceApi.BinaryTreeNodeAndTreeValue> = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    fullTree: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeValue)
});

export declare namespace BinaryTreeNodeAndTreeValue {
    interface Raw {
        \\"nodeId\\": serializers.NodeId.Raw;
        \\"fullTree\\": serializers.BinaryTreeValue.Raw;
    }
}
",
                    "name": "BinaryTreeNodeAndTreeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const BinaryTreeNodeValue: core.serialization.ObjectSchema<serializers.BinaryTreeNodeValue.Raw, TraceApi.BinaryTreeNodeValue> = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    val: core.serialization.number(),
    right: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    left: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional()
});

export declare namespace BinaryTreeNodeValue {
    interface Raw {
        \\"nodeId\\": serializers.NodeId.Raw;
        \\"val\\": number;
        \\"right\\"?: serializers.NodeId.Raw | null;
        \\"left\\"?: serializers.NodeId.Raw | null;
    }
}
",
                    "name": "BinaryTreeNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const BinaryTreeValue: core.serialization.ObjectSchema<serializers.BinaryTreeValue.Raw, TraceApi.BinaryTreeValue> = core.serialization.object({
    root: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    nodes: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeNodeValue))
});

export declare namespace BinaryTreeValue {
    interface Raw {
        \\"root\\"?: serializers.NodeId.Raw | null;
        \\"nodes\\": Record<serializers.NodeId.Raw, serializers.BinaryTreeNodeValue.Raw>;
    }
}
",
                    "name": "BinaryTreeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Date: core.serialization.Schema<serializers.Date.Raw, TraceApi.Date> = core.serialization.string();

export declare namespace Date {
    type Raw = string;
}
",
                    "name": "Date.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DebugKeyValuePairs: core.serialization.ObjectSchema<serializers.DebugKeyValuePairs.Raw, TraceApi.DebugKeyValuePairs> = core.serialization.object({
    key: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue),
    value: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue)
});

export declare namespace DebugKeyValuePairs {
    interface Raw {
        \\"key\\": serializers.DebugVariableValue.Raw;
        \\"value\\": serializers.DebugVariableValue.Raw;
    }
}
",
                    "name": "DebugKeyValuePairs.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DebugMapValue: core.serialization.ObjectSchema<serializers.DebugMapValue.Raw, TraceApi.DebugMapValue> = core.serialization.object({
    keyValuePairs: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DebugKeyValuePairs))
});

export declare namespace DebugMapValue {
    interface Raw {
        \\"keyValuePairs\\": serializers.DebugKeyValuePairs.Raw[];
    }
}
",
                    "name": "DebugMapValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DebugVariableValue: core.serialization.Schema<serializers.DebugVariableValue.Raw, TraceApi.DebugVariableValue> = core.serialization.union(\\"type\\", {
    integerValue: core.serialization.object({
        value: core.serialization.number()
    }),
    booleanValue: core.serialization.object({
        value: core.serialization.boolean()
    }),
    doubleValue: core.serialization.object({
        value: core.serialization.number()
    }),
    stringValue: core.serialization.object({
        value: core.serialization.string()
    }),
    charValue: core.serialization.object({
        value: core.serialization.string()
    }),
    mapValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DebugMapValue),
    listValue: core.serialization.object({
        value: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue))
    }),
    binaryTreeNodeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeNodeAndTreeValue),
    singlyLinkedListNodeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListNodeAndListValue),
    doublyLinkedListNodeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListNodeAndListValue),
    undefinedValue: core.serialization.object({}),
    nullValue: core.serialization.object({}),
    genericValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GenericValue)
}).transform<TraceApi.DebugVariableValue>({
    parse: value => {
        switch (value.type) {
            case \\"integerValue\\": return TraceApi.DebugVariableValue.integerValue(value.value);
            case \\"booleanValue\\": return TraceApi.DebugVariableValue.booleanValue(value.value);
            case \\"doubleValue\\": return TraceApi.DebugVariableValue.doubleValue(value.value);
            case \\"stringValue\\": return TraceApi.DebugVariableValue.stringValue(value.value);
            case \\"charValue\\": return TraceApi.DebugVariableValue.charValue(value.value);
            case \\"mapValue\\": return TraceApi.DebugVariableValue.mapValue(value);
            case \\"listValue\\": return TraceApi.DebugVariableValue.listValue(value.value);
            case \\"binaryTreeNodeValue\\": return TraceApi.DebugVariableValue.binaryTreeNodeValue(value);
            case \\"singlyLinkedListNodeValue\\": return TraceApi.DebugVariableValue.singlyLinkedListNodeValue(value);
            case \\"doublyLinkedListNodeValue\\": return TraceApi.DebugVariableValue.doublyLinkedListNodeValue(value);
            case \\"undefinedValue\\": return TraceApi.DebugVariableValue.undefinedValue();
            case \\"nullValue\\": return TraceApi.DebugVariableValue.nullValue();
            case \\"genericValue\\": return TraceApi.DebugVariableValue.genericValue(value);
            default: return TraceApi.DebugVariableValue._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace DebugVariableValue {
    type Raw = DebugVariableValue.IntegerValue | DebugVariableValue.BooleanValue | DebugVariableValue.DoubleValue | DebugVariableValue.StringValue | DebugVariableValue.CharValue | DebugVariableValue.MapValue | DebugVariableValue.ListValue | DebugVariableValue.BinaryTreeNodeValue | DebugVariableValue.SinglyLinkedListNodeValue | DebugVariableValue.DoublyLinkedListNodeValue | DebugVariableValue.UndefinedValue | DebugVariableValue.NullValue | DebugVariableValue.GenericValue;

    interface IntegerValue {
        \\"type\\": \\"integerValue\\";
        \\"value\\": number;
    }

    interface BooleanValue {
        \\"type\\": \\"booleanValue\\";
        \\"value\\": boolean;
    }

    interface DoubleValue {
        \\"type\\": \\"doubleValue\\";
        \\"value\\": number;
    }

    interface StringValue {
        \\"type\\": \\"stringValue\\";
        \\"value\\": string;
    }

    interface CharValue {
        \\"type\\": \\"charValue\\";
        \\"value\\": string;
    }

    interface MapValue extends serializers.DebugMapValue.Raw {
        \\"type\\": \\"mapValue\\";
    }

    interface ListValue {
        \\"type\\": \\"listValue\\";
        \\"value\\": serializers.DebugVariableValue.Raw[];
    }

    interface BinaryTreeNodeValue extends serializers.BinaryTreeNodeAndTreeValue.Raw {
        \\"type\\": \\"binaryTreeNodeValue\\";
    }

    interface SinglyLinkedListNodeValue extends serializers.SinglyLinkedListNodeAndListValue.Raw {
        \\"type\\": \\"singlyLinkedListNodeValue\\";
    }

    interface DoublyLinkedListNodeValue extends serializers.DoublyLinkedListNodeAndListValue.Raw {
        \\"type\\": \\"doublyLinkedListNodeValue\\";
    }

    interface UndefinedValue {
        \\"type\\": \\"undefinedValue\\";
    }

    interface NullValue {
        \\"type\\": \\"nullValue\\";
    }

    interface GenericValue extends serializers.GenericValue.Raw {
        \\"type\\": \\"genericValue\\";
    }
}
",
                    "name": "DebugVariableValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DoublyLinkedListNodeAndListValue: core.serialization.ObjectSchema<serializers.DoublyLinkedListNodeAndListValue.Raw, TraceApi.DoublyLinkedListNodeAndListValue> = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    fullList: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListValue)
});

export declare namespace DoublyLinkedListNodeAndListValue {
    interface Raw {
        \\"nodeId\\": serializers.NodeId.Raw;
        \\"fullList\\": serializers.DoublyLinkedListValue.Raw;
    }
}
",
                    "name": "DoublyLinkedListNodeAndListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DoublyLinkedListNodeValue: core.serialization.ObjectSchema<serializers.DoublyLinkedListNodeValue.Raw, TraceApi.DoublyLinkedListNodeValue> = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    val: core.serialization.number(),
    next: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    prev: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional()
});

export declare namespace DoublyLinkedListNodeValue {
    interface Raw {
        \\"nodeId\\": serializers.NodeId.Raw;
        \\"val\\": number;
        \\"next\\"?: serializers.NodeId.Raw | null;
        \\"prev\\"?: serializers.NodeId.Raw | null;
    }
}
",
                    "name": "DoublyLinkedListNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DoublyLinkedListValue: core.serialization.ObjectSchema<serializers.DoublyLinkedListValue.Raw, TraceApi.DoublyLinkedListValue> = core.serialization.object({
    head: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    nodes: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListNodeValue))
});

export declare namespace DoublyLinkedListValue {
    interface Raw {
        \\"head\\"?: serializers.NodeId.Raw | null;
        \\"nodes\\": Record<serializers.NodeId.Raw, serializers.DoublyLinkedListNodeValue.Raw>;
    }
}
",
                    "name": "DoublyLinkedListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const FileInfo: core.serialization.ObjectSchema<serializers.FileInfo.Raw, TraceApi.FileInfo> = core.serialization.object({
    filename: core.serialization.string(),
    contents: core.serialization.string()
});

export declare namespace FileInfo {
    interface Raw {
        \\"filename\\": string;
        \\"contents\\": string;
    }
}
",
                    "name": "FileInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GenericValue: core.serialization.ObjectSchema<serializers.GenericValue.Raw, TraceApi.GenericValue> = core.serialization.object({
    stringifiedType: core.serialization.string().optional(),
    stringifiedValue: core.serialization.string()
});

export declare namespace GenericValue {
    interface Raw {
        \\"stringifiedType\\"?: string | null;
        \\"stringifiedValue\\": string;
    }
}
",
                    "name": "GenericValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const KeyValuePair: core.serialization.ObjectSchema<serializers.KeyValuePair.Raw, TraceApi.KeyValuePair> = core.serialization.object({
    key: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
    value: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue)
});

export declare namespace KeyValuePair {
    interface Raw {
        \\"key\\": serializers.VariableValue.Raw;
        \\"value\\": serializers.VariableValue.Raw;
    }
}
",
                    "name": "KeyValuePair.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Language: core.serialization.Schema<serializers.Language.Raw, TraceApi.Language> = core.serialization.enum_([\\"JAVA\\", \\"JAVASCRIPT\\", \\"PYTHON\\"]);

export declare namespace Language {
    type Raw = \\"JAVA\\" | \\"JAVASCRIPT\\" | \\"PYTHON\\";
}
",
                    "name": "Language.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ListType: core.serialization.ObjectSchema<serializers.ListType.Raw, TraceApi.ListType> = core.serialization.object({
    valueType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    isFixedLength: core.serialization.boolean().optional()
});

export declare namespace ListType {
    interface Raw {
        \\"valueType\\": serializers.VariableType.Raw;
        \\"isFixedLength\\"?: boolean | null;
    }
}
",
                    "name": "ListType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const MapType: core.serialization.ObjectSchema<serializers.MapType.Raw, TraceApi.MapType> = core.serialization.object({
    keyType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    valueType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType)
});

export declare namespace MapType {
    interface Raw {
        \\"keyType\\": serializers.VariableType.Raw;
        \\"valueType\\": serializers.VariableType.Raw;
    }
}
",
                    "name": "MapType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const MapValue: core.serialization.ObjectSchema<serializers.MapValue.Raw, TraceApi.MapValue> = core.serialization.object({
    keyValuePairs: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).KeyValuePair))
});

export declare namespace MapValue {
    interface Raw {
        \\"keyValuePairs\\": serializers.KeyValuePair.Raw[];
    }
}
",
                    "name": "MapValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const NodeId: core.serialization.Schema<serializers.NodeId.Raw, TraceApi.NodeId> = core.serialization.string();

export declare namespace NodeId {
    type Raw = string;
}
",
                    "name": "NodeId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ProblemId: core.serialization.Schema<serializers.ProblemId.Raw, TraceApi.ProblemId> = core.serialization.string();

export declare namespace ProblemId {
    type Raw = string;
}
",
                    "name": "ProblemId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RandomUnknownType: core.serialization.Schema<serializers.RandomUnknownType.Raw, TraceApi.RandomUnknownType> = core.serialization.unknown();

export declare namespace RandomUnknownType {
    type Raw = unknown;
}
",
                    "name": "RandomUnknownType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SinglyLinkedListNodeAndListValue: core.serialization.ObjectSchema<serializers.SinglyLinkedListNodeAndListValue.Raw, TraceApi.SinglyLinkedListNodeAndListValue> = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    fullList: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListValue)
});

export declare namespace SinglyLinkedListNodeAndListValue {
    interface Raw {
        \\"nodeId\\": serializers.NodeId.Raw;
        \\"fullList\\": serializers.SinglyLinkedListValue.Raw;
    }
}
",
                    "name": "SinglyLinkedListNodeAndListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SinglyLinkedListNodeValue: core.serialization.ObjectSchema<serializers.SinglyLinkedListNodeValue.Raw, TraceApi.SinglyLinkedListNodeValue> = core.serialization.object({
    nodeId: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId),
    val: core.serialization.number(),
    next: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional()
});

export declare namespace SinglyLinkedListNodeValue {
    interface Raw {
        \\"nodeId\\": serializers.NodeId.Raw;
        \\"val\\": number;
        \\"next\\"?: serializers.NodeId.Raw | null;
    }
}
",
                    "name": "SinglyLinkedListNodeValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SinglyLinkedListValue: core.serialization.ObjectSchema<serializers.SinglyLinkedListValue.Raw, TraceApi.SinglyLinkedListValue> = core.serialization.object({
    head: core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId).optional(),
    nodes: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).NodeId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListNodeValue))
});

export declare namespace SinglyLinkedListValue {
    interface Raw {
        \\"head\\"?: serializers.NodeId.Raw | null;
        \\"nodes\\": Record<serializers.NodeId.Raw, serializers.SinglyLinkedListNodeValue.Raw>;
    }
}
",
                    "name": "SinglyLinkedListValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCase: core.serialization.ObjectSchema<serializers.TestCase.Raw, TraceApi.TestCase> = core.serialization.object({
    id: core.serialization.string(),
    params: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue))
});

export declare namespace TestCase {
    interface Raw {
        \\"id\\": string;
        \\"params\\": serializers.VariableValue.Raw[];
    }
}
",
                    "name": "TestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCaseWithExpectedResult: core.serialization.ObjectSchema<serializers.TestCaseWithExpectedResult.Raw, TraceApi.TestCaseWithExpectedResult> = core.serialization.object({
    testCase: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCase),
    expectedResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue)
});

export declare namespace TestCaseWithExpectedResult {
    interface Raw {
        \\"testCase\\": serializers.TestCase.Raw;
        \\"expectedResult\\": serializers.VariableValue.Raw;
    }
}
",
                    "name": "TestCaseWithExpectedResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const UserId: core.serialization.Schema<serializers.UserId.Raw, TraceApi.UserId> = core.serialization.string();

export declare namespace UserId {
    type Raw = string;
}
",
                    "name": "UserId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const VariableType: core.serialization.Schema<serializers.VariableType.Raw, TraceApi.VariableType> = core.serialization.union(\\"type\\", {
    integerType: core.serialization.object({}),
    doubleType: core.serialization.object({}),
    booleanType: core.serialization.object({}),
    stringType: core.serialization.object({}),
    charType: core.serialization.object({}),
    listType: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ListType),
    mapType: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MapType),
    binaryTreeType: core.serialization.object({}),
    singlyLinkedListType: core.serialization.object({}),
    doublyLinkedListType: core.serialization.object({})
}).transform<TraceApi.VariableType>({
    parse: value => {
        switch (value.type) {
            case \\"integerType\\": return TraceApi.VariableType.integerType();
            case \\"doubleType\\": return TraceApi.VariableType.doubleType();
            case \\"booleanType\\": return TraceApi.VariableType.booleanType();
            case \\"stringType\\": return TraceApi.VariableType.stringType();
            case \\"charType\\": return TraceApi.VariableType.charType();
            case \\"listType\\": return TraceApi.VariableType.listType(value);
            case \\"mapType\\": return TraceApi.VariableType.mapType(value);
            case \\"binaryTreeType\\": return TraceApi.VariableType.binaryTreeType();
            case \\"singlyLinkedListType\\": return TraceApi.VariableType.singlyLinkedListType();
            case \\"doublyLinkedListType\\": return TraceApi.VariableType.doublyLinkedListType();
            default: return TraceApi.VariableType._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace VariableType {
    type Raw = VariableType.IntegerType | VariableType.DoubleType | VariableType.BooleanType | VariableType.StringType | VariableType.CharType | VariableType.ListType | VariableType.MapType | VariableType.BinaryTreeType | VariableType.SinglyLinkedListType | VariableType.DoublyLinkedListType;

    interface IntegerType {
        \\"type\\": \\"integerType\\";
    }

    interface DoubleType {
        \\"type\\": \\"doubleType\\";
    }

    interface BooleanType {
        \\"type\\": \\"booleanType\\";
    }

    interface StringType {
        \\"type\\": \\"stringType\\";
    }

    interface CharType {
        \\"type\\": \\"charType\\";
    }

    interface ListType extends serializers.ListType.Raw {
        \\"type\\": \\"listType\\";
    }

    interface MapType extends serializers.MapType.Raw {
        \\"type\\": \\"mapType\\";
    }

    interface BinaryTreeType {
        \\"type\\": \\"binaryTreeType\\";
    }

    interface SinglyLinkedListType {
        \\"type\\": \\"singlyLinkedListType\\";
    }

    interface DoublyLinkedListType {
        \\"type\\": \\"doublyLinkedListType\\";
    }
}
",
                    "name": "VariableType.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const VariableValue: core.serialization.Schema<serializers.VariableValue.Raw, TraceApi.VariableValue> = core.serialization.union(\\"type\\", {
    integerValue: core.serialization.object({
        value: core.serialization.number()
    }),
    booleanValue: core.serialization.object({
        value: core.serialization.boolean()
    }),
    doubleValue: core.serialization.object({
        value: core.serialization.number()
    }),
    stringValue: core.serialization.object({
        value: core.serialization.string()
    }),
    charValue: core.serialization.object({
        value: core.serialization.string()
    }),
    mapValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).MapValue),
    listValue: core.serialization.object({
        value: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue))
    }),
    binaryTreeValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BinaryTreeValue),
    singlyLinkedListValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SinglyLinkedListValue),
    doublyLinkedListValue: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).DoublyLinkedListValue),
    nullValue: core.serialization.object({})
}).transform<TraceApi.VariableValue>({
    parse: value => {
        switch (value.type) {
            case \\"integerValue\\": return TraceApi.VariableValue.integerValue(value.value);
            case \\"booleanValue\\": return TraceApi.VariableValue.booleanValue(value.value);
            case \\"doubleValue\\": return TraceApi.VariableValue.doubleValue(value.value);
            case \\"stringValue\\": return TraceApi.VariableValue.stringValue(value.value);
            case \\"charValue\\": return TraceApi.VariableValue.charValue(value.value);
            case \\"mapValue\\": return TraceApi.VariableValue.mapValue(value);
            case \\"listValue\\": return TraceApi.VariableValue.listValue(value.value);
            case \\"binaryTreeValue\\": return TraceApi.VariableValue.binaryTreeValue(value);
            case \\"singlyLinkedListValue\\": return TraceApi.VariableValue.singlyLinkedListValue(value);
            case \\"doublyLinkedListValue\\": return TraceApi.VariableValue.doublyLinkedListValue(value);
            case \\"nullValue\\": return TraceApi.VariableValue.nullValue();
            default: return TraceApi.VariableValue._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace VariableValue {
    type Raw = VariableValue.IntegerValue | VariableValue.BooleanValue | VariableValue.DoubleValue | VariableValue.StringValue | VariableValue.CharValue | VariableValue.MapValue | VariableValue.ListValue | VariableValue.BinaryTreeValue | VariableValue.SinglyLinkedListValue | VariableValue.DoublyLinkedListValue | VariableValue.NullValue;

    interface IntegerValue {
        \\"type\\": \\"integerValue\\";
        \\"value\\": number;
    }

    interface BooleanValue {
        \\"type\\": \\"booleanValue\\";
        \\"value\\": boolean;
    }

    interface DoubleValue {
        \\"type\\": \\"doubleValue\\";
        \\"value\\": number;
    }

    interface StringValue {
        \\"type\\": \\"stringValue\\";
        \\"value\\": string;
    }

    interface CharValue {
        \\"type\\": \\"charValue\\";
        \\"value\\": string;
    }

    interface MapValue extends serializers.MapValue.Raw {
        \\"type\\": \\"mapValue\\";
    }

    interface ListValue {
        \\"type\\": \\"listValue\\";
        \\"value\\": serializers.VariableValue.Raw[];
    }

    interface BinaryTreeValue extends serializers.BinaryTreeValue.Raw {
        \\"type\\": \\"binaryTreeValue\\";
    }

    interface SinglyLinkedListValue extends serializers.SinglyLinkedListValue.Raw {
        \\"type\\": \\"singlyLinkedListValue\\";
    }

    interface DoublyLinkedListValue extends serializers.DoublyLinkedListValue.Raw {
        \\"type\\": \\"doublyLinkedListValue\\";
    }

    interface NullValue {
        \\"type\\": \\"nullValue\\";
    }
}
",
                    "name": "VariableValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./UserId\\";
export * from \\"./ProblemId\\";
export * from \\"./NodeId\\";
export * from \\"./VariableType\\";
export * from \\"./ListType\\";
export * from \\"./MapType\\";
export * from \\"./VariableValue\\";
export * from \\"./DebugVariableValue\\";
export * from \\"./GenericValue\\";
export * from \\"./MapValue\\";
export * from \\"./KeyValuePair\\";
export * from \\"./BinaryTreeValue\\";
export * from \\"./BinaryTreeNodeValue\\";
export * from \\"./BinaryTreeNodeAndTreeValue\\";
export * from \\"./SinglyLinkedListValue\\";
export * from \\"./SinglyLinkedListNodeValue\\";
export * from \\"./SinglyLinkedListNodeAndListValue\\";
export * from \\"./DoublyLinkedListValue\\";
export * from \\"./DoublyLinkedListNodeValue\\";
export * from \\"./DoublyLinkedListNodeAndListValue\\";
export * from \\"./DebugMapValue\\";
export * from \\"./DebugKeyValuePairs\\";
export * from \\"./TestCase\\";
export * from \\"./TestCaseWithExpectedResult\\";
export * from \\"./FileInfo\\";
export * from \\"./Language\\";
export * from \\"./RandomUnknownType\\";
export * from \\"./Date\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "commons",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Response: core.serialization.Schema<serializers.homepage.getHomepageProblems.Response.Raw, TraceApi.ProblemId[]> = core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId));

export declare namespace Response {
    type Raw = serializers.ProblemId.Raw[];
}
",
                    "name": "getHomepageProblems.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getHomepageProblems from \\"./getHomepageProblems\\";
export * as setHomepageProblems from \\"./setHomepageProblems\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Request: core.serialization.Schema<serializers.homepage.setHomepageProblems.Request.Raw, TraceApi.ProblemId[]> = core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId));

export declare namespace Request {
    type Raw = serializers.ProblemId.Raw[];
}


",
                    "name": "setHomepageProblems.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "homepage",
            "type": "directory",
          },
          Object {
            "contents": "export * as commons from \\"./commons\\";
export * from \\"./commons/types\\";
export * as langServer from \\"./langServer\\";
export * from \\"./langServer/types\\";
export * as migration from \\"./migration\\";
export * from \\"./migration/types\\";
export * as playlist from \\"./playlist\\";
export * from \\"./playlist/types\\";
export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as submission from \\"./submission\\";
export * from \\"./submission/types\\";
export * as v2 from \\"./v2\\";
export * as admin from \\"./admin\\";
export * from \\"./admin/service/requests\\";
export * from \\"./problem/service/requests\\";
export * as homepage from \\"./homepage\\";
export * as sysprop from \\"./sysprop\\";
",
            "name": "index.ts",
            "type": "file",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const LangServerRequest: core.serialization.ObjectSchema<serializers.LangServerRequest.Raw, TraceApi.LangServerRequest> = core.serialization.object({
    request: core.serialization.unknown()
});

export declare namespace LangServerRequest {
    interface Raw {
        \\"request\\"?: unknown;
    }
}
",
                    "name": "LangServerRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const LangServerResponse: core.serialization.ObjectSchema<serializers.LangServerResponse.Raw, TraceApi.LangServerResponse> = core.serialization.object({
    response: core.serialization.unknown()
});

export declare namespace LangServerResponse {
    interface Raw {
        \\"response\\"?: unknown;
    }
}
",
                    "name": "LangServerResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./LangServerRequest\\";
export * from \\"./LangServerResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "langServer",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Response: core.serialization.Schema<serializers.migration.getAttemptedMigrations.Response.Raw, TraceApi.Migration[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Migration));

export declare namespace Response {
    type Raw = serializers.Migration.Raw[];
}
",
                    "name": "getAttemptedMigrations.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getAttemptedMigrations from \\"./getAttemptedMigrations\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Migration: core.serialization.ObjectSchema<serializers.Migration.Raw, TraceApi.Migration> = core.serialization.object({
    name: core.serialization.string(),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).MigrationStatus)
});

export declare namespace Migration {
    interface Raw {
        \\"name\\": string;
        \\"status\\": serializers.MigrationStatus.Raw;
    }
}
",
                    "name": "Migration.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const MigrationStatus: core.serialization.Schema<serializers.MigrationStatus.Raw, TraceApi.MigrationStatus> = core.serialization.enum_([\\"RUNNING\\", \\"FAILED\\", \\"FINISHED\\"]);

export declare namespace MigrationStatus {
    type Raw = \\"RUNNING\\" | \\"FAILED\\" | \\"FINISHED\\";
}
",
                    "name": "MigrationStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./MigrationStatus\\";
export * from \\"./Migration\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "migration",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Response: core.serialization.Schema<serializers.playlist.getPlaylists.Response.Raw, TraceApi.Playlist[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Playlist));

export declare namespace Response {
    type Raw = serializers.Playlist.Raw[];
}
",
                    "name": "getPlaylists.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getPlaylists from \\"./getPlaylists\\";
export * as updatePlaylist from \\"./updatePlaylist\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Request: core.serialization.Schema<serializers.playlist.updatePlaylist.Request.Raw, TraceApi.UpdatePlaylistRequest | undefined> = core.serialization.lazyObject(async () => (await import(\\"../../..\\")).UpdatePlaylistRequest).optional();

export declare namespace Request {
    type Raw = serializers.UpdatePlaylistRequest.Raw | null | undefined;
}

export const Response: core.serialization.Schema<serializers.playlist.updatePlaylist.Response.Raw, TraceApi.Playlist | undefined> = core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Playlist).optional();

export declare namespace Response {
    type Raw = serializers.Playlist.Raw | null | undefined;
}
",
                    "name": "updatePlaylist.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Color: core.serialization.Schema<serializers.Color.Raw, TraceApi.Color> = core.serialization.enum_([\\"RED\\", \\"BLUE\\"]);

export declare namespace Color {
    type Raw = \\"RED\\" | \\"BLUE\\";
}
",
                    "name": "Color.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const DateUnion: core.serialization.Schema<serializers.DateUnion.Raw, TraceApi.DateUnion> = core.serialization.union(\\"type\\", {
    date: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).Date)
    }),
    datetime: core.serialization.object({
        value: core.serialization.date()
    })
}).transform<TraceApi.DateUnion>({
    parse: value => {
        switch (value.type) {
            case \\"date\\": return TraceApi.DateUnion.date(value.value);
            case \\"datetime\\": return TraceApi.DateUnion.datetime(value.value);
            default: return TraceApi.DateUnion._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace DateUnion {
    type Raw = DateUnion.Date | DateUnion.Datetime;

    interface Date {
        \\"type\\": \\"date\\";
        \\"value\\": serializers.Date.Raw;
    }

    interface Datetime {
        \\"type\\": \\"datetime\\";
        \\"value\\": string;
    }
}
",
                    "name": "DateUnion.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const MapWithEnumKey: core.serialization.Schema<serializers.MapWithEnumKey.Raw, TraceApi.MapWithEnumKey> = core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Color), core.serialization.boolean().optional());

export declare namespace MapWithEnumKey {
    type Raw = Record<serializers.Color.Raw, boolean | null | undefined>;
}
",
                    "name": "MapWithEnumKey.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const MapWithEnumKeyAndOptionalValue: core.serialization.Schema<serializers.MapWithEnumKeyAndOptionalValue.Raw, TraceApi.MapWithEnumKeyAndOptionalValue> = core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Color), core.serialization.boolean().optional());

export declare namespace MapWithEnumKeyAndOptionalValue {
    type Raw = Record<serializers.Color.Raw, boolean | null | undefined>;
}
",
                    "name": "MapWithEnumKeyAndOptionalValue.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Playlist: core.serialization.ObjectSchema<serializers.Playlist.Raw, TraceApi.Playlist> = core.serialization.object({
    playlistId: core.serialization.property(\\"playlist_id\\", core.serialization.lazy(async () => (await import(\\"../../..\\")).PlaylistId)),
    ownerId: core.serialization.property(\\"owner-id\\", core.serialization.lazy(async () => (await import(\\"../../..\\")).UserId))
}).extend(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).PlaylistCreateRequest));

export declare namespace Playlist {
    interface Raw extends serializers.PlaylistCreateRequest.Raw {
        \\"playlist_id\\": serializers.PlaylistId.Raw;
        \\"owner-id\\": serializers.UserId.Raw;
    }
}
",
                    "name": "Playlist.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const PlaylistCreateRequest: core.serialization.ObjectSchema<serializers.PlaylistCreateRequest.Raw, TraceApi.PlaylistCreateRequest> = core.serialization.object({
    name: core.serialization.string(),
    problems: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId))
});

export declare namespace PlaylistCreateRequest {
    interface Raw {
        \\"name\\": string;
        \\"problems\\": serializers.ProblemId.Raw[];
    }
}
",
                    "name": "PlaylistCreateRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const PlaylistId: core.serialization.Schema<serializers.PlaylistId.Raw, TraceApi.PlaylistId> = core.serialization.string();

export declare namespace PlaylistId {
    type Raw = string;
}
",
                    "name": "PlaylistId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const PlaylistIdNotFoundErrorBody: core.serialization.Schema<serializers.PlaylistIdNotFoundErrorBody.Raw, TraceApi.PlaylistIdNotFoundErrorBody> = core.serialization.union(\\"type\\", {
    playlistId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).PlaylistId)
    })
}).transform<TraceApi.PlaylistIdNotFoundErrorBody>({
    parse: value => {
        switch (value.type) {
            case \\"playlistId\\": return TraceApi.PlaylistIdNotFoundErrorBody.playlistId(value.value);
            default: return TraceApi.PlaylistIdNotFoundErrorBody._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace PlaylistIdNotFoundErrorBody {
    type Raw = PlaylistIdNotFoundErrorBody.PlaylistId;

    interface PlaylistId {
        \\"type\\": \\"playlistId\\";
        \\"value\\": serializers.PlaylistId.Raw;
    }
}
",
                    "name": "PlaylistIdNotFoundErrorBody.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ReservedKeywordEnum: core.serialization.Schema<serializers.ReservedKeywordEnum.Raw, TraceApi.ReservedKeywordEnum> = core.serialization.enum_([\\"is\\", \\"as\\", \\"date\\"]);

export declare namespace ReservedKeywordEnum {
    type Raw = \\"is\\" | \\"as\\" | \\"date\\";
}
",
                    "name": "ReservedKeywordEnum.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const UpdatePlaylistRequest: core.serialization.ObjectSchema<serializers.UpdatePlaylistRequest.Raw, TraceApi.UpdatePlaylistRequest> = core.serialization.object({
    name: core.serialization.string(),
    problems: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId))
});

export declare namespace UpdatePlaylistRequest {
    interface Raw {
        \\"name\\": string;
        \\"problems\\": serializers.ProblemId.Raw[];
    }
}
",
                    "name": "UpdatePlaylistRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./PlaylistId\\";
export * from \\"./Playlist\\";
export * from \\"./PlaylistCreateRequest\\";
export * from \\"./UpdatePlaylistRequest\\";
export * from \\"./PlaylistIdNotFoundErrorBody\\";
export * from \\"./DateUnion\\";
export * from \\"./ReservedKeywordEnum\\";
export * from \\"./MapWithEnumKey\\";
export * from \\"./MapWithEnumKeyAndOptionalValue\\";
export * from \\"./Color\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "playlist",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * from \\"./requests\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../..\\";
import { TraceApi } from \\"../../../../..\\";
import * as core from \\"../../../../../core\\";

export const GetDefaultStarterFilesRequest: core.serialization.Schema<serializers.GetDefaultStarterFilesRequest.Raw, TraceApi.GetDefaultStarterFilesRequest> = core.serialization.object({
    inputParams: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../..\\")).VariableTypeAndName)),
    outputType: core.serialization.lazy(async () => (await import(\\"../../../..\\")).VariableType),
    methodName: core.serialization.string()
});

export declare namespace GetDefaultStarterFilesRequest {
    interface Raw {
        \\"inputParams\\": serializers.VariableTypeAndName.Raw[];
        \\"outputType\\": serializers.VariableType.Raw;
        \\"methodName\\": string;
    }
}
",
                        "name": "GetDefaultStarterFilesRequest.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": "export { GetDefaultStarterFilesRequest } from \\"./GetDefaultStarterFilesRequest\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                    ],
                    "name": "requests",
                    "type": "directory",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const CreateProblemError: core.serialization.Schema<serializers.CreateProblemError.Raw, TraceApi.CreateProblemError> = core.serialization.union(core.serialization.discriminant(\\"errorType\\", \\"_type\\"), {
    generic: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GenericCreateProblemError)
}).transform<TraceApi.CreateProblemError>({
    parse: value => {
        switch (value.errorType) {
            case \\"generic\\": return TraceApi.CreateProblemError.generic(value);
            default: return TraceApi.CreateProblemError._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace CreateProblemError {
    type Raw = CreateProblemError.Generic;

    interface Generic extends serializers.GenericCreateProblemError.Raw {
        \\"_type\\": \\"generic\\";
    }
}
",
                    "name": "CreateProblemError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const CreateProblemRequest: core.serialization.ObjectSchema<serializers.CreateProblemRequest.Raw, TraceApi.CreateProblemRequest> = core.serialization.object({
    problemName: core.serialization.string(),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemDescription),
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemFiles).optional()),
    inputParams: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).VariableTypeAndName)),
    outputType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseWithExpectedResult)),
    methodName: core.serialization.string()
});

export declare namespace CreateProblemRequest {
    interface Raw {
        \\"problemName\\": string;
        \\"problemDescription\\": serializers.ProblemDescription.Raw;
        \\"files\\": Record<serializers.Language.Raw, serializers.ProblemFiles.Raw | null | undefined>;
        \\"inputParams\\": serializers.VariableTypeAndName.Raw[];
        \\"outputType\\": serializers.VariableType.Raw;
        \\"testcases\\": serializers.TestCaseWithExpectedResult.Raw[];
        \\"methodName\\": string;
    }
}
",
                    "name": "CreateProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const CreateProblemResponse: core.serialization.Schema<serializers.CreateProblemResponse.Raw, TraceApi.CreateProblemResponse> = core.serialization.union(\\"type\\", {
    success: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId)
    }),
    error: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).CreateProblemError)
    })
}).transform<TraceApi.CreateProblemResponse>({
    parse: value => {
        switch (value.type) {
            case \\"success\\": return TraceApi.CreateProblemResponse.success(value.value);
            case \\"error\\": return TraceApi.CreateProblemResponse.error(value.value);
            default: return TraceApi.CreateProblemResponse._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace CreateProblemResponse {
    type Raw = CreateProblemResponse.Success | CreateProblemResponse.Error;

    interface Success {
        \\"type\\": \\"success\\";
        \\"value\\": serializers.ProblemId.Raw;
    }

    interface Error {
        \\"type\\": \\"error\\";
        \\"value\\": serializers.CreateProblemError.Raw;
    }
}
",
                    "name": "CreateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GenericCreateProblemError: core.serialization.ObjectSchema<serializers.GenericCreateProblemError.Raw, TraceApi.GenericCreateProblemError> = core.serialization.object({
    message: core.serialization.string(),
    type: core.serialization.string(),
    stacktrace: core.serialization.string()
});

export declare namespace GenericCreateProblemError {
    interface Raw {
        \\"message\\": string;
        \\"type\\": string;
        \\"stacktrace\\": string;
    }
}
",
                    "name": "GenericCreateProblemError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GetDefaultStarterFilesResponse: core.serialization.ObjectSchema<serializers.GetDefaultStarterFilesResponse.Raw, TraceApi.GetDefaultStarterFilesResponse> = core.serialization.object({
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemFiles).optional())
});

export declare namespace GetDefaultStarterFilesResponse {
    interface Raw {
        \\"files\\": Record<serializers.Language.Raw, serializers.ProblemFiles.Raw | null | undefined>;
    }
}
",
                    "name": "GetDefaultStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ProblemDescription: core.serialization.ObjectSchema<serializers.ProblemDescription.Raw, TraceApi.ProblemDescription> = core.serialization.object({
    boards: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemDescriptionBoard))
});

export declare namespace ProblemDescription {
    interface Raw {
        \\"boards\\": serializers.ProblemDescriptionBoard.Raw[];
    }
}
",
                    "name": "ProblemDescription.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ProblemDescriptionBoard: core.serialization.Schema<serializers.ProblemDescriptionBoard.Raw, TraceApi.ProblemDescriptionBoard> = core.serialization.union(\\"type\\", {
    html: core.serialization.object({
        value: core.serialization.string()
    }),
    variable: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue)
    }),
    testCaseId: core.serialization.object({
        value: core.serialization.string()
    })
}).transform<TraceApi.ProblemDescriptionBoard>({
    parse: value => {
        switch (value.type) {
            case \\"html\\": return TraceApi.ProblemDescriptionBoard.html(value.value);
            case \\"variable\\": return TraceApi.ProblemDescriptionBoard.variable(value.value);
            case \\"testCaseId\\": return TraceApi.ProblemDescriptionBoard.testCaseId(value.value);
            default: return TraceApi.ProblemDescriptionBoard._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace ProblemDescriptionBoard {
    type Raw = ProblemDescriptionBoard.Html | ProblemDescriptionBoard.Variable | ProblemDescriptionBoard.TestCaseId;

    interface Html {
        \\"type\\": \\"html\\";
        \\"value\\": string;
    }

    interface Variable {
        \\"type\\": \\"variable\\";
        \\"value\\": serializers.VariableValue.Raw;
    }

    interface TestCaseId {
        \\"type\\": \\"testCaseId\\";
        \\"value\\": string;
    }
}
",
                    "name": "ProblemDescriptionBoard.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ProblemFiles: core.serialization.ObjectSchema<serializers.ProblemFiles.Raw, TraceApi.ProblemFiles> = core.serialization.object({
    solutionFile: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo),
    readOnlyFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo))
});

export declare namespace ProblemFiles {
    interface Raw {
        \\"solutionFile\\": serializers.FileInfo.Raw;
        \\"readOnlyFiles\\": serializers.FileInfo.Raw[];
    }
}
",
                    "name": "ProblemFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ProblemInfo: core.serialization.ObjectSchema<serializers.ProblemInfo.Raw, TraceApi.ProblemInfo> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemFiles).optional()),
    inputParams: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).VariableTypeAndName)),
    outputType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseWithExpectedResult)),
    methodName: core.serialization.string(),
    supportsCustomTestCases: core.serialization.boolean()
});

export declare namespace ProblemInfo {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemDescription\\": serializers.ProblemDescription.Raw;
        \\"problemName\\": string;
        \\"problemVersion\\": number;
        \\"files\\": Record<serializers.Language.Raw, serializers.ProblemFiles.Raw | null | undefined>;
        \\"inputParams\\": serializers.VariableTypeAndName.Raw[];
        \\"outputType\\": serializers.VariableType.Raw;
        \\"testcases\\": serializers.TestCaseWithExpectedResult.Raw[];
        \\"methodName\\": string;
        \\"supportsCustomTestCases\\": boolean;
    }
}
",
                    "name": "ProblemInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ProblemsMap: core.serialization.ObjectSchema<serializers.ProblemsMap.Raw, TraceApi.ProblemsMap> = core.serialization.object({
    problemsById: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ProblemInfo))
});

export declare namespace ProblemsMap {
    interface Raw {
        \\"problemsById\\": Record<serializers.ProblemId.Raw, serializers.ProblemInfo.Raw>;
    }
}
",
                    "name": "ProblemsMap.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const UpdateProblemResponse: core.serialization.ObjectSchema<serializers.UpdateProblemResponse.Raw, TraceApi.UpdateProblemResponse> = core.serialization.object({
    problemVersion: core.serialization.number()
});

export declare namespace UpdateProblemResponse {
    interface Raw {
        \\"problemVersion\\": number;
    }
}
",
                    "name": "UpdateProblemResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const VariableTypeAndName: core.serialization.ObjectSchema<serializers.VariableTypeAndName.Raw, TraceApi.VariableTypeAndName> = core.serialization.object({
    variableType: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableType),
    name: core.serialization.string()
});

export declare namespace VariableTypeAndName {
    interface Raw {
        \\"variableType\\": serializers.VariableType.Raw;
        \\"name\\": string;
    }
}
",
                    "name": "VariableTypeAndName.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./ProblemInfo\\";
export * from \\"./ProblemsMap\\";
export * from \\"./ProblemDescription\\";
export * from \\"./ProblemDescriptionBoard\\";
export * from \\"./ProblemFiles\\";
export * from \\"./VariableTypeAndName\\";
export * from \\"./CreateProblemRequest\\";
export * from \\"./CreateProblemResponse\\";
export * from \\"./UpdateProblemResponse\\";
export * from \\"./CreateProblemError\\";
export * from \\"./GenericCreateProblemError\\";
export * from \\"./GetDefaultStarterFilesResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "problem",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Response: core.serialization.Schema<serializers.submission.getExecutionSession.Response.Raw, TraceApi.ExecutionSessionResponse | undefined> = core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExecutionSessionResponse).optional();

export declare namespace Response {
    type Raw = serializers.ExecutionSessionResponse.Raw | null | undefined;
}
",
                    "name": "getExecutionSession.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getExecutionSession from \\"./getExecutionSession\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ActualResult: core.serialization.Schema<serializers.ActualResult.Raw, TraceApi.ActualResult> = core.serialization.union(\\"type\\", {
    value: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue)
    }),
    exception: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
    exceptionV2: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExceptionV2)
    })
}).transform<TraceApi.ActualResult>({
    parse: value => {
        switch (value.type) {
            case \\"value\\": return TraceApi.ActualResult.value(value.value);
            case \\"exception\\": return TraceApi.ActualResult.exception(value);
            case \\"exceptionV2\\": return TraceApi.ActualResult.exceptionV2(value.value);
            default: return TraceApi.ActualResult._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace ActualResult {
    type Raw = ActualResult.Value | ActualResult.Exception | ActualResult.ExceptionV2;

    interface Value {
        \\"type\\": \\"value\\";
        \\"value\\": serializers.VariableValue.Raw;
    }

    interface Exception extends serializers.ExceptionInfo.Raw {
        \\"type\\": \\"exception\\";
    }

    interface ExceptionV2 {
        \\"type\\": \\"exceptionV2\\";
        \\"value\\": serializers.ExceptionV2.Raw;
    }
}
",
                    "name": "ActualResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const BuildingExecutorResponse: core.serialization.ObjectSchema<serializers.BuildingExecutorResponse.Raw, TraceApi.BuildingExecutorResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExecutionSessionStatus)
});

export declare namespace BuildingExecutorResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"status\\": serializers.ExecutionSessionStatus.Raw;
    }
}
",
                    "name": "BuildingExecutorResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const CodeExecutionUpdate: core.serialization.Schema<serializers.CodeExecutionUpdate.Raw, TraceApi.CodeExecutionUpdate> = core.serialization.union(\\"type\\", {
    buildingExecutor: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).BuildingExecutorResponse),
    running: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RunningResponse),
    errored: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ErroredResponse),
    stopped: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StoppedResponse),
    graded: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GradedResponse),
    gradedV2: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GradedResponseV2),
    workspaceRan: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRanResponse),
    recording: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RecordingResponseNotification),
    recorded: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RecordedResponseNotification),
    invalidRequest: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).InvalidRequestResponse),
    finished: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FinishedResponse)
}).transform<TraceApi.CodeExecutionUpdate>({
    parse: value => {
        switch (value.type) {
            case \\"buildingExecutor\\": return TraceApi.CodeExecutionUpdate.buildingExecutor(value);
            case \\"running\\": return TraceApi.CodeExecutionUpdate.running(value);
            case \\"errored\\": return TraceApi.CodeExecutionUpdate.errored(value);
            case \\"stopped\\": return TraceApi.CodeExecutionUpdate.stopped(value);
            case \\"graded\\": return TraceApi.CodeExecutionUpdate.graded(value);
            case \\"gradedV2\\": return TraceApi.CodeExecutionUpdate.gradedV2(value);
            case \\"workspaceRan\\": return TraceApi.CodeExecutionUpdate.workspaceRan(value);
            case \\"recording\\": return TraceApi.CodeExecutionUpdate.recording(value);
            case \\"recorded\\": return TraceApi.CodeExecutionUpdate.recorded(value);
            case \\"invalidRequest\\": return TraceApi.CodeExecutionUpdate.invalidRequest(value);
            case \\"finished\\": return TraceApi.CodeExecutionUpdate.finished(value);
            default: return TraceApi.CodeExecutionUpdate._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace CodeExecutionUpdate {
    type Raw = CodeExecutionUpdate.BuildingExecutor | CodeExecutionUpdate.Running | CodeExecutionUpdate.Errored | CodeExecutionUpdate.Stopped | CodeExecutionUpdate.Graded | CodeExecutionUpdate.GradedV2 | CodeExecutionUpdate.WorkspaceRan | CodeExecutionUpdate.Recording | CodeExecutionUpdate.Recorded | CodeExecutionUpdate.InvalidRequest | CodeExecutionUpdate.Finished;

    interface BuildingExecutor extends serializers.BuildingExecutorResponse.Raw {
        \\"type\\": \\"buildingExecutor\\";
    }

    interface Running extends serializers.RunningResponse.Raw {
        \\"type\\": \\"running\\";
    }

    interface Errored extends serializers.ErroredResponse.Raw {
        \\"type\\": \\"errored\\";
    }

    interface Stopped extends serializers.StoppedResponse.Raw {
        \\"type\\": \\"stopped\\";
    }

    interface Graded extends serializers.GradedResponse.Raw {
        \\"type\\": \\"graded\\";
    }

    interface GradedV2 extends serializers.GradedResponseV2.Raw {
        \\"type\\": \\"gradedV2\\";
    }

    interface WorkspaceRan extends serializers.WorkspaceRanResponse.Raw {
        \\"type\\": \\"workspaceRan\\";
    }

    interface Recording extends serializers.RecordingResponseNotification.Raw {
        \\"type\\": \\"recording\\";
    }

    interface Recorded extends serializers.RecordedResponseNotification.Raw {
        \\"type\\": \\"recorded\\";
    }

    interface InvalidRequest extends serializers.InvalidRequestResponse.Raw {
        \\"type\\": \\"invalidRequest\\";
    }

    interface Finished extends serializers.FinishedResponse.Raw {
        \\"type\\": \\"finished\\";
    }
}
",
                    "name": "CodeExecutionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const CompileError: core.serialization.ObjectSchema<serializers.CompileError.Raw, TraceApi.CompileError> = core.serialization.object({
    message: core.serialization.string()
});

export declare namespace CompileError {
    interface Raw {
        \\"message\\": string;
    }
}
",
                    "name": "CompileError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const CustomTestCasesUnsupported: core.serialization.ObjectSchema<serializers.CustomTestCasesUnsupported.Raw, TraceApi.CustomTestCasesUnsupported> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId)
});

export declare namespace CustomTestCasesUnsupported {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"submissionId\\": serializers.SubmissionId.Raw;
    }
}
",
                    "name": "CustomTestCasesUnsupported.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ErrorInfo: core.serialization.Schema<serializers.ErrorInfo.Raw, TraceApi.ErrorInfo> = core.serialization.union(\\"type\\", {
    compileError: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).CompileError),
    runtimeError: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RuntimeError),
    internalError: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).InternalError)
}).transform<TraceApi.ErrorInfo>({
    parse: value => {
        switch (value.type) {
            case \\"compileError\\": return TraceApi.ErrorInfo.compileError(value);
            case \\"runtimeError\\": return TraceApi.ErrorInfo.runtimeError(value);
            case \\"internalError\\": return TraceApi.ErrorInfo.internalError(value);
            default: return TraceApi.ErrorInfo._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace ErrorInfo {
    type Raw = ErrorInfo.CompileError | ErrorInfo.RuntimeError | ErrorInfo.InternalError;

    interface CompileError extends serializers.CompileError.Raw {
        \\"type\\": \\"compileError\\";
    }

    interface RuntimeError extends serializers.RuntimeError.Raw {
        \\"type\\": \\"runtimeError\\";
    }

    interface InternalError extends serializers.InternalError.Raw {
        \\"type\\": \\"internalError\\";
    }
}
",
                    "name": "ErrorInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ErroredResponse: core.serialization.ObjectSchema<serializers.ErroredResponse.Raw, TraceApi.ErroredResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    errorInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo)
});

export declare namespace ErroredResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"errorInfo\\": serializers.ErrorInfo.Raw;
    }
}
",
                    "name": "ErroredResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExceptionInfo: core.serialization.ObjectSchema<serializers.ExceptionInfo.Raw, TraceApi.ExceptionInfo> = core.serialization.object({
    exceptionType: core.serialization.string(),
    exceptionMessage: core.serialization.string(),
    exceptionStacktrace: core.serialization.string()
});

export declare namespace ExceptionInfo {
    interface Raw {
        \\"exceptionType\\": string;
        \\"exceptionMessage\\": string;
        \\"exceptionStacktrace\\": string;
    }
}
",
                    "name": "ExceptionInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExceptionV2: core.serialization.Schema<serializers.ExceptionV2.Raw, TraceApi.ExceptionV2> = core.serialization.union(\\"type\\", {
    generic: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
    timeout: core.serialization.object({})
}).transform<TraceApi.ExceptionV2>({
    parse: value => {
        switch (value.type) {
            case \\"generic\\": return TraceApi.ExceptionV2.generic(value);
            case \\"timeout\\": return TraceApi.ExceptionV2.timeout();
            default: return TraceApi.ExceptionV2._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace ExceptionV2 {
    type Raw = ExceptionV2.Generic | ExceptionV2.Timeout;

    interface Generic extends serializers.ExceptionInfo.Raw {
        \\"type\\": \\"generic\\";
    }

    interface Timeout {
        \\"type\\": \\"timeout\\";
    }
}
",
                    "name": "ExceptionV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExecutionSessionResponse: core.serialization.ObjectSchema<serializers.ExecutionSessionResponse.Raw, TraceApi.ExecutionSessionResponse> = core.serialization.object({
    sessionId: core.serialization.string(),
    executionSessionUrl: core.serialization.string().optional(),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExecutionSessionStatus)
});

export declare namespace ExecutionSessionResponse {
    interface Raw {
        \\"sessionId\\": string;
        \\"executionSessionUrl\\"?: string | null;
        \\"language\\": serializers.Language.Raw;
        \\"status\\": serializers.ExecutionSessionStatus.Raw;
    }
}
",
                    "name": "ExecutionSessionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExecutionSessionState: core.serialization.ObjectSchema<serializers.ExecutionSessionState.Raw, TraceApi.ExecutionSessionState> = core.serialization.object({
    lastTimeContacted: core.serialization.string().optional(),
    sessionId: core.serialization.string(),
    isWarmInstance: core.serialization.boolean(),
    awsTaskId: core.serialization.string().optional(),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExecutionSessionStatus)
});

export declare namespace ExecutionSessionState {
    interface Raw {
        \\"lastTimeContacted\\"?: string | null;
        \\"sessionId\\": string;
        \\"isWarmInstance\\": boolean;
        \\"awsTaskId\\"?: string | null;
        \\"language\\": serializers.Language.Raw;
        \\"status\\": serializers.ExecutionSessionStatus.Raw;
    }
}
",
                    "name": "ExecutionSessionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExecutionSessionStatus: core.serialization.Schema<serializers.ExecutionSessionStatus.Raw, TraceApi.ExecutionSessionStatus> = core.serialization.enum_([\\"CREATING_CONTAINER\\", \\"PROVISIONING_CONTAINER\\", \\"PENDING_CONTAINER\\", \\"RUNNING_CONTAINER\\", \\"LIVE_CONTAINER\\", \\"FAILED_TO_LAUNCH\\"]);

export declare namespace ExecutionSessionStatus {
    type Raw = \\"CREATING_CONTAINER\\" | \\"PROVISIONING_CONTAINER\\" | \\"PENDING_CONTAINER\\" | \\"RUNNING_CONTAINER\\" | \\"LIVE_CONTAINER\\" | \\"FAILED_TO_LAUNCH\\";
}
",
                    "name": "ExecutionSessionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExistingSubmissionExecuting: core.serialization.ObjectSchema<serializers.ExistingSubmissionExecuting.Raw, TraceApi.ExistingSubmissionExecuting> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId)
});

export declare namespace ExistingSubmissionExecuting {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
    }
}
",
                    "name": "ExistingSubmissionExecuting.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ExpressionLocation: core.serialization.ObjectSchema<serializers.ExpressionLocation.Raw, TraceApi.ExpressionLocation> = core.serialization.object({
    start: core.serialization.number(),
    offset: core.serialization.number()
});

export declare namespace ExpressionLocation {
    interface Raw {
        \\"start\\": number;
        \\"offset\\": number;
    }
}
",
                    "name": "ExpressionLocation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const FinishedResponse: core.serialization.ObjectSchema<serializers.FinishedResponse.Raw, TraceApi.FinishedResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId)
});

export declare namespace FinishedResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
    }
}
",
                    "name": "FinishedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GetExecutionSessionStateResponse: core.serialization.ObjectSchema<serializers.GetExecutionSessionStateResponse.Raw, TraceApi.GetExecutionSessionStateResponse> = core.serialization.object({
    states: core.serialization.record(core.serialization.string(), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExecutionSessionState)),
    numWarmingInstances: core.serialization.number().optional(),
    warmingSessionIds: core.serialization.list(core.serialization.string())
});

export declare namespace GetExecutionSessionStateResponse {
    interface Raw {
        \\"states\\": Record<string, serializers.ExecutionSessionState.Raw>;
        \\"numWarmingInstances\\"?: number | null;
        \\"warmingSessionIds\\": string[];
    }
}
",
                    "name": "GetExecutionSessionStateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GetSubmissionStateResponse: core.serialization.ObjectSchema<serializers.GetSubmissionStateResponse.Raw, TraceApi.GetSubmissionStateResponse> = core.serialization.object({
    timeSubmitted: core.serialization.date().optional(),
    submission: core.serialization.string(),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    submissionTypeState: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionTypeState)
});

export declare namespace GetSubmissionStateResponse {
    interface Raw {
        \\"timeSubmitted\\"?: string | null;
        \\"submission\\": string;
        \\"language\\": serializers.Language.Raw;
        \\"submissionTypeState\\": serializers.SubmissionTypeState.Raw;
    }
}
",
                    "name": "GetSubmissionStateResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GetTraceResponsesPageRequest: core.serialization.ObjectSchema<serializers.GetTraceResponsesPageRequest.Raw, TraceApi.GetTraceResponsesPageRequest> = core.serialization.object({
    offset: core.serialization.number().optional()
});

export declare namespace GetTraceResponsesPageRequest {
    interface Raw {
        \\"offset\\"?: number | null;
    }
}
",
                    "name": "GetTraceResponsesPageRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GradedResponse: core.serialization.ObjectSchema<serializers.GradedResponse.Raw, TraceApi.GradedResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    testCases: core.serialization.record(core.serialization.string(), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResultWithStdout))
});

export declare namespace GradedResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"testCases\\": Record<string, serializers.TestCaseResultWithStdout.Raw>;
    }
}
",
                    "name": "GradedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GradedResponseV2: core.serialization.ObjectSchema<serializers.GradedResponseV2.Raw, TraceApi.GradedResponseV2> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    testCases: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).v2.TestCaseId), core.serialization.lazy(async () => (await import(\\"../../..\\")).TestCaseGrade))
});

export declare namespace GradedResponseV2 {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"testCases\\": Record<serializers.v2.TestCaseId.Raw, serializers.TestCaseGrade.Raw>;
    }
}
",
                    "name": "GradedResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const GradedTestCaseUpdate: core.serialization.ObjectSchema<serializers.GradedTestCaseUpdate.Raw, TraceApi.GradedTestCaseUpdate> = core.serialization.object({
    testCaseId: core.serialization.lazy(async () => (await import(\\"../../..\\")).v2.TestCaseId),
    grade: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestCaseGrade)
});

export declare namespace GradedTestCaseUpdate {
    interface Raw {
        \\"testCaseId\\": serializers.v2.TestCaseId.Raw;
        \\"grade\\": serializers.TestCaseGrade.Raw;
    }
}
",
                    "name": "GradedTestCaseUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const InitializeProblemRequest: core.serialization.ObjectSchema<serializers.InitializeProblemRequest.Raw, TraceApi.InitializeProblemRequest> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemVersion: core.serialization.number().optional()
});

export declare namespace InitializeProblemRequest {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemVersion\\"?: number | null;
    }
}
",
                    "name": "InitializeProblemRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const InternalError: core.serialization.ObjectSchema<serializers.InternalError.Raw, TraceApi.InternalError> = core.serialization.object({
    exceptionInfo: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo)
});

export declare namespace InternalError {
    interface Raw {
        \\"exceptionInfo\\": serializers.ExceptionInfo.Raw;
    }
}
",
                    "name": "InternalError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const InvalidRequestCause: core.serialization.Schema<serializers.InvalidRequestCause.Raw, TraceApi.InvalidRequestCause> = core.serialization.union(\\"type\\", {
    submissionIdNotFound: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmissionIdNotFound),
    customTestCasesUnsupported: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).CustomTestCasesUnsupported),
    unexpectedLanguage: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).UnexpectedLanguageError)
}).transform<TraceApi.InvalidRequestCause>({
    parse: value => {
        switch (value.type) {
            case \\"submissionIdNotFound\\": return TraceApi.InvalidRequestCause.submissionIdNotFound(value);
            case \\"customTestCasesUnsupported\\": return TraceApi.InvalidRequestCause.customTestCasesUnsupported(value);
            case \\"unexpectedLanguage\\": return TraceApi.InvalidRequestCause.unexpectedLanguage(value);
            default: return TraceApi.InvalidRequestCause._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace InvalidRequestCause {
    type Raw = InvalidRequestCause.SubmissionIdNotFound | InvalidRequestCause.CustomTestCasesUnsupported | InvalidRequestCause.UnexpectedLanguage;

    interface SubmissionIdNotFound extends serializers.SubmissionIdNotFound.Raw {
        \\"type\\": \\"submissionIdNotFound\\";
    }

    interface CustomTestCasesUnsupported extends serializers.CustomTestCasesUnsupported.Raw {
        \\"type\\": \\"customTestCasesUnsupported\\";
    }

    interface UnexpectedLanguage extends serializers.UnexpectedLanguageError.Raw {
        \\"type\\": \\"unexpectedLanguage\\";
    }
}
",
                    "name": "InvalidRequestCause.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const InvalidRequestResponse: core.serialization.ObjectSchema<serializers.InvalidRequestResponse.Raw, TraceApi.InvalidRequestResponse> = core.serialization.object({
    request: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionRequest),
    cause: core.serialization.lazy(async () => (await import(\\"../../..\\")).InvalidRequestCause)
});

export declare namespace InvalidRequestResponse {
    interface Raw {
        \\"request\\": serializers.SubmissionRequest.Raw;
        \\"cause\\": serializers.InvalidRequestCause.Raw;
    }
}
",
                    "name": "InvalidRequestResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const LightweightStackframeInformation: core.serialization.ObjectSchema<serializers.LightweightStackframeInformation.Raw, TraceApi.LightweightStackframeInformation> = core.serialization.object({
    numStackFrames: core.serialization.number(),
    topStackFrameMethodName: core.serialization.string()
});

export declare namespace LightweightStackframeInformation {
    interface Raw {
        \\"numStackFrames\\": number;
        \\"topStackFrameMethodName\\": string;
    }
}
",
                    "name": "LightweightStackframeInformation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RecordedResponseNotification: core.serialization.ObjectSchema<serializers.RecordedResponseNotification.Raw, TraceApi.RecordedResponseNotification> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    traceResponsesSize: core.serialization.number(),
    testCaseId: core.serialization.string().optional()
});

export declare namespace RecordedResponseNotification {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"traceResponsesSize\\": number;
        \\"testCaseId\\"?: string | null;
    }
}
",
                    "name": "RecordedResponseNotification.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RecordedTestCaseUpdate: core.serialization.ObjectSchema<serializers.RecordedTestCaseUpdate.Raw, TraceApi.RecordedTestCaseUpdate> = core.serialization.object({
    testCaseId: core.serialization.lazy(async () => (await import(\\"../../..\\")).v2.TestCaseId),
    traceResponsesSize: core.serialization.number()
});

export declare namespace RecordedTestCaseUpdate {
    interface Raw {
        \\"testCaseId\\": serializers.v2.TestCaseId.Raw;
        \\"traceResponsesSize\\": number;
    }
}
",
                    "name": "RecordedTestCaseUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RecordingResponseNotification: core.serialization.ObjectSchema<serializers.RecordingResponseNotification.Raw, TraceApi.RecordingResponseNotification> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    testCaseId: core.serialization.string().optional(),
    lineNumber: core.serialization.number(),
    lightweightStackInfo: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).LightweightStackframeInformation),
    tracedFile: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TracedFile).optional()
});

export declare namespace RecordingResponseNotification {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"testCaseId\\"?: string | null;
        \\"lineNumber\\": number;
        \\"lightweightStackInfo\\": serializers.LightweightStackframeInformation.Raw;
        \\"tracedFile\\"?: serializers.TracedFile.Raw | null;
    }
}
",
                    "name": "RecordingResponseNotification.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RunningResponse: core.serialization.ObjectSchema<serializers.RunningResponse.Raw, TraceApi.RunningResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    state: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState)
});

export declare namespace RunningResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"state\\": serializers.RunningSubmissionState.Raw;
    }
}
",
                    "name": "RunningResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RunningSubmissionState: core.serialization.Schema<serializers.RunningSubmissionState.Raw, TraceApi.RunningSubmissionState> = core.serialization.enum_([\\"QUEUEING_SUBMISSION\\", \\"KILLING_HISTORICAL_SUBMISSIONS\\", \\"WRITING_SUBMISSION_TO_FILE\\", \\"COMPILING_SUBMISSION\\", \\"RUNNING_SUBMISSION\\"]);

export declare namespace RunningSubmissionState {
    type Raw = \\"QUEUEING_SUBMISSION\\" | \\"KILLING_HISTORICAL_SUBMISSIONS\\" | \\"WRITING_SUBMISSION_TO_FILE\\" | \\"COMPILING_SUBMISSION\\" | \\"RUNNING_SUBMISSION\\";
}
",
                    "name": "RunningSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const RuntimeError: core.serialization.ObjectSchema<serializers.RuntimeError.Raw, TraceApi.RuntimeError> = core.serialization.object({
    message: core.serialization.string()
});

export declare namespace RuntimeError {
    interface Raw {
        \\"message\\": string;
    }
}
",
                    "name": "RuntimeError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Scope: core.serialization.ObjectSchema<serializers.Scope.Raw, TraceApi.Scope> = core.serialization.object({
    variables: core.serialization.record(core.serialization.string(), core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue))
});

export declare namespace Scope {
    interface Raw {
        \\"variables\\": Record<string, serializers.DebugVariableValue.Raw>;
    }
}
",
                    "name": "Scope.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const ShareId: core.serialization.Schema<serializers.ShareId.Raw, TraceApi.ShareId> = core.serialization.string();

export declare namespace ShareId {
    type Raw = string;
}
",
                    "name": "ShareId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const StackFrame: core.serialization.ObjectSchema<serializers.StackFrame.Raw, TraceApi.StackFrame> = core.serialization.object({
    methodName: core.serialization.string(),
    lineNumber: core.serialization.number(),
    scopes: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).Scope))
});

export declare namespace StackFrame {
    interface Raw {
        \\"methodName\\": string;
        \\"lineNumber\\": number;
        \\"scopes\\": serializers.Scope.Raw[];
    }
}
",
                    "name": "StackFrame.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const StackInformation: core.serialization.ObjectSchema<serializers.StackInformation.Raw, TraceApi.StackInformation> = core.serialization.object({
    numStackFrames: core.serialization.number(),
    topStackFrame: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StackFrame).optional()
});

export declare namespace StackInformation {
    interface Raw {
        \\"numStackFrames\\": number;
        \\"topStackFrame\\"?: serializers.StackFrame.Raw | null;
    }
}
",
                    "name": "StackInformation.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const StderrResponse: core.serialization.ObjectSchema<serializers.StderrResponse.Raw, TraceApi.StderrResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    stderr: core.serialization.string()
});

export declare namespace StderrResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"stderr\\": string;
    }
}
",
                    "name": "StderrResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const StdoutResponse: core.serialization.ObjectSchema<serializers.StdoutResponse.Raw, TraceApi.StdoutResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    stdout: core.serialization.string()
});

export declare namespace StdoutResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"stdout\\": string;
    }
}
",
                    "name": "StdoutResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const StopRequest: core.serialization.ObjectSchema<serializers.StopRequest.Raw, TraceApi.StopRequest> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId)
});

export declare namespace StopRequest {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
    }
}
",
                    "name": "StopRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const StoppedResponse: core.serialization.ObjectSchema<serializers.StoppedResponse.Raw, TraceApi.StoppedResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId)
});

export declare namespace StoppedResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
    }
}
",
                    "name": "StoppedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionFileInfo: core.serialization.ObjectSchema<serializers.SubmissionFileInfo.Raw, TraceApi.SubmissionFileInfo> = core.serialization.object({
    directory: core.serialization.string(),
    filename: core.serialization.string(),
    contents: core.serialization.string()
});

export declare namespace SubmissionFileInfo {
    interface Raw {
        \\"directory\\": string;
        \\"filename\\": string;
        \\"contents\\": string;
    }
}
",
                    "name": "SubmissionFileInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionId: core.serialization.Schema<serializers.SubmissionId.Raw, TraceApi.SubmissionId> = core.serialization.string();

export declare namespace SubmissionId {
    type Raw = string;
}
",
                    "name": "SubmissionId.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionIdNotFound: core.serialization.ObjectSchema<serializers.SubmissionIdNotFound.Raw, TraceApi.SubmissionIdNotFound> = core.serialization.object({
    missingSubmissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId)
});

export declare namespace SubmissionIdNotFound {
    interface Raw {
        \\"missingSubmissionId\\": serializers.SubmissionId.Raw;
    }
}
",
                    "name": "SubmissionIdNotFound.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionRequest: core.serialization.Schema<serializers.SubmissionRequest.Raw, TraceApi.SubmissionRequest> = core.serialization.union(\\"type\\", {
    initializeProblemRequest: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).InitializeProblemRequest),
    initializeWorkspaceRequest: core.serialization.object({}),
    submitV2: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmitRequestV2),
    workspaceSubmit: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmitRequest),
    stop: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StopRequest)
}).transform<TraceApi.SubmissionRequest>({
    parse: value => {
        switch (value.type) {
            case \\"initializeProblemRequest\\": return TraceApi.SubmissionRequest.initializeProblemRequest(value);
            case \\"initializeWorkspaceRequest\\": return TraceApi.SubmissionRequest.initializeWorkspaceRequest();
            case \\"submitV2\\": return TraceApi.SubmissionRequest.submitV2(value);
            case \\"workspaceSubmit\\": return TraceApi.SubmissionRequest.workspaceSubmit(value);
            case \\"stop\\": return TraceApi.SubmissionRequest.stop(value);
            default: return TraceApi.SubmissionRequest._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace SubmissionRequest {
    type Raw = SubmissionRequest.InitializeProblemRequest | SubmissionRequest.InitializeWorkspaceRequest | SubmissionRequest.SubmitV2 | SubmissionRequest.WorkspaceSubmit | SubmissionRequest.Stop;

    interface InitializeProblemRequest extends serializers.InitializeProblemRequest.Raw {
        \\"type\\": \\"initializeProblemRequest\\";
    }

    interface InitializeWorkspaceRequest {
        \\"type\\": \\"initializeWorkspaceRequest\\";
    }

    interface SubmitV2 extends serializers.SubmitRequestV2.Raw {
        \\"type\\": \\"submitV2\\";
    }

    interface WorkspaceSubmit extends serializers.WorkspaceSubmitRequest.Raw {
        \\"type\\": \\"workspaceSubmit\\";
    }

    interface Stop extends serializers.StopRequest.Raw {
        \\"type\\": \\"stop\\";
    }
}
",
                    "name": "SubmissionRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionResponse: core.serialization.Schema<serializers.SubmissionResponse.Raw, TraceApi.SubmissionResponse> = core.serialization.union(\\"type\\", {
    serverInitialized: core.serialization.object({}),
    problemInitialized: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId)
    }),
    workspaceInitialized: core.serialization.object({}),
    serverErrored: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo),
    codeExecutionUpdate: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).CodeExecutionUpdate)
    }),
    terminated: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TerminatedResponse)
}).transform<TraceApi.SubmissionResponse>({
    parse: value => {
        switch (value.type) {
            case \\"serverInitialized\\": return TraceApi.SubmissionResponse.serverInitialized();
            case \\"problemInitialized\\": return TraceApi.SubmissionResponse.problemInitialized(value.value);
            case \\"workspaceInitialized\\": return TraceApi.SubmissionResponse.workspaceInitialized();
            case \\"serverErrored\\": return TraceApi.SubmissionResponse.serverErrored(value);
            case \\"codeExecutionUpdate\\": return TraceApi.SubmissionResponse.codeExecutionUpdate(value.value);
            case \\"terminated\\": return TraceApi.SubmissionResponse.terminated(value);
            default: return TraceApi.SubmissionResponse._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace SubmissionResponse {
    type Raw = SubmissionResponse.ServerInitialized | SubmissionResponse.ProblemInitialized | SubmissionResponse.WorkspaceInitialized | SubmissionResponse.ServerErrored | SubmissionResponse.CodeExecutionUpdate | SubmissionResponse.Terminated;

    interface ServerInitialized {
        \\"type\\": \\"serverInitialized\\";
    }

    interface ProblemInitialized {
        \\"type\\": \\"problemInitialized\\";
        \\"value\\": serializers.ProblemId.Raw;
    }

    interface WorkspaceInitialized {
        \\"type\\": \\"workspaceInitialized\\";
    }

    interface ServerErrored extends serializers.ExceptionInfo.Raw {
        \\"type\\": \\"serverErrored\\";
    }

    interface CodeExecutionUpdate {
        \\"type\\": \\"codeExecutionUpdate\\";
        \\"value\\": serializers.CodeExecutionUpdate.Raw;
    }

    interface Terminated extends serializers.TerminatedResponse.Raw {
        \\"type\\": \\"terminated\\";
    }
}
",
                    "name": "SubmissionResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionStatusForTestCase: core.serialization.Schema<serializers.SubmissionStatusForTestCase.Raw, TraceApi.SubmissionStatusForTestCase> = core.serialization.union(\\"type\\", {
    graded: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResultWithStdout),
    gradedV2: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestCaseGrade)
    }),
    traced: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TracedTestCase)
}).transform<TraceApi.SubmissionStatusForTestCase>({
    parse: value => {
        switch (value.type) {
            case \\"graded\\": return TraceApi.SubmissionStatusForTestCase.graded(value);
            case \\"gradedV2\\": return TraceApi.SubmissionStatusForTestCase.gradedV2(value.value);
            case \\"traced\\": return TraceApi.SubmissionStatusForTestCase.traced(value);
            default: return TraceApi.SubmissionStatusForTestCase._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace SubmissionStatusForTestCase {
    type Raw = SubmissionStatusForTestCase.Graded | SubmissionStatusForTestCase.GradedV2 | SubmissionStatusForTestCase.Traced;

    interface Graded extends serializers.TestCaseResultWithStdout.Raw {
        \\"type\\": \\"graded\\";
    }

    interface GradedV2 {
        \\"type\\": \\"gradedV2\\";
        \\"value\\": serializers.TestCaseGrade.Raw;
    }

    interface Traced extends serializers.TracedTestCase.Raw {
        \\"type\\": \\"traced\\";
    }
}
",
                    "name": "SubmissionStatusForTestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionStatusV2: core.serialization.Schema<serializers.SubmissionStatusV2.Raw, TraceApi.SubmissionStatusV2> = core.serialization.union(\\"type\\", {
    test: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestSubmissionStatusV2),
    workspace: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmissionStatusV2)
}).transform<TraceApi.SubmissionStatusV2>({
    parse: value => {
        switch (value.type) {
            case \\"test\\": return TraceApi.SubmissionStatusV2.test(value);
            case \\"workspace\\": return TraceApi.SubmissionStatusV2.workspace(value);
            default: return TraceApi.SubmissionStatusV2._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace SubmissionStatusV2 {
    type Raw = SubmissionStatusV2.Test | SubmissionStatusV2.Workspace;

    interface Test extends serializers.TestSubmissionStatusV2.Raw {
        \\"type\\": \\"test\\";
    }

    interface Workspace extends serializers.WorkspaceSubmissionStatusV2.Raw {
        \\"type\\": \\"workspace\\";
    }
}
",
                    "name": "SubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionTypeEnum: core.serialization.Schema<serializers.SubmissionTypeEnum.Raw, TraceApi.SubmissionTypeEnum> = core.serialization.enum_([\\"TEST\\"]);

export declare namespace SubmissionTypeEnum {
    type Raw = \\"TEST\\";
}
",
                    "name": "SubmissionTypeEnum.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmissionTypeState: core.serialization.Schema<serializers.SubmissionTypeState.Raw, TraceApi.SubmissionTypeState> = core.serialization.union(\\"type\\", {
    test: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestSubmissionState),
    workspace: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmissionState)
}).transform<TraceApi.SubmissionTypeState>({
    parse: value => {
        switch (value.type) {
            case \\"test\\": return TraceApi.SubmissionTypeState.test(value);
            case \\"workspace\\": return TraceApi.SubmissionTypeState.workspace(value);
            default: return TraceApi.SubmissionTypeState._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace SubmissionTypeState {
    type Raw = SubmissionTypeState.Test | SubmissionTypeState.Workspace;

    interface Test extends serializers.TestSubmissionState.Raw {
        \\"type\\": \\"test\\";
    }

    interface Workspace extends serializers.WorkspaceSubmissionState.Raw {
        \\"type\\": \\"workspace\\";
    }
}
",
                    "name": "SubmissionTypeState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const SubmitRequestV2: core.serialization.ObjectSchema<serializers.SubmitRequestV2.Raw, TraceApi.SubmitRequestV2> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    submissionFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmissionFileInfo)),
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemVersion: core.serialization.number().optional(),
    userId: core.serialization.string().optional()
});

export declare namespace SubmitRequestV2 {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"language\\": serializers.Language.Raw;
        \\"submissionFiles\\": serializers.SubmissionFileInfo.Raw[];
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemVersion\\"?: number | null;
        \\"userId\\"?: string | null;
    }
}
",
                    "name": "SubmitRequestV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TerminatedResponse: core.serialization.ObjectSchema<serializers.TerminatedResponse.Raw, TraceApi.TerminatedResponse> = core.serialization.object({});

export declare namespace TerminatedResponse {
    interface Raw {
    }
}
",
                    "name": "TerminatedResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCaseGrade: core.serialization.Schema<serializers.TestCaseGrade.Raw, TraceApi.TestCaseGrade> = core.serialization.union(\\"type\\", {
    hidden: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseHiddenGrade),
    nonHidden: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseNonHiddenGrade)
}).transform<TraceApi.TestCaseGrade>({
    parse: value => {
        switch (value.type) {
            case \\"hidden\\": return TraceApi.TestCaseGrade.hidden(value);
            case \\"nonHidden\\": return TraceApi.TestCaseGrade.nonHidden(value);
            default: return TraceApi.TestCaseGrade._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseGrade {
    type Raw = TestCaseGrade.Hidden | TestCaseGrade.NonHidden;

    interface Hidden extends serializers.TestCaseHiddenGrade.Raw {
        \\"type\\": \\"hidden\\";
    }

    interface NonHidden extends serializers.TestCaseNonHiddenGrade.Raw {
        \\"type\\": \\"nonHidden\\";
    }
}
",
                    "name": "TestCaseGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCaseHiddenGrade: core.serialization.ObjectSchema<serializers.TestCaseHiddenGrade.Raw, TraceApi.TestCaseHiddenGrade> = core.serialization.object({
    passed: core.serialization.boolean()
});

export declare namespace TestCaseHiddenGrade {
    interface Raw {
        \\"passed\\": boolean;
    }
}
",
                    "name": "TestCaseHiddenGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCaseNonHiddenGrade: core.serialization.ObjectSchema<serializers.TestCaseNonHiddenGrade.Raw, TraceApi.TestCaseNonHiddenGrade> = core.serialization.object({
    passed: core.serialization.boolean(),
    actualResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue).optional(),
    exception: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExceptionV2).optional(),
    stdout: core.serialization.string()
});

export declare namespace TestCaseNonHiddenGrade {
    interface Raw {
        \\"passed\\": boolean;
        \\"actualResult\\"?: serializers.VariableValue.Raw | null;
        \\"exception\\"?: serializers.ExceptionV2.Raw | null;
        \\"stdout\\": string;
    }
}
",
                    "name": "TestCaseNonHiddenGrade.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCaseResult: core.serialization.ObjectSchema<serializers.TestCaseResult.Raw, TraceApi.TestCaseResult> = core.serialization.object({
    expectedResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).VariableValue),
    actualResult: core.serialization.lazy(async () => (await import(\\"../../..\\")).ActualResult),
    passed: core.serialization.boolean()
});

export declare namespace TestCaseResult {
    interface Raw {
        \\"expectedResult\\": serializers.VariableValue.Raw;
        \\"actualResult\\": serializers.ActualResult.Raw;
        \\"passed\\": boolean;
    }
}
",
                    "name": "TestCaseResult.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestCaseResultWithStdout: core.serialization.ObjectSchema<serializers.TestCaseResultWithStdout.Raw, TraceApi.TestCaseResultWithStdout> = core.serialization.object({
    result: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResult),
    stdout: core.serialization.string()
});

export declare namespace TestCaseResultWithStdout {
    interface Raw {
        \\"result\\": serializers.TestCaseResult.Raw;
        \\"stdout\\": string;
    }
}
",
                    "name": "TestCaseResultWithStdout.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestSubmissionState: core.serialization.ObjectSchema<serializers.TestSubmissionState.Raw, TraceApi.TestSubmissionState> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    defaultTestCases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCase)),
    customTestCases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCase)),
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestSubmissionStatus)
});

export declare namespace TestSubmissionState {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"defaultTestCases\\": serializers.TestCase.Raw[];
        \\"customTestCases\\": serializers.TestCase.Raw[];
        \\"status\\": serializers.TestSubmissionStatus.Raw;
    }
}
",
                    "name": "TestSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestSubmissionStatus: core.serialization.Schema<serializers.TestSubmissionStatus.Raw, TraceApi.TestSubmissionStatus> = core.serialization.union(\\"type\\", {
    stopped: core.serialization.object({}),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo)
    }),
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState)
    }),
    testCaseIdToState: core.serialization.object({
        value: core.serialization.record(core.serialization.string(), core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionStatusForTestCase))
    })
}).transform<TraceApi.TestSubmissionStatus>({
    parse: value => {
        switch (value.type) {
            case \\"stopped\\": return TraceApi.TestSubmissionStatus.stopped();
            case \\"errored\\": return TraceApi.TestSubmissionStatus.errored(value.value);
            case \\"running\\": return TraceApi.TestSubmissionStatus.running(value.value);
            case \\"testCaseIdToState\\": return TraceApi.TestSubmissionStatus.testCaseIdToState(value.value);
            default: return TraceApi.TestSubmissionStatus._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestSubmissionStatus {
    type Raw = TestSubmissionStatus.Stopped | TestSubmissionStatus.Errored | TestSubmissionStatus.Running | TestSubmissionStatus.TestCaseIdToState;

    interface Stopped {
        \\"type\\": \\"stopped\\";
    }

    interface Errored {
        \\"type\\": \\"errored\\";
        \\"value\\": serializers.ErrorInfo.Raw;
    }

    interface Running {
        \\"type\\": \\"running\\";
        \\"value\\": serializers.RunningSubmissionState.Raw;
    }

    interface TestCaseIdToState {
        \\"type\\": \\"testCaseIdToState\\";
        \\"value\\": Record<string, serializers.SubmissionStatusForTestCase.Raw>;
    }
}
",
                    "name": "TestSubmissionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestSubmissionStatusV2: core.serialization.ObjectSchema<serializers.TestSubmissionStatusV2.Raw, TraceApi.TestSubmissionStatusV2> = core.serialization.object({
    updates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestSubmissionUpdate)),
    problemId: core.serialization.lazy(async () => (await import(\\"../../..\\")).ProblemId),
    problemVersion: core.serialization.number(),
    problemInfo: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).v2.ProblemInfoV2)
});

export declare namespace TestSubmissionStatusV2 {
    interface Raw {
        \\"updates\\": serializers.TestSubmissionUpdate.Raw[];
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemVersion\\": number;
        \\"problemInfo\\": serializers.v2.ProblemInfoV2.Raw;
    }
}
",
                    "name": "TestSubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestSubmissionUpdate: core.serialization.ObjectSchema<serializers.TestSubmissionUpdate.Raw, TraceApi.TestSubmissionUpdate> = core.serialization.object({
    updateTime: core.serialization.date(),
    updateInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).TestSubmissionUpdateInfo)
});

export declare namespace TestSubmissionUpdate {
    interface Raw {
        \\"updateTime\\": string;
        \\"updateInfo\\": serializers.TestSubmissionUpdateInfo.Raw;
    }
}
",
                    "name": "TestSubmissionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TestSubmissionUpdateInfo: core.serialization.Schema<serializers.TestSubmissionUpdateInfo.Raw, TraceApi.TestSubmissionUpdateInfo> = core.serialization.union(\\"type\\", {
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState)
    }),
    stopped: core.serialization.object({}),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo)
    }),
    gradedTestCase: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).GradedTestCaseUpdate),
    recordedTestCase: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).RecordedTestCaseUpdate),
    finished: core.serialization.object({})
}).transform<TraceApi.TestSubmissionUpdateInfo>({
    parse: value => {
        switch (value.type) {
            case \\"running\\": return TraceApi.TestSubmissionUpdateInfo.running(value.value);
            case \\"stopped\\": return TraceApi.TestSubmissionUpdateInfo.stopped();
            case \\"errored\\": return TraceApi.TestSubmissionUpdateInfo.errored(value.value);
            case \\"gradedTestCase\\": return TraceApi.TestSubmissionUpdateInfo.gradedTestCase(value);
            case \\"recordedTestCase\\": return TraceApi.TestSubmissionUpdateInfo.recordedTestCase(value);
            case \\"finished\\": return TraceApi.TestSubmissionUpdateInfo.finished();
            default: return TraceApi.TestSubmissionUpdateInfo._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestSubmissionUpdateInfo {
    type Raw = TestSubmissionUpdateInfo.Running | TestSubmissionUpdateInfo.Stopped | TestSubmissionUpdateInfo.Errored | TestSubmissionUpdateInfo.GradedTestCase | TestSubmissionUpdateInfo.RecordedTestCase | TestSubmissionUpdateInfo.Finished;

    interface Running {
        \\"type\\": \\"running\\";
        \\"value\\": serializers.RunningSubmissionState.Raw;
    }

    interface Stopped {
        \\"type\\": \\"stopped\\";
    }

    interface Errored {
        \\"type\\": \\"errored\\";
        \\"value\\": serializers.ErrorInfo.Raw;
    }

    interface GradedTestCase extends serializers.GradedTestCaseUpdate.Raw {
        \\"type\\": \\"gradedTestCase\\";
    }

    interface RecordedTestCase extends serializers.RecordedTestCaseUpdate.Raw {
        \\"type\\": \\"recordedTestCase\\";
    }

    interface Finished {
        \\"type\\": \\"finished\\";
    }
}
",
                    "name": "TestSubmissionUpdateInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TraceResponse: core.serialization.ObjectSchema<serializers.TraceResponse.Raw, TraceApi.TraceResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    lineNumber: core.serialization.number(),
    returnValue: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue).optional(),
    expressionLocation: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExpressionLocation).optional(),
    stack: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StackInformation),
    stdout: core.serialization.string().optional()
});

export declare namespace TraceResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"lineNumber\\": number;
        \\"returnValue\\"?: serializers.DebugVariableValue.Raw | null;
        \\"expressionLocation\\"?: serializers.ExpressionLocation.Raw | null;
        \\"stack\\": serializers.StackInformation.Raw;
        \\"stdout\\"?: string | null;
    }
}
",
                    "name": "TraceResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TraceResponseV2: core.serialization.ObjectSchema<serializers.TraceResponseV2.Raw, TraceApi.TraceResponseV2> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    lineNumber: core.serialization.number(),
    file: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TracedFile),
    returnValue: core.serialization.lazy(async () => (await import(\\"../../..\\")).DebugVariableValue).optional(),
    expressionLocation: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExpressionLocation).optional(),
    stack: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).StackInformation),
    stdout: core.serialization.string().optional()
});

export declare namespace TraceResponseV2 {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"lineNumber\\": number;
        \\"file\\": serializers.TracedFile.Raw;
        \\"returnValue\\"?: serializers.DebugVariableValue.Raw | null;
        \\"expressionLocation\\"?: serializers.ExpressionLocation.Raw | null;
        \\"stack\\": serializers.StackInformation.Raw;
        \\"stdout\\"?: string | null;
    }
}
",
                    "name": "TraceResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TraceResponsesPage: core.serialization.ObjectSchema<serializers.TraceResponsesPage.Raw, TraceApi.TraceResponsesPage> = core.serialization.object({
    offset: core.serialization.number().optional(),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponse))
});

export declare namespace TraceResponsesPage {
    interface Raw {
        \\"offset\\"?: number | null;
        \\"traceResponses\\": serializers.TraceResponse.Raw[];
    }
}
",
                    "name": "TraceResponsesPage.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TraceResponsesPageV2: core.serialization.ObjectSchema<serializers.TraceResponsesPageV2.Raw, TraceApi.TraceResponsesPageV2> = core.serialization.object({
    offset: core.serialization.number().optional(),
    traceResponses: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TraceResponseV2))
});

export declare namespace TraceResponsesPageV2 {
    interface Raw {
        \\"offset\\"?: number | null;
        \\"traceResponses\\": serializers.TraceResponseV2.Raw[];
    }
}
",
                    "name": "TraceResponsesPageV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TracedFile: core.serialization.ObjectSchema<serializers.TracedFile.Raw, TraceApi.TracedFile> = core.serialization.object({
    filename: core.serialization.string(),
    directory: core.serialization.string()
});

export declare namespace TracedFile {
    interface Raw {
        \\"filename\\": string;
        \\"directory\\": string;
    }
}
",
                    "name": "TracedFile.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const TracedTestCase: core.serialization.ObjectSchema<serializers.TracedTestCase.Raw, TraceApi.TracedTestCase> = core.serialization.object({
    result: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).TestCaseResultWithStdout),
    traceResponsesSize: core.serialization.number()
});

export declare namespace TracedTestCase {
    interface Raw {
        \\"result\\": serializers.TestCaseResultWithStdout.Raw;
        \\"traceResponsesSize\\": number;
    }
}
",
                    "name": "TracedTestCase.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const UnexpectedLanguageError: core.serialization.ObjectSchema<serializers.UnexpectedLanguageError.Raw, TraceApi.UnexpectedLanguageError> = core.serialization.object({
    expectedLanguage: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    actualLanguage: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language)
});

export declare namespace UnexpectedLanguageError {
    interface Raw {
        \\"expectedLanguage\\": serializers.Language.Raw;
        \\"actualLanguage\\": serializers.Language.Raw;
    }
}
",
                    "name": "UnexpectedLanguageError.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceFiles: core.serialization.ObjectSchema<serializers.WorkspaceFiles.Raw, TraceApi.WorkspaceFiles> = core.serialization.object({
    mainFile: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo),
    readOnlyFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).FileInfo))
});

export declare namespace WorkspaceFiles {
    interface Raw {
        \\"mainFile\\": serializers.FileInfo.Raw;
        \\"readOnlyFiles\\": serializers.FileInfo.Raw[];
    }
}
",
                    "name": "WorkspaceFiles.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceRanResponse: core.serialization.ObjectSchema<serializers.WorkspaceRanResponse.Raw, TraceApi.WorkspaceRanResponse> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    runDetails: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails)
});

export declare namespace WorkspaceRanResponse {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"runDetails\\": serializers.WorkspaceRunDetails.Raw;
    }
}
",
                    "name": "WorkspaceRanResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceRunDetails: core.serialization.ObjectSchema<serializers.WorkspaceRunDetails.Raw, TraceApi.WorkspaceRunDetails> = core.serialization.object({
    exceptionV2: core.serialization.lazy(async () => (await import(\\"../../..\\")).ExceptionV2).optional(),
    exception: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).ExceptionInfo).optional(),
    stdout: core.serialization.string()
});

export declare namespace WorkspaceRunDetails {
    interface Raw {
        \\"exceptionV2\\"?: serializers.ExceptionV2.Raw | null;
        \\"exception\\"?: serializers.ExceptionInfo.Raw | null;
        \\"stdout\\": string;
    }
}
",
                    "name": "WorkspaceRunDetails.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceStarterFilesResponse: core.serialization.ObjectSchema<serializers.WorkspaceStarterFilesResponse.Raw, TraceApi.WorkspaceStarterFilesResponse> = core.serialization.object({
    files: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceFiles).optional())
});

export declare namespace WorkspaceStarterFilesResponse {
    interface Raw {
        \\"files\\": Record<serializers.Language.Raw, serializers.WorkspaceFiles.Raw | null | undefined>;
    }
}
",
                    "name": "WorkspaceStarterFilesResponse.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceStarterFilesResponseV2: core.serialization.ObjectSchema<serializers.WorkspaceStarterFilesResponseV2.Raw, TraceApi.WorkspaceStarterFilesResponseV2> = core.serialization.object({
    filesByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../..\\")).v2.Files).optional())
});

export declare namespace WorkspaceStarterFilesResponseV2 {
    interface Raw {
        \\"filesByLanguage\\": Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
",
                    "name": "WorkspaceStarterFilesResponseV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceSubmissionState: core.serialization.ObjectSchema<serializers.WorkspaceSubmissionState.Raw, TraceApi.WorkspaceSubmissionState> = core.serialization.object({
    status: core.serialization.lazy(async () => (await import(\\"../../..\\")).WorkspaceSubmissionStatus)
});

export declare namespace WorkspaceSubmissionState {
    interface Raw {
        \\"status\\": serializers.WorkspaceSubmissionStatus.Raw;
    }
}
",
                    "name": "WorkspaceSubmissionState.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceSubmissionStatus: core.serialization.Schema<serializers.WorkspaceSubmissionStatus.Raw, TraceApi.WorkspaceSubmissionStatus> = core.serialization.union(\\"type\\", {
    stopped: core.serialization.object({}),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo)
    }),
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState)
    }),
    ran: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails),
    traced: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails)
}).transform<TraceApi.WorkspaceSubmissionStatus>({
    parse: value => {
        switch (value.type) {
            case \\"stopped\\": return TraceApi.WorkspaceSubmissionStatus.stopped();
            case \\"errored\\": return TraceApi.WorkspaceSubmissionStatus.errored(value.value);
            case \\"running\\": return TraceApi.WorkspaceSubmissionStatus.running(value.value);
            case \\"ran\\": return TraceApi.WorkspaceSubmissionStatus.ran(value);
            case \\"traced\\": return TraceApi.WorkspaceSubmissionStatus.traced(value);
            default: return TraceApi.WorkspaceSubmissionStatus._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace WorkspaceSubmissionStatus {
    type Raw = WorkspaceSubmissionStatus.Stopped | WorkspaceSubmissionStatus.Errored | WorkspaceSubmissionStatus.Running | WorkspaceSubmissionStatus.Ran | WorkspaceSubmissionStatus.Traced;

    interface Stopped {
        \\"type\\": \\"stopped\\";
    }

    interface Errored {
        \\"type\\": \\"errored\\";
        \\"value\\": serializers.ErrorInfo.Raw;
    }

    interface Running {
        \\"type\\": \\"running\\";
        \\"value\\": serializers.RunningSubmissionState.Raw;
    }

    interface Ran extends serializers.WorkspaceRunDetails.Raw {
        \\"type\\": \\"ran\\";
    }

    interface Traced extends serializers.WorkspaceRunDetails.Raw {
        \\"type\\": \\"traced\\";
    }
}
",
                    "name": "WorkspaceSubmissionStatus.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceSubmissionStatusV2: core.serialization.ObjectSchema<serializers.WorkspaceSubmissionStatusV2.Raw, TraceApi.WorkspaceSubmissionStatusV2> = core.serialization.object({
    updates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceSubmissionUpdate))
});

export declare namespace WorkspaceSubmissionStatusV2 {
    interface Raw {
        \\"updates\\": serializers.WorkspaceSubmissionUpdate.Raw[];
    }
}
",
                    "name": "WorkspaceSubmissionStatusV2.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceSubmissionUpdate: core.serialization.ObjectSchema<serializers.WorkspaceSubmissionUpdate.Raw, TraceApi.WorkspaceSubmissionUpdate> = core.serialization.object({
    updateTime: core.serialization.date(),
    updateInfo: core.serialization.lazy(async () => (await import(\\"../../..\\")).WorkspaceSubmissionUpdateInfo)
});

export declare namespace WorkspaceSubmissionUpdate {
    interface Raw {
        \\"updateTime\\": string;
        \\"updateInfo\\": serializers.WorkspaceSubmissionUpdateInfo.Raw;
    }
}
",
                    "name": "WorkspaceSubmissionUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceSubmissionUpdateInfo: core.serialization.Schema<serializers.WorkspaceSubmissionUpdateInfo.Raw, TraceApi.WorkspaceSubmissionUpdateInfo> = core.serialization.union(\\"type\\", {
    running: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).RunningSubmissionState)
    }),
    ran: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceRunDetails),
    stopped: core.serialization.object({}),
    traced: core.serialization.object({}),
    tracedV2: core.serialization.lazyObject(async () => (await import(\\"../../..\\")).WorkspaceTracedUpdate),
    errored: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../..\\")).ErrorInfo)
    }),
    finished: core.serialization.object({})
}).transform<TraceApi.WorkspaceSubmissionUpdateInfo>({
    parse: value => {
        switch (value.type) {
            case \\"running\\": return TraceApi.WorkspaceSubmissionUpdateInfo.running(value.value);
            case \\"ran\\": return TraceApi.WorkspaceSubmissionUpdateInfo.ran(value);
            case \\"stopped\\": return TraceApi.WorkspaceSubmissionUpdateInfo.stopped();
            case \\"traced\\": return TraceApi.WorkspaceSubmissionUpdateInfo.traced();
            case \\"tracedV2\\": return TraceApi.WorkspaceSubmissionUpdateInfo.tracedV2(value);
            case \\"errored\\": return TraceApi.WorkspaceSubmissionUpdateInfo.errored(value.value);
            case \\"finished\\": return TraceApi.WorkspaceSubmissionUpdateInfo.finished();
            default: return TraceApi.WorkspaceSubmissionUpdateInfo._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace WorkspaceSubmissionUpdateInfo {
    type Raw = WorkspaceSubmissionUpdateInfo.Running | WorkspaceSubmissionUpdateInfo.Ran | WorkspaceSubmissionUpdateInfo.Stopped | WorkspaceSubmissionUpdateInfo.Traced | WorkspaceSubmissionUpdateInfo.TracedV2 | WorkspaceSubmissionUpdateInfo.Errored | WorkspaceSubmissionUpdateInfo.Finished;

    interface Running {
        \\"type\\": \\"running\\";
        \\"value\\": serializers.RunningSubmissionState.Raw;
    }

    interface Ran extends serializers.WorkspaceRunDetails.Raw {
        \\"type\\": \\"ran\\";
    }

    interface Stopped {
        \\"type\\": \\"stopped\\";
    }

    interface Traced {
        \\"type\\": \\"traced\\";
    }

    interface TracedV2 extends serializers.WorkspaceTracedUpdate.Raw {
        \\"type\\": \\"tracedV2\\";
    }

    interface Errored {
        \\"type\\": \\"errored\\";
        \\"value\\": serializers.ErrorInfo.Raw;
    }

    interface Finished {
        \\"type\\": \\"finished\\";
    }
}
",
                    "name": "WorkspaceSubmissionUpdateInfo.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceSubmitRequest: core.serialization.ObjectSchema<serializers.WorkspaceSubmitRequest.Raw, TraceApi.WorkspaceSubmitRequest> = core.serialization.object({
    submissionId: core.serialization.lazy(async () => (await import(\\"../../..\\")).SubmissionId),
    language: core.serialization.lazy(async () => (await import(\\"../../..\\")).Language),
    submissionFiles: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../..\\")).SubmissionFileInfo)),
    userId: core.serialization.string().optional()
});

export declare namespace WorkspaceSubmitRequest {
    interface Raw {
        \\"submissionId\\": serializers.SubmissionId.Raw;
        \\"language\\": serializers.Language.Raw;
        \\"submissionFiles\\": serializers.SubmissionFileInfo.Raw[];
        \\"userId\\"?: string | null;
    }
}
",
                    "name": "WorkspaceSubmitRequest.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const WorkspaceTracedUpdate: core.serialization.ObjectSchema<serializers.WorkspaceTracedUpdate.Raw, TraceApi.WorkspaceTracedUpdate> = core.serialization.object({
    traceResponsesSize: core.serialization.number()
});

export declare namespace WorkspaceTracedUpdate {
    interface Raw {
        \\"traceResponsesSize\\": number;
    }
}
",
                    "name": "WorkspaceTracedUpdate.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * from \\"./SubmissionId\\";
export * from \\"./ShareId\\";
export * from \\"./SubmissionRequest\\";
export * from \\"./InitializeProblemRequest\\";
export * from \\"./SubmitRequestV2\\";
export * from \\"./WorkspaceSubmitRequest\\";
export * from \\"./SubmissionFileInfo\\";
export * from \\"./SubmissionTypeEnum\\";
export * from \\"./StopRequest\\";
export * from \\"./SubmissionResponse\\";
export * from \\"./CodeExecutionUpdate\\";
export * from \\"./BuildingExecutorResponse\\";
export * from \\"./RunningResponse\\";
export * from \\"./RunningSubmissionState\\";
export * from \\"./ErroredResponse\\";
export * from \\"./ErrorInfo\\";
export * from \\"./CompileError\\";
export * from \\"./RuntimeError\\";
export * from \\"./InternalError\\";
export * from \\"./StoppedResponse\\";
export * from \\"./WorkspaceRanResponse\\";
export * from \\"./WorkspaceRunDetails\\";
export * from \\"./GradedResponse\\";
export * from \\"./GradedResponseV2\\";
export * from \\"./TestCaseGrade\\";
export * from \\"./TestCaseHiddenGrade\\";
export * from \\"./TestCaseNonHiddenGrade\\";
export * from \\"./RecordedResponseNotification\\";
export * from \\"./RecordingResponseNotification\\";
export * from \\"./LightweightStackframeInformation\\";
export * from \\"./TestCaseResultWithStdout\\";
export * from \\"./TestCaseResult\\";
export * from \\"./ActualResult\\";
export * from \\"./ExceptionV2\\";
export * from \\"./ExceptionInfo\\";
export * from \\"./InvalidRequestResponse\\";
export * from \\"./InvalidRequestCause\\";
export * from \\"./ExistingSubmissionExecuting\\";
export * from \\"./SubmissionIdNotFound\\";
export * from \\"./CustomTestCasesUnsupported\\";
export * from \\"./UnexpectedLanguageError\\";
export * from \\"./TerminatedResponse\\";
export * from \\"./FinishedResponse\\";
export * from \\"./StdoutResponse\\";
export * from \\"./StderrResponse\\";
export * from \\"./TraceResponse\\";
export * from \\"./TraceResponseV2\\";
export * from \\"./TracedFile\\";
export * from \\"./ExpressionLocation\\";
export * from \\"./StackInformation\\";
export * from \\"./StackFrame\\";
export * from \\"./Scope\\";
export * from \\"./ExecutionSessionResponse\\";
export * from \\"./ExecutionSessionStatus\\";
export * from \\"./SubmissionStatusV2\\";
export * from \\"./TestSubmissionStatusV2\\";
export * from \\"./WorkspaceSubmissionStatusV2\\";
export * from \\"./TestSubmissionUpdate\\";
export * from \\"./TestSubmissionUpdateInfo\\";
export * from \\"./WorkspaceSubmissionUpdate\\";
export * from \\"./WorkspaceSubmissionUpdateInfo\\";
export * from \\"./GradedTestCaseUpdate\\";
export * from \\"./RecordedTestCaseUpdate\\";
export * from \\"./WorkspaceTracedUpdate\\";
export * from \\"./SubmissionTypeState\\";
export * from \\"./WorkspaceSubmissionState\\";
export * from \\"./WorkspaceSubmissionStatus\\";
export * from \\"./TestSubmissionState\\";
export * from \\"./TestSubmissionStatus\\";
export * from \\"./SubmissionStatusForTestCase\\";
export * from \\"./TracedTestCase\\";
export * from \\"./TraceResponsesPage\\";
export * from \\"./TraceResponsesPageV2\\";
export * from \\"./GetTraceResponsesPageRequest\\";
export * from \\"./WorkspaceStarterFilesResponse\\";
export * from \\"./WorkspaceStarterFilesResponseV2\\";
export * from \\"./WorkspaceFiles\\";
export * from \\"./ExecutionSessionState\\";
export * from \\"./GetExecutionSessionStateResponse\\";
export * from \\"./GetSubmissionStateResponse\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "types",
                "type": "directory",
              },
            ],
            "name": "submission",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./service\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../..\\";
import { TraceApi } from \\"../../../..\\";
import * as core from \\"../../../../core\\";

export const Response: core.serialization.Schema<serializers.sysprop.getNumWarmInstances.Response.Raw, Record<TraceApi.Language, number | undefined>> = core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../..\\")).Language), core.serialization.number().optional());

export declare namespace Response {
    type Raw = Record<serializers.Language.Raw, number | null | undefined>;
}
",
                    "name": "getNumWarmInstances.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": "export * as getNumWarmInstances from \\"./getNumWarmInstances\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                ],
                "name": "service",
                "type": "directory",
              },
            ],
            "name": "sysprop",
            "type": "directory",
          },
          Object {
            "contents": Array [
              Object {
                "contents": "export * from \\"./resources\\";
",
                "name": "index.ts",
                "type": "file",
              },
              Object {
                "contents": Array [
                  Object {
                    "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
export * as v3 from \\"./v3\\";
",
                    "name": "index.ts",
                    "type": "file",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const Response: core.serialization.Schema<serializers.v2.problem.getLightweightProblems.Response.Raw, TraceApi.v2.LightweightProblemInfoV2[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.LightweightProblemInfoV2));

export declare namespace Response {
    type Raw = serializers.v2.LightweightProblemInfoV2.Raw[];
}
",
                            "name": "getLightweightProblems.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const Response: core.serialization.Schema<serializers.v2.problem.getProblems.Response.Raw, TraceApi.v2.ProblemInfoV2[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.ProblemInfoV2));

export declare namespace Response {
    type Raw = serializers.v2.ProblemInfoV2.Raw[];
}
",
                            "name": "getProblems.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * as getLightweightProblems from \\"./getLightweightProblems\\";
export * as getProblems from \\"./getProblems\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                        ],
                        "name": "service",
                        "type": "directory",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const AssertCorrectnessCheck: core.serialization.Schema<serializers.v2.AssertCorrectnessCheck.Raw, TraceApi.v2.AssertCorrectnessCheck> = core.serialization.union(\\"type\\", {
    deepEquality: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.DeepEqualityCorrectnessCheck),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionDefinitionThatTakesActualResult)
}).transform<TraceApi.v2.AssertCorrectnessCheck>({
    parse: value => {
        switch (value.type) {
            case \\"deepEquality\\": return TraceApi.v2.AssertCorrectnessCheck.deepEquality(value);
            case \\"custom\\": return TraceApi.v2.AssertCorrectnessCheck.custom(value);
            default: return TraceApi.v2.AssertCorrectnessCheck._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace AssertCorrectnessCheck {
    type Raw = AssertCorrectnessCheck.DeepEquality | AssertCorrectnessCheck.Custom;

    interface DeepEquality extends serializers.v2.DeepEqualityCorrectnessCheck.Raw {
        \\"type\\": \\"deepEquality\\";
    }

    interface Custom extends serializers.v2.VoidFunctionDefinitionThatTakesActualResult.Raw {
        \\"type\\": \\"custom\\";
    }
}
",
                            "name": "AssertCorrectnessCheck.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const BasicCustomFiles: core.serialization.ObjectSchema<serializers.v2.BasicCustomFiles.Raw, TraceApi.v2.BasicCustomFiles> = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
    additionalFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    basicTestCaseTemplate: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.BasicTestCaseTemplate)
});

export declare namespace BasicCustomFiles {
    interface Raw {
        \\"methodName\\": string;
        \\"signature\\": serializers.v2.NonVoidFunctionSignature.Raw;
        \\"additionalFiles\\": Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
        \\"basicTestCaseTemplate\\": serializers.v2.BasicTestCaseTemplate.Raw;
    }
}
",
                            "name": "BasicCustomFiles.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const BasicTestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.BasicTestCaseTemplate.Raw, TraceApi.v2.BasicTestCaseTemplate> = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplateId),
    name: core.serialization.string(),
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationDescription),
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId)
});

export declare namespace BasicTestCaseTemplate {
    interface Raw {
        \\"templateId\\": serializers.v2.TestCaseTemplateId.Raw;
        \\"name\\": string;
        \\"description\\": serializers.v2.TestCaseImplementationDescription.Raw;
        \\"expectedValueParameterId\\": serializers.v2.ParameterId.Raw;
    }
}
",
                            "name": "BasicTestCaseTemplate.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const CreateProblemRequestV2: core.serialization.ObjectSchema<serializers.v2.CreateProblemRequestV2.Raw, TraceApi.v2.CreateProblemRequestV2> = core.serialization.object({
    problemName: core.serialization.string(),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).ProblemDescription),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.CustomFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseV2)),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language)),
    isPublic: core.serialization.boolean()
});

export declare namespace CreateProblemRequestV2 {
    interface Raw {
        \\"problemName\\": string;
        \\"problemDescription\\": serializers.ProblemDescription.Raw;
        \\"customFiles\\": serializers.v2.CustomFiles.Raw;
        \\"customTestCaseTemplates\\": serializers.v2.TestCaseTemplate.Raw[];
        \\"testcases\\": serializers.v2.TestCaseV2.Raw[];
        \\"supportedLanguages\\": serializers.Language.Raw[];
        \\"isPublic\\": boolean;
    }
}
",
                            "name": "CreateProblemRequestV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const CustomFiles: core.serialization.Schema<serializers.v2.CustomFiles.Raw, TraceApi.v2.CustomFiles> = core.serialization.union(\\"type\\", {
    basic: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.BasicCustomFiles),
    custom: core.serialization.object({
        value: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional())
    })
}).transform<TraceApi.v2.CustomFiles>({
    parse: value => {
        switch (value.type) {
            case \\"basic\\": return TraceApi.v2.CustomFiles.basic(value);
            case \\"custom\\": return TraceApi.v2.CustomFiles.custom(value.value);
            default: return TraceApi.v2.CustomFiles._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace CustomFiles {
    type Raw = CustomFiles.Basic | CustomFiles.Custom;

    interface Basic extends serializers.v2.BasicCustomFiles.Raw {
        \\"type\\": \\"basic\\";
    }

    interface Custom {
        \\"type\\": \\"custom\\";
        \\"value\\": Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
",
                            "name": "CustomFiles.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const DeepEqualityCorrectnessCheck: core.serialization.ObjectSchema<serializers.v2.DeepEqualityCorrectnessCheck.Raw, TraceApi.v2.DeepEqualityCorrectnessCheck> = core.serialization.object({
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId)
});

export declare namespace DeepEqualityCorrectnessCheck {
    interface Raw {
        \\"expectedValueParameterId\\": serializers.v2.ParameterId.Raw;
    }
}
",
                            "name": "DeepEqualityCorrectnessCheck.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const DefaultProvidedFile: core.serialization.ObjectSchema<serializers.v2.DefaultProvidedFile.Raw, TraceApi.v2.DefaultProvidedFile> = core.serialization.object({
    file: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FileInfoV2),
    relatedTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType))
});

export declare namespace DefaultProvidedFile {
    interface Raw {
        \\"file\\": serializers.v2.FileInfoV2.Raw;
        \\"relatedTypes\\": serializers.VariableType.Raw[];
    }
}
",
                            "name": "DefaultProvidedFile.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const FileInfoV2: core.serialization.ObjectSchema<serializers.v2.FileInfoV2.Raw, TraceApi.v2.FileInfoV2> = core.serialization.object({
    filename: core.serialization.string(),
    directory: core.serialization.string(),
    contents: core.serialization.string(),
    editable: core.serialization.boolean()
});

export declare namespace FileInfoV2 {
    interface Raw {
        \\"filename\\": string;
        \\"directory\\": string;
        \\"contents\\": string;
        \\"editable\\": boolean;
    }
}
",
                            "name": "FileInfoV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const Files: core.serialization.ObjectSchema<serializers.v2.Files.Raw, TraceApi.v2.Files> = core.serialization.object({
    files: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FileInfoV2))
});

export declare namespace Files {
    interface Raw {
        \\"files\\": serializers.v2.FileInfoV2.Raw[];
    }
}
",
                            "name": "Files.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const FunctionImplementation: core.serialization.ObjectSchema<serializers.v2.FunctionImplementation.Raw, TraceApi.v2.FunctionImplementation> = core.serialization.object({
    impl: core.serialization.string(),
    imports: core.serialization.string().optional()
});

export declare namespace FunctionImplementation {
    interface Raw {
        \\"impl\\": string;
        \\"imports\\"?: string | null;
    }
}
",
                            "name": "FunctionImplementation.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const FunctionImplementationForMultipleLanguages: core.serialization.ObjectSchema<serializers.v2.FunctionImplementationForMultipleLanguages.Raw, TraceApi.v2.FunctionImplementationForMultipleLanguages> = core.serialization.object({
    codeByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementation).optional())
});

export declare namespace FunctionImplementationForMultipleLanguages {
    interface Raw {
        \\"codeByLanguage\\": Record<serializers.Language.Raw, serializers.v2.FunctionImplementation.Raw | null | undefined>;
    }
}
",
                            "name": "FunctionImplementationForMultipleLanguages.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const FunctionSignature: core.serialization.Schema<serializers.v2.FunctionSignature.Raw, TraceApi.v2.FunctionSignature> = core.serialization.union(\\"type\\", {
    void: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionSignature),
    nonVoid: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
    voidThatTakesActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionSignatureThatTakesActualResult)
}).transform<TraceApi.v2.FunctionSignature>({
    parse: value => {
        switch (value.type) {
            case \\"void\\": return TraceApi.v2.FunctionSignature.void(value);
            case \\"nonVoid\\": return TraceApi.v2.FunctionSignature.nonVoid(value);
            case \\"voidThatTakesActualResult\\": return TraceApi.v2.FunctionSignature.voidThatTakesActualResult(value);
            default: return TraceApi.v2.FunctionSignature._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace FunctionSignature {
    type Raw = FunctionSignature.Void | FunctionSignature.NonVoid | FunctionSignature.VoidThatTakesActualResult;

    interface Void extends serializers.v2.VoidFunctionSignature.Raw {
        \\"type\\": \\"void\\";
    }

    interface NonVoid extends serializers.v2.NonVoidFunctionSignature.Raw {
        \\"type\\": \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends serializers.v2.VoidFunctionSignatureThatTakesActualResult.Raw {
        \\"type\\": \\"voidThatTakesActualResult\\";
    }
}
",
                            "name": "FunctionSignature.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GeneratedFiles: core.serialization.ObjectSchema<serializers.v2.GeneratedFiles.Raw, TraceApi.v2.GeneratedFiles> = core.serialization.object({
    generatedTestCaseFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    generatedTemplateFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional()),
    other: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Files).optional())
});

export declare namespace GeneratedFiles {
    interface Raw {
        \\"generatedTestCaseFiles\\": Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
        \\"generatedTemplateFiles\\": Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
        \\"other\\": Record<serializers.Language.Raw, serializers.v2.Files.Raw | null | undefined>;
    }
}
",
                            "name": "GeneratedFiles.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GetBasicSolutionFileRequest: core.serialization.ObjectSchema<serializers.v2.GetBasicSolutionFileRequest.Raw, TraceApi.v2.GetBasicSolutionFileRequest> = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature)
});

export declare namespace GetBasicSolutionFileRequest {
    interface Raw {
        \\"methodName\\": string;
        \\"signature\\": serializers.v2.NonVoidFunctionSignature.Raw;
    }
}
",
                            "name": "GetBasicSolutionFileRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GetBasicSolutionFileResponse: core.serialization.ObjectSchema<serializers.v2.GetBasicSolutionFileResponse.Raw, TraceApi.v2.GetBasicSolutionFileResponse> = core.serialization.object({
    solutionFileByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FileInfoV2).optional())
});

export declare namespace GetBasicSolutionFileResponse {
    interface Raw {
        \\"solutionFileByLanguage\\": Record<serializers.Language.Raw, serializers.v2.FileInfoV2.Raw | null | undefined>;
    }
}
",
                            "name": "GetBasicSolutionFileResponse.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GetFunctionSignatureRequest: core.serialization.ObjectSchema<serializers.v2.GetFunctionSignatureRequest.Raw, TraceApi.v2.GetFunctionSignatureRequest> = core.serialization.object({
    functionSignature: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.FunctionSignature)
});

export declare namespace GetFunctionSignatureRequest {
    interface Raw {
        \\"functionSignature\\": serializers.v2.FunctionSignature.Raw;
    }
}
",
                            "name": "GetFunctionSignatureRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GetFunctionSignatureResponse: core.serialization.ObjectSchema<serializers.v2.GetFunctionSignatureResponse.Raw, TraceApi.v2.GetFunctionSignatureResponse> = core.serialization.object({
    functionByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language), core.serialization.string().optional())
});

export declare namespace GetFunctionSignatureResponse {
    interface Raw {
        \\"functionByLanguage\\": Record<serializers.Language.Raw, string | null | undefined>;
    }
}
",
                            "name": "GetFunctionSignatureResponse.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GetGeneratedTestCaseFileRequest: core.serialization.ObjectSchema<serializers.v2.GetGeneratedTestCaseFileRequest.Raw, TraceApi.v2.GetGeneratedTestCaseFileRequest> = core.serialization.object({
    template: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate).optional(),
    testCase: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseV2)
});

export declare namespace GetGeneratedTestCaseFileRequest {
    interface Raw {
        \\"template\\"?: serializers.v2.TestCaseTemplate.Raw | null;
        \\"testCase\\": serializers.v2.TestCaseV2.Raw;
    }
}
",
                            "name": "GetGeneratedTestCaseFileRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const GetGeneratedTestCaseTemplateFileRequest: core.serialization.ObjectSchema<serializers.v2.GetGeneratedTestCaseTemplateFileRequest.Raw, TraceApi.v2.GetGeneratedTestCaseTemplateFileRequest> = core.serialization.object({
    template: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate)
});

export declare namespace GetGeneratedTestCaseTemplateFileRequest {
    interface Raw {
        \\"template\\": serializers.v2.TestCaseTemplate.Raw;
    }
}
",
                            "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const LightweightProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.LightweightProblemInfoV2.Raw, TraceApi.v2.LightweightProblemInfoV2> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).ProblemId),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    variableTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType))
});

export declare namespace LightweightProblemInfoV2 {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemName\\": string;
        \\"problemVersion\\": number;
        \\"variableTypes\\": serializers.VariableType.Raw[];
    }
}
",
                            "name": "LightweightProblemInfoV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const NonVoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.NonVoidFunctionDefinition.Raw, TraceApi.v2.NonVoidFunctionDefinition> = core.serialization.object({
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionSignature),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementationForMultipleLanguages)
});

export declare namespace NonVoidFunctionDefinition {
    interface Raw {
        \\"signature\\": serializers.v2.NonVoidFunctionSignature.Raw;
        \\"code\\": serializers.v2.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                            "name": "NonVoidFunctionDefinition.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const NonVoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.NonVoidFunctionSignature.Raw, TraceApi.v2.NonVoidFunctionSignature> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    returnType: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType)
});

export declare namespace NonVoidFunctionSignature {
    interface Raw {
        \\"parameters\\": serializers.v2.Parameter.Raw[];
        \\"returnType\\": serializers.VariableType.Raw;
    }
}
",
                            "name": "NonVoidFunctionSignature.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const Parameter: core.serialization.ObjectSchema<serializers.v2.Parameter.Raw, TraceApi.v2.Parameter> = core.serialization.object({
    parameterId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId),
    name: core.serialization.string(),
    variableType: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType)
});

export declare namespace Parameter {
    interface Raw {
        \\"parameterId\\": serializers.v2.ParameterId.Raw;
        \\"name\\": string;
        \\"variableType\\": serializers.VariableType.Raw;
    }
}
",
                            "name": "Parameter.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const ParameterId: core.serialization.Schema<serializers.v2.ParameterId.Raw, TraceApi.v2.ParameterId> = core.serialization.string();

export declare namespace ParameterId {
    type Raw = string;
}
",
                            "name": "ParameterId.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const ProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.ProblemInfoV2.Raw, TraceApi.v2.ProblemInfoV2> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).Language)),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.CustomFiles),
    generatedFiles: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.GeneratedFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseV2)),
    isPublic: core.serialization.boolean()
});

export declare namespace ProblemInfoV2 {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemDescription\\": serializers.ProblemDescription.Raw;
        \\"problemName\\": string;
        \\"problemVersion\\": number;
        \\"supportedLanguages\\": serializers.Language.Raw[];
        \\"customFiles\\": serializers.v2.CustomFiles.Raw;
        \\"generatedFiles\\": serializers.v2.GeneratedFiles.Raw;
        \\"customTestCaseTemplates\\": serializers.v2.TestCaseTemplate.Raw[];
        \\"testcases\\": serializers.v2.TestCaseV2.Raw[];
        \\"isPublic\\": boolean;
    }
}
",
                            "name": "ProblemInfoV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseExpects: core.serialization.ObjectSchema<serializers.v2.TestCaseExpects.Raw, TraceApi.v2.TestCaseExpects> = core.serialization.object({
    expectedStdout: core.serialization.string().optional()
});

export declare namespace TestCaseExpects {
    interface Raw {
        \\"expectedStdout\\"?: string | null;
    }
}
",
                            "name": "TestCaseExpects.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseFunction: core.serialization.Schema<serializers.v2.TestCaseFunction.Raw, TraceApi.v2.TestCaseFunction> = core.serialization.union(\\"type\\", {
    withActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseWithActualResultImplementation),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.VoidFunctionDefinition)
}).transform<TraceApi.v2.TestCaseFunction>({
    parse: value => {
        switch (value.type) {
            case \\"withActualResult\\": return TraceApi.v2.TestCaseFunction.withActualResult(value);
            case \\"custom\\": return TraceApi.v2.TestCaseFunction.custom(value);
            default: return TraceApi.v2.TestCaseFunction._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseFunction {
    type Raw = TestCaseFunction.WithActualResult | TestCaseFunction.Custom;

    interface WithActualResult extends serializers.v2.TestCaseWithActualResultImplementation.Raw {
        \\"type\\": \\"withActualResult\\";
    }

    interface Custom extends serializers.v2.VoidFunctionDefinition.Raw {
        \\"type\\": \\"custom\\";
    }
}
",
                            "name": "TestCaseFunction.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseId: core.serialization.Schema<serializers.v2.TestCaseId.Raw, TraceApi.v2.TestCaseId> = core.serialization.string();

export declare namespace TestCaseId {
    type Raw = string;
}
",
                            "name": "TestCaseId.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseImplementation: core.serialization.ObjectSchema<serializers.v2.TestCaseImplementation.Raw, TraceApi.v2.TestCaseImplementation> = core.serialization.object({
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationDescription),
    function: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseFunction)
});

export declare namespace TestCaseImplementation {
    interface Raw {
        \\"description\\": serializers.v2.TestCaseImplementationDescription.Raw;
        \\"function\\": serializers.v2.TestCaseFunction.Raw;
    }
}
",
                            "name": "TestCaseImplementation.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseImplementationDescription: core.serialization.ObjectSchema<serializers.v2.TestCaseImplementationDescription.Raw, TraceApi.v2.TestCaseImplementationDescription> = core.serialization.object({
    boards: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationDescriptionBoard))
});

export declare namespace TestCaseImplementationDescription {
    interface Raw {
        \\"boards\\": serializers.v2.TestCaseImplementationDescriptionBoard.Raw[];
    }
}
",
                            "name": "TestCaseImplementationDescription.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseImplementationDescriptionBoard: core.serialization.Schema<serializers.v2.TestCaseImplementationDescriptionBoard.Raw, TraceApi.v2.TestCaseImplementationDescriptionBoard> = core.serialization.union(\\"type\\", {
    html: core.serialization.object({
        value: core.serialization.string()
    }),
    paramId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId)
    })
}).transform<TraceApi.v2.TestCaseImplementationDescriptionBoard>({
    parse: value => {
        switch (value.type) {
            case \\"html\\": return TraceApi.v2.TestCaseImplementationDescriptionBoard.html(value.value);
            case \\"paramId\\": return TraceApi.v2.TestCaseImplementationDescriptionBoard.paramId(value.value);
            default: return TraceApi.v2.TestCaseImplementationDescriptionBoard._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseImplementationDescriptionBoard {
    type Raw = TestCaseImplementationDescriptionBoard.Html | TestCaseImplementationDescriptionBoard.ParamId;

    interface Html {
        \\"type\\": \\"html\\";
        \\"value\\": string;
    }

    interface ParamId {
        \\"type\\": \\"paramId\\";
        \\"value\\": serializers.v2.ParameterId.Raw;
    }
}
",
                            "name": "TestCaseImplementationDescriptionBoard.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseImplementationReference: core.serialization.Schema<serializers.v2.TestCaseImplementationReference.Raw, TraceApi.v2.TestCaseImplementationReference> = core.serialization.union(\\"type\\", {
    templateId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplateId)
    }),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementation)
}).transform<TraceApi.v2.TestCaseImplementationReference>({
    parse: value => {
        switch (value.type) {
            case \\"templateId\\": return TraceApi.v2.TestCaseImplementationReference.templateId(value.value);
            case \\"implementation\\": return TraceApi.v2.TestCaseImplementationReference.implementation(value);
            default: return TraceApi.v2.TestCaseImplementationReference._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseImplementationReference {
    type Raw = TestCaseImplementationReference.TemplateId | TestCaseImplementationReference.Implementation;

    interface TemplateId {
        \\"type\\": \\"templateId\\";
        \\"value\\": serializers.v2.TestCaseTemplateId.Raw;
    }

    interface Implementation extends serializers.v2.TestCaseImplementation.Raw {
        \\"type\\": \\"implementation\\";
    }
}
",
                            "name": "TestCaseImplementationReference.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseMetadata: core.serialization.ObjectSchema<serializers.v2.TestCaseMetadata.Raw, TraceApi.v2.TestCaseMetadata> = core.serialization.object({
    id: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseId),
    name: core.serialization.string(),
    hidden: core.serialization.boolean()
});

export declare namespace TestCaseMetadata {
    interface Raw {
        \\"id\\": serializers.v2.TestCaseId.Raw;
        \\"name\\": string;
        \\"hidden\\": boolean;
    }
}
",
                            "name": "TestCaseMetadata.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.TestCaseTemplate.Raw, TraceApi.v2.TestCaseTemplate> = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseTemplateId),
    name: core.serialization.string(),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementation)
});

export declare namespace TestCaseTemplate {
    interface Raw {
        \\"templateId\\": serializers.v2.TestCaseTemplateId.Raw;
        \\"name\\": string;
        \\"implementation\\": serializers.v2.TestCaseImplementation.Raw;
    }
}
",
                            "name": "TestCaseTemplate.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseTemplateId: core.serialization.Schema<serializers.v2.TestCaseTemplateId.Raw, TraceApi.v2.TestCaseTemplateId> = core.serialization.string();

export declare namespace TestCaseTemplateId {
    type Raw = string;
}
",
                            "name": "TestCaseTemplateId.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseV2: core.serialization.ObjectSchema<serializers.v2.TestCaseV2.Raw, TraceApi.v2.TestCaseV2> = core.serialization.object({
    metadata: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseMetadata),
    implementation: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.TestCaseImplementationReference),
    arguments: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.ParameterId), core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableValue)),
    expects: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.TestCaseExpects).optional()
});

export declare namespace TestCaseV2 {
    interface Raw {
        \\"metadata\\": serializers.v2.TestCaseMetadata.Raw;
        \\"implementation\\": serializers.v2.TestCaseImplementationReference.Raw;
        \\"arguments\\": Record<serializers.v2.ParameterId.Raw, serializers.VariableValue.Raw>;
        \\"expects\\"?: serializers.v2.TestCaseExpects.Raw | null;
    }
}
",
                            "name": "TestCaseV2.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const TestCaseWithActualResultImplementation: core.serialization.ObjectSchema<serializers.v2.TestCaseWithActualResultImplementation.Raw, TraceApi.v2.TestCaseWithActualResultImplementation> = core.serialization.object({
    getActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.NonVoidFunctionDefinition),
    assertCorrectnessCheck: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).v2.AssertCorrectnessCheck)
});

export declare namespace TestCaseWithActualResultImplementation {
    interface Raw {
        \\"getActualResult\\": serializers.v2.NonVoidFunctionDefinition.Raw;
        \\"assertCorrectnessCheck\\": serializers.v2.AssertCorrectnessCheck.Raw;
    }
}
",
                            "name": "TestCaseWithActualResultImplementation.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const VoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.VoidFunctionDefinition.Raw, TraceApi.v2.VoidFunctionDefinition> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementationForMultipleLanguages)
});

export declare namespace VoidFunctionDefinition {
    interface Raw {
        \\"parameters\\": serializers.v2.Parameter.Raw[];
        \\"code\\": serializers.v2.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                            "name": "VoidFunctionDefinition.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const VoidFunctionDefinitionThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.VoidFunctionDefinitionThatTakesActualResult.Raw, TraceApi.v2.VoidFunctionDefinitionThatTakesActualResult> = core.serialization.object({
    additionalParameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.FunctionImplementationForMultipleLanguages)
});

export declare namespace VoidFunctionDefinitionThatTakesActualResult {
    interface Raw {
        \\"additionalParameters\\": serializers.v2.Parameter.Raw[];
        \\"code\\": serializers.v2.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                            "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const VoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.VoidFunctionSignature.Raw, TraceApi.v2.VoidFunctionSignature> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter))
});

export declare namespace VoidFunctionSignature {
    interface Raw {
        \\"parameters\\": serializers.v2.Parameter.Raw[];
    }
}
",
                            "name": "VoidFunctionSignature.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../..\\";
import { TraceApi } from \\"../../../../../..\\";
import * as core from \\"../../../../../../core\\";

export const VoidFunctionSignatureThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.VoidFunctionSignatureThatTakesActualResult.Raw, TraceApi.v2.VoidFunctionSignatureThatTakesActualResult> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../..\\")).v2.Parameter)),
    actualResultType: core.serialization.lazy(async () => (await import(\\"../../../../..\\")).VariableType)
});

export declare namespace VoidFunctionSignatureThatTakesActualResult {
    interface Raw {
        \\"parameters\\": serializers.v2.Parameter.Raw[];
        \\"actualResultType\\": serializers.VariableType.Raw;
    }
}
",
                            "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                        ],
                        "name": "types",
                        "type": "directory",
                      },
                    ],
                    "name": "problem",
                    "type": "directory",
                  },
                  Object {
                    "contents": Array [
                      Object {
                        "contents": "export * from \\"./resources\\";
",
                        "name": "index.ts",
                        "type": "file",
                      },
                      Object {
                        "contents": Array [
                          Object {
                            "contents": "export * as problem from \\"./problem\\";
export * from \\"./problem/types\\";
",
                            "name": "index.ts",
                            "type": "file",
                          },
                          Object {
                            "contents": Array [
                              Object {
                                "contents": "export * from \\"./types\\";
export * from \\"./service\\";
",
                                "name": "index.ts",
                                "type": "file",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const Response: core.serialization.Schema<serializers.v2.v3.problem.getLightweightProblems.Response.Raw, TraceApi.v2.v3.LightweightProblemInfoV2[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.LightweightProblemInfoV2));

export declare namespace Response {
    type Raw = serializers.v2.v3.LightweightProblemInfoV2.Raw[];
}
",
                                    "name": "getLightweightProblems.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const Response: core.serialization.Schema<serializers.v2.v3.problem.getProblems.Response.Raw, TraceApi.v2.v3.ProblemInfoV2[]> = core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.ProblemInfoV2));

export declare namespace Response {
    type Raw = serializers.v2.v3.ProblemInfoV2.Raw[];
}
",
                                    "name": "getProblems.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * as getLightweightProblems from \\"./getLightweightProblems\\";
export * as getProblems from \\"./getProblems\\";
",
                                    "name": "index.ts",
                                    "type": "file",
                                  },
                                ],
                                "name": "service",
                                "type": "directory",
                              },
                              Object {
                                "contents": Array [
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const AssertCorrectnessCheck: core.serialization.Schema<serializers.v2.v3.AssertCorrectnessCheck.Raw, TraceApi.v2.v3.AssertCorrectnessCheck> = core.serialization.union(\\"type\\", {
    deepEquality: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.DeepEqualityCorrectnessCheck),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionDefinitionThatTakesActualResult)
}).transform<TraceApi.v2.v3.AssertCorrectnessCheck>({
    parse: value => {
        switch (value.type) {
            case \\"deepEquality\\": return TraceApi.v2.v3.AssertCorrectnessCheck.deepEquality(value);
            case \\"custom\\": return TraceApi.v2.v3.AssertCorrectnessCheck.custom(value);
            default: return TraceApi.v2.v3.AssertCorrectnessCheck._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace AssertCorrectnessCheck {
    type Raw = AssertCorrectnessCheck.DeepEquality | AssertCorrectnessCheck.Custom;

    interface DeepEquality extends serializers.v2.v3.DeepEqualityCorrectnessCheck.Raw {
        \\"type\\": \\"deepEquality\\";
    }

    interface Custom extends serializers.v2.v3.VoidFunctionDefinitionThatTakesActualResult.Raw {
        \\"type\\": \\"custom\\";
    }
}
",
                                    "name": "AssertCorrectnessCheck.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const BasicCustomFiles: core.serialization.ObjectSchema<serializers.v2.v3.BasicCustomFiles.Raw, TraceApi.v2.v3.BasicCustomFiles> = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
    additionalFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
    basicTestCaseTemplate: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.BasicTestCaseTemplate)
});

export declare namespace BasicCustomFiles {
    interface Raw {
        \\"methodName\\": string;
        \\"signature\\": serializers.v2.v3.NonVoidFunctionSignature.Raw;
        \\"additionalFiles\\": Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        \\"basicTestCaseTemplate\\": serializers.v2.v3.BasicTestCaseTemplate.Raw;
    }
}
",
                                    "name": "BasicCustomFiles.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const BasicTestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.v3.BasicTestCaseTemplate.Raw, TraceApi.v2.v3.BasicTestCaseTemplate> = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplateId),
    name: core.serialization.string(),
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationDescription),
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId)
});

export declare namespace BasicTestCaseTemplate {
    interface Raw {
        \\"templateId\\": serializers.v2.v3.TestCaseTemplateId.Raw;
        \\"name\\": string;
        \\"description\\": serializers.v2.v3.TestCaseImplementationDescription.Raw;
        \\"expectedValueParameterId\\": serializers.v2.v3.ParameterId.Raw;
    }
}
",
                                    "name": "BasicTestCaseTemplate.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const CreateProblemRequestV2: core.serialization.ObjectSchema<serializers.v2.v3.CreateProblemRequestV2.Raw, TraceApi.v2.v3.CreateProblemRequestV2> = core.serialization.object({
    problemName: core.serialization.string(),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).ProblemDescription),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.CustomFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseV2)),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language)),
    isPublic: core.serialization.boolean()
});

export declare namespace CreateProblemRequestV2 {
    interface Raw {
        \\"problemName\\": string;
        \\"problemDescription\\": serializers.ProblemDescription.Raw;
        \\"customFiles\\": serializers.v2.v3.CustomFiles.Raw;
        \\"customTestCaseTemplates\\": serializers.v2.v3.TestCaseTemplate.Raw[];
        \\"testcases\\": serializers.v2.v3.TestCaseV2.Raw[];
        \\"supportedLanguages\\": serializers.Language.Raw[];
        \\"isPublic\\": boolean;
    }
}
",
                                    "name": "CreateProblemRequestV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const CustomFiles: core.serialization.Schema<serializers.v2.v3.CustomFiles.Raw, TraceApi.v2.v3.CustomFiles> = core.serialization.union(\\"type\\", {
    basic: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.BasicCustomFiles),
    custom: core.serialization.object({
        value: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional())
    })
}).transform<TraceApi.v2.v3.CustomFiles>({
    parse: value => {
        switch (value.type) {
            case \\"basic\\": return TraceApi.v2.v3.CustomFiles.basic(value);
            case \\"custom\\": return TraceApi.v2.v3.CustomFiles.custom(value.value);
            default: return TraceApi.v2.v3.CustomFiles._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace CustomFiles {
    type Raw = CustomFiles.Basic | CustomFiles.Custom;

    interface Basic extends serializers.v2.v3.BasicCustomFiles.Raw {
        \\"type\\": \\"basic\\";
    }

    interface Custom {
        \\"type\\": \\"custom\\";
        \\"value\\": Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
    }
}
",
                                    "name": "CustomFiles.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const DeepEqualityCorrectnessCheck: core.serialization.ObjectSchema<serializers.v2.v3.DeepEqualityCorrectnessCheck.Raw, TraceApi.v2.v3.DeepEqualityCorrectnessCheck> = core.serialization.object({
    expectedValueParameterId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId)
});

export declare namespace DeepEqualityCorrectnessCheck {
    interface Raw {
        \\"expectedValueParameterId\\": serializers.v2.v3.ParameterId.Raw;
    }
}
",
                                    "name": "DeepEqualityCorrectnessCheck.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const DefaultProvidedFile: core.serialization.ObjectSchema<serializers.v2.v3.DefaultProvidedFile.Raw, TraceApi.v2.v3.DefaultProvidedFile> = core.serialization.object({
    file: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FileInfoV2),
    relatedTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType))
});

export declare namespace DefaultProvidedFile {
    interface Raw {
        \\"file\\": serializers.v2.v3.FileInfoV2.Raw;
        \\"relatedTypes\\": serializers.VariableType.Raw[];
    }
}
",
                                    "name": "DefaultProvidedFile.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const FileInfoV2: core.serialization.ObjectSchema<serializers.v2.v3.FileInfoV2.Raw, TraceApi.v2.v3.FileInfoV2> = core.serialization.object({
    filename: core.serialization.string(),
    directory: core.serialization.string(),
    contents: core.serialization.string(),
    editable: core.serialization.boolean()
});

export declare namespace FileInfoV2 {
    interface Raw {
        \\"filename\\": string;
        \\"directory\\": string;
        \\"contents\\": string;
        \\"editable\\": boolean;
    }
}
",
                                    "name": "FileInfoV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const Files: core.serialization.ObjectSchema<serializers.v2.v3.Files.Raw, TraceApi.v2.v3.Files> = core.serialization.object({
    files: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FileInfoV2))
});

export declare namespace Files {
    interface Raw {
        \\"files\\": serializers.v2.v3.FileInfoV2.Raw[];
    }
}
",
                                    "name": "Files.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const FunctionImplementation: core.serialization.ObjectSchema<serializers.v2.v3.FunctionImplementation.Raw, TraceApi.v2.v3.FunctionImplementation> = core.serialization.object({
    impl: core.serialization.string(),
    imports: core.serialization.string().optional()
});

export declare namespace FunctionImplementation {
    interface Raw {
        \\"impl\\": string;
        \\"imports\\"?: string | null;
    }
}
",
                                    "name": "FunctionImplementation.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const FunctionImplementationForMultipleLanguages: core.serialization.ObjectSchema<serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw, TraceApi.v2.v3.FunctionImplementationForMultipleLanguages> = core.serialization.object({
    codeByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementation).optional())
});

export declare namespace FunctionImplementationForMultipleLanguages {
    interface Raw {
        \\"codeByLanguage\\": Record<serializers.Language.Raw, serializers.v2.v3.FunctionImplementation.Raw | null | undefined>;
    }
}
",
                                    "name": "FunctionImplementationForMultipleLanguages.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const FunctionSignature: core.serialization.Schema<serializers.v2.v3.FunctionSignature.Raw, TraceApi.v2.v3.FunctionSignature> = core.serialization.union(\\"type\\", {
    void: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionSignature),
    nonVoid: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
    voidThatTakesActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionSignatureThatTakesActualResult)
}).transform<TraceApi.v2.v3.FunctionSignature>({
    parse: value => {
        switch (value.type) {
            case \\"void\\": return TraceApi.v2.v3.FunctionSignature.void(value);
            case \\"nonVoid\\": return TraceApi.v2.v3.FunctionSignature.nonVoid(value);
            case \\"voidThatTakesActualResult\\": return TraceApi.v2.v3.FunctionSignature.voidThatTakesActualResult(value);
            default: return TraceApi.v2.v3.FunctionSignature._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace FunctionSignature {
    type Raw = FunctionSignature.Void | FunctionSignature.NonVoid | FunctionSignature.VoidThatTakesActualResult;

    interface Void extends serializers.v2.v3.VoidFunctionSignature.Raw {
        \\"type\\": \\"void\\";
    }

    interface NonVoid extends serializers.v2.v3.NonVoidFunctionSignature.Raw {
        \\"type\\": \\"nonVoid\\";
    }

    interface VoidThatTakesActualResult extends serializers.v2.v3.VoidFunctionSignatureThatTakesActualResult.Raw {
        \\"type\\": \\"voidThatTakesActualResult\\";
    }
}
",
                                    "name": "FunctionSignature.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GeneratedFiles: core.serialization.ObjectSchema<serializers.v2.v3.GeneratedFiles.Raw, TraceApi.v2.v3.GeneratedFiles> = core.serialization.object({
    generatedTestCaseFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
    generatedTemplateFiles: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional()),
    other: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Files).optional())
});

export declare namespace GeneratedFiles {
    interface Raw {
        \\"generatedTestCaseFiles\\": Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        \\"generatedTemplateFiles\\": Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
        \\"other\\": Record<serializers.Language.Raw, serializers.v2.v3.Files.Raw | null | undefined>;
    }
}
",
                                    "name": "GeneratedFiles.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GetBasicSolutionFileRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetBasicSolutionFileRequest.Raw, TraceApi.v2.v3.GetBasicSolutionFileRequest> = core.serialization.object({
    methodName: core.serialization.string(),
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature)
});

export declare namespace GetBasicSolutionFileRequest {
    interface Raw {
        \\"methodName\\": string;
        \\"signature\\": serializers.v2.v3.NonVoidFunctionSignature.Raw;
    }
}
",
                                    "name": "GetBasicSolutionFileRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GetBasicSolutionFileResponse: core.serialization.ObjectSchema<serializers.v2.v3.GetBasicSolutionFileResponse.Raw, TraceApi.v2.v3.GetBasicSolutionFileResponse> = core.serialization.object({
    solutionFileByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FileInfoV2).optional())
});

export declare namespace GetBasicSolutionFileResponse {
    interface Raw {
        \\"solutionFileByLanguage\\": Record<serializers.Language.Raw, serializers.v2.v3.FileInfoV2.Raw | null | undefined>;
    }
}
",
                                    "name": "GetBasicSolutionFileResponse.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GetFunctionSignatureRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetFunctionSignatureRequest.Raw, TraceApi.v2.v3.GetFunctionSignatureRequest> = core.serialization.object({
    functionSignature: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionSignature)
});

export declare namespace GetFunctionSignatureRequest {
    interface Raw {
        \\"functionSignature\\": serializers.v2.v3.FunctionSignature.Raw;
    }
}
",
                                    "name": "GetFunctionSignatureRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GetFunctionSignatureResponse: core.serialization.ObjectSchema<serializers.v2.v3.GetFunctionSignatureResponse.Raw, TraceApi.v2.v3.GetFunctionSignatureResponse> = core.serialization.object({
    functionByLanguage: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language), core.serialization.string().optional())
});

export declare namespace GetFunctionSignatureResponse {
    interface Raw {
        \\"functionByLanguage\\": Record<serializers.Language.Raw, string | null | undefined>;
    }
}
",
                                    "name": "GetFunctionSignatureResponse.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GetGeneratedTestCaseFileRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetGeneratedTestCaseFileRequest.Raw, TraceApi.v2.v3.GetGeneratedTestCaseFileRequest> = core.serialization.object({
    template: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate).optional(),
    testCase: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseV2)
});

export declare namespace GetGeneratedTestCaseFileRequest {
    interface Raw {
        \\"template\\"?: serializers.v2.v3.TestCaseTemplate.Raw | null;
        \\"testCase\\": serializers.v2.v3.TestCaseV2.Raw;
    }
}
",
                                    "name": "GetGeneratedTestCaseFileRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const GetGeneratedTestCaseTemplateFileRequest: core.serialization.ObjectSchema<serializers.v2.v3.GetGeneratedTestCaseTemplateFileRequest.Raw, TraceApi.v2.v3.GetGeneratedTestCaseTemplateFileRequest> = core.serialization.object({
    template: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate)
});

export declare namespace GetGeneratedTestCaseTemplateFileRequest {
    interface Raw {
        \\"template\\": serializers.v2.v3.TestCaseTemplate.Raw;
    }
}
",
                                    "name": "GetGeneratedTestCaseTemplateFileRequest.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const LightweightProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.v3.LightweightProblemInfoV2.Raw, TraceApi.v2.v3.LightweightProblemInfoV2> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).ProblemId),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    variableTypes: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType))
});

export declare namespace LightweightProblemInfoV2 {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemName\\": string;
        \\"problemVersion\\": number;
        \\"variableTypes\\": serializers.VariableType.Raw[];
    }
}
",
                                    "name": "LightweightProblemInfoV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const NonVoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.v3.NonVoidFunctionDefinition.Raw, TraceApi.v2.v3.NonVoidFunctionDefinition> = core.serialization.object({
    signature: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionSignature),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementationForMultipleLanguages)
});

export declare namespace NonVoidFunctionDefinition {
    interface Raw {
        \\"signature\\": serializers.v2.v3.NonVoidFunctionSignature.Raw;
        \\"code\\": serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                                    "name": "NonVoidFunctionDefinition.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const NonVoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.v3.NonVoidFunctionSignature.Raw, TraceApi.v2.v3.NonVoidFunctionSignature> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    returnType: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType)
});

export declare namespace NonVoidFunctionSignature {
    interface Raw {
        \\"parameters\\": serializers.v2.v3.Parameter.Raw[];
        \\"returnType\\": serializers.VariableType.Raw;
    }
}
",
                                    "name": "NonVoidFunctionSignature.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const Parameter: core.serialization.ObjectSchema<serializers.v2.v3.Parameter.Raw, TraceApi.v2.v3.Parameter> = core.serialization.object({
    parameterId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId),
    name: core.serialization.string(),
    variableType: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType)
});

export declare namespace Parameter {
    interface Raw {
        \\"parameterId\\": serializers.v2.v3.ParameterId.Raw;
        \\"name\\": string;
        \\"variableType\\": serializers.VariableType.Raw;
    }
}
",
                                    "name": "Parameter.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const ParameterId: core.serialization.Schema<serializers.v2.v3.ParameterId.Raw, TraceApi.v2.v3.ParameterId> = core.serialization.string();

export declare namespace ParameterId {
    type Raw = string;
}
",
                                    "name": "ParameterId.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const ProblemInfoV2: core.serialization.ObjectSchema<serializers.v2.v3.ProblemInfoV2.Raw, TraceApi.v2.v3.ProblemInfoV2> = core.serialization.object({
    problemId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).ProblemId),
    problemDescription: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).ProblemDescription),
    problemName: core.serialization.string(),
    problemVersion: core.serialization.number(),
    supportedLanguages: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).Language)),
    customFiles: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.CustomFiles),
    generatedFiles: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.GeneratedFiles),
    customTestCaseTemplates: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplate)),
    testcases: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseV2)),
    isPublic: core.serialization.boolean()
});

export declare namespace ProblemInfoV2 {
    interface Raw {
        \\"problemId\\": serializers.ProblemId.Raw;
        \\"problemDescription\\": serializers.ProblemDescription.Raw;
        \\"problemName\\": string;
        \\"problemVersion\\": number;
        \\"supportedLanguages\\": serializers.Language.Raw[];
        \\"customFiles\\": serializers.v2.v3.CustomFiles.Raw;
        \\"generatedFiles\\": serializers.v2.v3.GeneratedFiles.Raw;
        \\"customTestCaseTemplates\\": serializers.v2.v3.TestCaseTemplate.Raw[];
        \\"testcases\\": serializers.v2.v3.TestCaseV2.Raw[];
        \\"isPublic\\": boolean;
    }
}
",
                                    "name": "ProblemInfoV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseExpects: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseExpects.Raw, TraceApi.v2.v3.TestCaseExpects> = core.serialization.object({
    expectedStdout: core.serialization.string().optional()
});

export declare namespace TestCaseExpects {
    interface Raw {
        \\"expectedStdout\\"?: string | null;
    }
}
",
                                    "name": "TestCaseExpects.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseFunction: core.serialization.Schema<serializers.v2.v3.TestCaseFunction.Raw, TraceApi.v2.v3.TestCaseFunction> = core.serialization.union(\\"type\\", {
    withActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseWithActualResultImplementation),
    custom: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.VoidFunctionDefinition)
}).transform<TraceApi.v2.v3.TestCaseFunction>({
    parse: value => {
        switch (value.type) {
            case \\"withActualResult\\": return TraceApi.v2.v3.TestCaseFunction.withActualResult(value);
            case \\"custom\\": return TraceApi.v2.v3.TestCaseFunction.custom(value);
            default: return TraceApi.v2.v3.TestCaseFunction._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseFunction {
    type Raw = TestCaseFunction.WithActualResult | TestCaseFunction.Custom;

    interface WithActualResult extends serializers.v2.v3.TestCaseWithActualResultImplementation.Raw {
        \\"type\\": \\"withActualResult\\";
    }

    interface Custom extends serializers.v2.v3.VoidFunctionDefinition.Raw {
        \\"type\\": \\"custom\\";
    }
}
",
                                    "name": "TestCaseFunction.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseId: core.serialization.Schema<serializers.v2.v3.TestCaseId.Raw, TraceApi.v2.v3.TestCaseId> = core.serialization.string();

export declare namespace TestCaseId {
    type Raw = string;
}
",
                                    "name": "TestCaseId.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseImplementation: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseImplementation.Raw, TraceApi.v2.v3.TestCaseImplementation> = core.serialization.object({
    description: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationDescription),
    function: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseFunction)
});

export declare namespace TestCaseImplementation {
    interface Raw {
        \\"description\\": serializers.v2.v3.TestCaseImplementationDescription.Raw;
        \\"function\\": serializers.v2.v3.TestCaseFunction.Raw;
    }
}
",
                                    "name": "TestCaseImplementation.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseImplementationDescription: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseImplementationDescription.Raw, TraceApi.v2.v3.TestCaseImplementationDescription> = core.serialization.object({
    boards: core.serialization.list(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationDescriptionBoard))
});

export declare namespace TestCaseImplementationDescription {
    interface Raw {
        \\"boards\\": serializers.v2.v3.TestCaseImplementationDescriptionBoard.Raw[];
    }
}
",
                                    "name": "TestCaseImplementationDescription.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseImplementationDescriptionBoard: core.serialization.Schema<serializers.v2.v3.TestCaseImplementationDescriptionBoard.Raw, TraceApi.v2.v3.TestCaseImplementationDescriptionBoard> = core.serialization.union(\\"type\\", {
    html: core.serialization.object({
        value: core.serialization.string()
    }),
    paramId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId)
    })
}).transform<TraceApi.v2.v3.TestCaseImplementationDescriptionBoard>({
    parse: value => {
        switch (value.type) {
            case \\"html\\": return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.html(value.value);
            case \\"paramId\\": return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard.paramId(value.value);
            default: return TraceApi.v2.v3.TestCaseImplementationDescriptionBoard._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseImplementationDescriptionBoard {
    type Raw = TestCaseImplementationDescriptionBoard.Html | TestCaseImplementationDescriptionBoard.ParamId;

    interface Html {
        \\"type\\": \\"html\\";
        \\"value\\": string;
    }

    interface ParamId {
        \\"type\\": \\"paramId\\";
        \\"value\\": serializers.v2.v3.ParameterId.Raw;
    }
}
",
                                    "name": "TestCaseImplementationDescriptionBoard.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseImplementationReference: core.serialization.Schema<serializers.v2.v3.TestCaseImplementationReference.Raw, TraceApi.v2.v3.TestCaseImplementationReference> = core.serialization.union(\\"type\\", {
    templateId: core.serialization.object({
        value: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplateId)
    }),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementation)
}).transform<TraceApi.v2.v3.TestCaseImplementationReference>({
    parse: value => {
        switch (value.type) {
            case \\"templateId\\": return TraceApi.v2.v3.TestCaseImplementationReference.templateId(value.value);
            case \\"implementation\\": return TraceApi.v2.v3.TestCaseImplementationReference.implementation(value);
            default: return TraceApi.v2.v3.TestCaseImplementationReference._unknown(value);
        }
    },
    json: value => value as any
});

export declare namespace TestCaseImplementationReference {
    type Raw = TestCaseImplementationReference.TemplateId | TestCaseImplementationReference.Implementation;

    interface TemplateId {
        \\"type\\": \\"templateId\\";
        \\"value\\": serializers.v2.v3.TestCaseTemplateId.Raw;
    }

    interface Implementation extends serializers.v2.v3.TestCaseImplementation.Raw {
        \\"type\\": \\"implementation\\";
    }
}
",
                                    "name": "TestCaseImplementationReference.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseMetadata: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseMetadata.Raw, TraceApi.v2.v3.TestCaseMetadata> = core.serialization.object({
    id: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseId),
    name: core.serialization.string(),
    hidden: core.serialization.boolean()
});

export declare namespace TestCaseMetadata {
    interface Raw {
        \\"id\\": serializers.v2.v3.TestCaseId.Raw;
        \\"name\\": string;
        \\"hidden\\": boolean;
    }
}
",
                                    "name": "TestCaseMetadata.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseTemplate: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseTemplate.Raw, TraceApi.v2.v3.TestCaseTemplate> = core.serialization.object({
    templateId: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseTemplateId),
    name: core.serialization.string(),
    implementation: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementation)
});

export declare namespace TestCaseTemplate {
    interface Raw {
        \\"templateId\\": serializers.v2.v3.TestCaseTemplateId.Raw;
        \\"name\\": string;
        \\"implementation\\": serializers.v2.v3.TestCaseImplementation.Raw;
    }
}
",
                                    "name": "TestCaseTemplate.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseTemplateId: core.serialization.Schema<serializers.v2.v3.TestCaseTemplateId.Raw, TraceApi.v2.v3.TestCaseTemplateId> = core.serialization.string();

export declare namespace TestCaseTemplateId {
    type Raw = string;
}
",
                                    "name": "TestCaseTemplateId.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseV2: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseV2.Raw, TraceApi.v2.v3.TestCaseV2> = core.serialization.object({
    metadata: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseMetadata),
    implementation: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseImplementationReference),
    arguments: core.serialization.record(core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.ParameterId), core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableValue)),
    expects: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.TestCaseExpects).optional()
});

export declare namespace TestCaseV2 {
    interface Raw {
        \\"metadata\\": serializers.v2.v3.TestCaseMetadata.Raw;
        \\"implementation\\": serializers.v2.v3.TestCaseImplementationReference.Raw;
        \\"arguments\\": Record<serializers.v2.v3.ParameterId.Raw, serializers.VariableValue.Raw>;
        \\"expects\\"?: serializers.v2.v3.TestCaseExpects.Raw | null;
    }
}
",
                                    "name": "TestCaseV2.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const TestCaseWithActualResultImplementation: core.serialization.ObjectSchema<serializers.v2.v3.TestCaseWithActualResultImplementation.Raw, TraceApi.v2.v3.TestCaseWithActualResultImplementation> = core.serialization.object({
    getActualResult: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.NonVoidFunctionDefinition),
    assertCorrectnessCheck: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).v2.v3.AssertCorrectnessCheck)
});

export declare namespace TestCaseWithActualResultImplementation {
    interface Raw {
        \\"getActualResult\\": serializers.v2.v3.NonVoidFunctionDefinition.Raw;
        \\"assertCorrectnessCheck\\": serializers.v2.v3.AssertCorrectnessCheck.Raw;
    }
}
",
                                    "name": "TestCaseWithActualResultImplementation.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const VoidFunctionDefinition: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionDefinition.Raw, TraceApi.v2.v3.VoidFunctionDefinition> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementationForMultipleLanguages)
});

export declare namespace VoidFunctionDefinition {
    interface Raw {
        \\"parameters\\": serializers.v2.v3.Parameter.Raw[];
        \\"code\\": serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                                    "name": "VoidFunctionDefinition.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const VoidFunctionDefinitionThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionDefinitionThatTakesActualResult.Raw, TraceApi.v2.v3.VoidFunctionDefinitionThatTakesActualResult> = core.serialization.object({
    additionalParameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    code: core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.FunctionImplementationForMultipleLanguages)
});

export declare namespace VoidFunctionDefinitionThatTakesActualResult {
    interface Raw {
        \\"additionalParameters\\": serializers.v2.v3.Parameter.Raw[];
        \\"code\\": serializers.v2.v3.FunctionImplementationForMultipleLanguages.Raw;
    }
}
",
                                    "name": "VoidFunctionDefinitionThatTakesActualResult.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const VoidFunctionSignature: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionSignature.Raw, TraceApi.v2.v3.VoidFunctionSignature> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter))
});

export declare namespace VoidFunctionSignature {
    interface Raw {
        \\"parameters\\": serializers.v2.v3.Parameter.Raw[];
    }
}
",
                                    "name": "VoidFunctionSignature.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from \\"../../../../../../..\\";
import { TraceApi } from \\"../../../../../../../..\\";
import * as core from \\"../../../../../../../../core\\";

export const VoidFunctionSignatureThatTakesActualResult: core.serialization.ObjectSchema<serializers.v2.v3.VoidFunctionSignatureThatTakesActualResult.Raw, TraceApi.v2.v3.VoidFunctionSignatureThatTakesActualResult> = core.serialization.object({
    parameters: core.serialization.list(core.serialization.lazyObject(async () => (await import(\\"../../../../../../..\\")).v2.v3.Parameter)),
    actualResultType: core.serialization.lazy(async () => (await import(\\"../../../../../../..\\")).VariableType)
});

export declare namespace VoidFunctionSignatureThatTakesActualResult {
    interface Raw {
        \\"parameters\\": serializers.v2.v3.Parameter.Raw[];
        \\"actualResultType\\": serializers.VariableType.Raw;
    }
}
",
                                    "name": "VoidFunctionSignatureThatTakesActualResult.ts",
                                    "type": "file",
                                  },
                                  Object {
                                    "contents": "export * from \\"./TestCaseTemplateId\\";
export * from \\"./TestCaseId\\";
export * from \\"./ParameterId\\";
export * from \\"./ProblemInfoV2\\";
export * from \\"./LightweightProblemInfoV2\\";
export * from \\"./CreateProblemRequestV2\\";
export * from \\"./TestCaseV2\\";
export * from \\"./TestCaseExpects\\";
export * from \\"./TestCaseImplementationReference\\";
export * from \\"./BasicTestCaseTemplate\\";
export * from \\"./TestCaseTemplate\\";
export * from \\"./TestCaseImplementation\\";
export * from \\"./TestCaseFunction\\";
export * from \\"./TestCaseWithActualResultImplementation\\";
export * from \\"./VoidFunctionDefinition\\";
export * from \\"./Parameter\\";
export * from \\"./NonVoidFunctionDefinition\\";
export * from \\"./VoidFunctionSignature\\";
export * from \\"./NonVoidFunctionSignature\\";
export * from \\"./VoidFunctionSignatureThatTakesActualResult\\";
export * from \\"./AssertCorrectnessCheck\\";
export * from \\"./DeepEqualityCorrectnessCheck\\";
export * from \\"./VoidFunctionDefinitionThatTakesActualResult\\";
export * from \\"./TestCaseImplementationDescription\\";
export * from \\"./TestCaseImplementationDescriptionBoard\\";
export * from \\"./TestCaseMetadata\\";
export * from \\"./FunctionImplementationForMultipleLanguages\\";
export * from \\"./FunctionImplementation\\";
export * from \\"./GeneratedFiles\\";
export * from \\"./CustomFiles\\";
export * from \\"./BasicCustomFiles\\";
export * from \\"./Files\\";
export * from \\"./FileInfoV2\\";
export * from \\"./DefaultProvidedFile\\";
export * from \\"./FunctionSignature\\";
export * from \\"./GetFunctionSignatureRequest\\";
export * from \\"./GetFunctionSignatureResponse\\";
export * from \\"./GetBasicSolutionFileRequest\\";
export * from \\"./GetBasicSolutionFileResponse\\";
export * from \\"./GetGeneratedTestCaseFileRequest\\";
export * from \\"./GetGeneratedTestCaseTemplateFileRequest\\";
",
                                    "name": "index.ts",
                                    "type": "file",
                                  },
                                ],
                                "name": "types",
                                "type": "directory",
                              },
                            ],
                            "name": "problem",
                            "type": "directory",
                          },
                        ],
                        "name": "resources",
                        "type": "directory",
                      },
                    ],
                    "name": "v3",
                    "type": "directory",
                  },
                ],
                "name": "resources",
                "type": "directory",
              },
            ],
            "name": "v2",
            "type": "directory",
          },
        ],
        "name": "resources",
        "type": "directory",
      },
    ],
    "name": "serialization",
    "type": "directory",
  },
]
`;
